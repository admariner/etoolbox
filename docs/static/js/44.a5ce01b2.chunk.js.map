{"version":3,"sources":["containers/URLEncoder/services.ts","containers/URLEncoder/index.tsx"],"names":["transform","value","encoded","decodeURIComponent","encodeURIComponent","useStyles","makeStyles","theme","root","margin","spacing","toolbar","padding","mapStateToProps","state","inputText","textInputs","mapDispatchToProps","dispatch","storeInputText","name","setTextAction","connect","props","title","classes","isMdUp","useIsWidthUp","React","useState","services","transformed","setTransformed","Helmet","className","FeatureTitle","iconType","DecodeIcon","TextField","autoFocus","label","placeholder","multiline","minRows","maxRows","variant","fullWidth","onChange","e","target","Toolbar","Button","component","color","disabled","onClick","Box","display","flexGrow","CopyButton","data","sx","mr","ResultMonospace","result"],"mappings":"+WAAO,SAASA,EAAUC,EAA2BC,GACjD,OAAKD,EAIDC,EACOC,mBAAmBF,GAEnBG,mBAAmBH,GANnB,EAQd,C,uDCUKI,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,OAAQF,EAAMG,QAAQ,IAE1BC,QAAS,CACLF,OAAQ,EACRG,QAAS,GANiB,IAoF3B,SAASC,EAAgBC,GAC5B,MAAO,CACHC,UAAWD,EAAME,WAAN,oBAElB,CAEM,SAASC,EAAmBC,GAC/B,MAAO,CACHC,eAAgB,SAACC,EAAcnB,GAAf,OAAiCiB,EAASG,YAAcD,EAAMnB,GAA9D,EAEvB,CAEcqB,sBAAQT,EAAiBI,EAAzBK,EAjFqB,SAACC,GACjC,IAAMC,EAAQ,wBACRC,EAAUpB,IACVqB,EAASC,YAAa,MACpBZ,EAA8BQ,EAA9BR,UAAWI,EAAmBI,EAAnBJ,eACnB,EAAsCS,IAAMC,SAASC,EAAmBf,GAAW,IAAnF,mBAAOgB,EAAP,KAAoBC,EAApB,KAOA,OACI,qCACI,cAACC,EAAA,EAAD,CAAQT,MAAOA,IACf,sBAAKU,UAAWT,EAAQjB,KAAxB,UACI,cAAC2B,EAAA,EAAD,CAAcC,SAAUC,IAAYb,MAAOA,IAE3C,cAACc,EAAA,EAAD,CACIC,UAAWb,EACXc,MAAM,2BACNC,YAAY,iCACZC,WAAS,EACTC,QAAS,EACTC,QAASlB,EAAS,GAAK,EACvBmB,QAAQ,WACRpC,OAAO,SACPqC,WAAW,EACX7C,MAAOc,EACPgC,SAAU,SAAAC,GAAC,OAAI7B,EAAe,sBAAuB6B,EAAEC,OAAOhD,MAAnD,IAGf,eAACiD,EAAA,EAAD,CAAShB,UAAWT,EAAQd,QAA5B,UACI,cAACwC,EAAA,EAAD,CACIN,QAAQ,YACRO,UAAU,OACVC,MAAM,UACNC,UAAWvB,EACXwB,QA/BP,WACTpC,EAAe,sBAAuBY,GACtCC,EAAe,GAClB,EA6BmBR,MAAM,sBANV,SAOI,cAAC,IAAD,MAEJ,cAACgC,EAAA,EAAD,CAAKC,QAAQ,OAAOC,SAAU,IAC9B,cAACC,EAAA,EAAD,CAAYC,KAAM7B,EAAa8B,GAAI,CAAEC,GAAI,KACzC,cAACX,EAAA,EAAD,CACIU,GAAI,CAAEC,GAAI,GACVjB,QAAQ,YACRrB,MAAM,qBACN6B,MAAM,UACNC,UAAWvC,EACXwC,QAAS,kBAAMvB,EAAeF,EAAmBf,GAAW,GAAnD,EANb,SAOI,cAAC,IAAD,MAEJ,cAACoC,EAAA,EAAD,CACIN,QAAQ,YACRrB,MAAM,qBACN6B,MAAM,UACNC,UAAWvC,EACXwC,QAAS,kBAAMvB,EAAeF,EAAmBf,GAAW,GAAnD,EALb,SAMI,cAAC,IAAD,SAIR,cAACgD,EAAA,EAAD,CAAiBvB,MAAM,SAASwB,OAAQjC,SAIvD,G","file":"static/js/44.a5ce01b2.chunk.js","sourcesContent":["export function transform(value: string | undefined, encoded: boolean): string {\n    if (!value) {\n        return '';\n    }\n\n    if (encoded) {\n        return decodeURIComponent(value);\n    } else {\n        return encodeURIComponent(value);\n    }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport { Box, Toolbar } from '@mui/material';\nimport Button from '@mui/material/Button';\nimport { makeStyles } from '@mui/styles';\nimport EncodeIcon from '@mui/icons-material/Code';\nimport DecodeIcon from '@mui/icons-material/CodeOff';\nimport TextField from '@mui/material/TextField';\nimport ImportExportIcon from '@mui/icons-material/ImportExport';\nimport { setTextAction } from '../../actions/text-actions';\nimport { AppState } from '../../reducers';\nimport * as services from './services';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport CopyButton from '../../components/CopyButton';\nimport { Helmet } from 'react-helmet';\nimport ResultMonospace from '../../components/ResultMonospace';\nimport { useIsWidthUp } from '../../theme';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    toolbar: {\n        margin: 0,\n        padding: 0,\n    },\n}));\n\ninterface Props {\n    inputText?: string;\n    storeInputText: (name: string, value: string) => void;\n}\n\nconst URLEncoder: React.FC<Props> = (props: Props) => {\n    const title = 'URL Encoder / decoder';\n    const classes = useStyles();\n    const isMdUp = useIsWidthUp('md');\n    const { inputText, storeInputText } = props;\n    const [transformed, setTransformed] = React.useState(services.transform(inputText, false));\n\n    const flip = () => {\n        storeInputText('lastUrlEncoderValue', transformed);\n        setTransformed('');\n    };\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={DecodeIcon} title={title} />\n\n                <TextField\n                    autoFocus={isMdUp}\n                    label=\"Content to encode/decode\"\n                    placeholder=\"Paste or type the content here\"\n                    multiline\n                    minRows={4}\n                    maxRows={isMdUp ? 20 : 4}\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    fullWidth={true}\n                    value={inputText}\n                    onChange={e => storeInputText('lastUrlEncoderValue', e.target.value)}\n                />\n\n                <Toolbar className={classes.toolbar}>\n                    <Button\n                        variant=\"contained\"\n                        component=\"span\"\n                        color=\"primary\"\n                        disabled={!transformed}\n                        onClick={flip}\n                        title=\"Switch data content\">\n                        <ImportExportIcon />\n                    </Button>\n                    <Box display=\"flex\" flexGrow={1}></Box>\n                    <CopyButton data={transformed} sx={{ mr: 1 }} />\n                    <Button\n                        sx={{ mr: 1 }}\n                        variant=\"contained\"\n                        title=\"Encode the content\"\n                        color=\"primary\"\n                        disabled={!inputText}\n                        onClick={() => setTransformed(services.transform(inputText, false))}>\n                        <EncodeIcon />\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        title=\"Decode the content\"\n                        color=\"primary\"\n                        disabled={!inputText}\n                        onClick={() => setTransformed(services.transform(inputText, true))}>\n                        <DecodeIcon />\n                    </Button>\n                </Toolbar>\n\n                <ResultMonospace label=\"Result\" result={transformed} />\n            </div>\n        </>\n    );\n};\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        inputText: state.textInputs['lastUrlEncoderValue'],\n    };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(URLEncoder);\n"],"sourceRoot":""}