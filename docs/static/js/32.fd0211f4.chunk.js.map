{"version":3,"sources":["containers/Base64FileEncoder/services.ts","containers/Base64FileEncoder/styled.ts","containers/Base64FileEncoder/index.tsx","components/FeatureTitle/index.tsx","components/CopyButton/index.tsx","components/Spinner/Spinner.tsx"],"names":["MAX_FILE_SIZE_BYTES","imageResizer","marginTop","display","alignItems","justifyContent","border","useStyles","makeStyles","theme","root","margin","spacing","flexGrow","header","padding","dropzone","flex","cursor","flexDirection","image","width","toolbar","marginLeft","Base64FileEncoder","title","classes","useState","encodedFiles","setEncodedFiles","errors","setErrors","onDrop","useCallback","acceptedFiles","rejectedFiles","map","rejection","name","file","size","error","prettyBytes","forEach","Promise","resolve","reject","reader","FileReader","base","addEventListener","e","encoded","result","readAsDataURL","loadFile","then","encFile","list","catch","useDropzone","maxSize","multiple","getRootProps","getInputProps","processing","length","Helmet","className","FeatureTitle","iconType","PanoramaIcon","Spinner","active","Card","Typography","variant","errFile","idx","color","startsWith","Box","style","defaultSize","height","src","alt","CardContent","gutterBottom","align","component","TextField","label","fullWidth","value","multiline","minRows","Toolbar","CopyButton","data","wordBreak","titleWithIcon","titleContainer","icon","marginRight","props","FeatureIcon","hoverMessage","feedbackMessage","Icon","AssignmentTurnedIn","setToasterState","useToasterUpdate","onClick","message","substring","copy","format","open","type","autoHideDuration","disabled","background","classNamePrefix","spinner","children"],"mappings":"4RAeaA,EAAsB,K,aCbtBC,EAAe,CACxBC,UAAW,GACXC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,OAAQ,kBAGCC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CAC1CC,KAAM,CACFC,OAAQF,EAAMG,QAAQ,GACtBC,SAAU,GAEdC,OAAQ,CACJC,QAAS,UAEbC,SAAU,CACNC,KAAM,IACNC,OAAQ,UACRf,QAAS,OACTgB,cAAe,SACff,WAAY,SACZW,QAAS,QAEbK,MAAO,CACHC,MAAO,QAEXC,QAAS,CACLX,OAAQ,EACRI,QAAS,EACT,QAAS,CACLQ,WAAYd,EAAMG,QAAQ,KAvBG,I,eCsH1BY,UAjHqB,WAChC,IAAMC,EAAQ,sBACRC,EAAUnB,IAChB,EAAwCoB,mBAAwB,IAAhE,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA4BF,mBAAsB,IAAlD,mBAAOG,EAAP,KAAeC,EAAf,KAEMC,EAASC,uBAAY,SAACC,EAAuBC,GAC/CJ,EAAsBI,EFoBJC,KAAI,SAAAC,GAAS,MAAK,CACpCC,KAAMD,EAAUE,KAAKD,KACrBE,KAAMH,EAAUE,KAAKC,KACrBC,MAAM,uBAAD,OAAyBC,YAAY1C,IAHX,KEnB/B6B,EAAgB,IAEhBK,EAAcS,SAAQ,SAACJ,GAAD,OFRvB,SAAkBA,GACrB,OAAO,IAAIK,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAS,IAAIC,WACbC,EAAO,CACTX,KAAMC,EAAKD,KACXE,KAAMD,EAAKC,MAGfO,EAAOG,iBAAiB,SAAS,SAAAC,GAAC,OAAIL,EAAO,wBAAD,OAAyBK,GAAnC,IAClCJ,EAAOG,iBAAiB,SAAS,SAAAC,GAAC,OAAIL,EAAO,sBAAD,OAAuBK,GAAjC,IAClCJ,EAAOG,iBACH,QACA,kBACIL,EAAQ,2BACDI,GADA,IAEHG,QAASL,EAAOM,SAHxB,IAKA,GAGJN,EAAOO,cAAcf,EACxB,GACJ,CEbWgB,CAAShB,GACJiB,MAAK,SAAAC,GAAO,OAAI5B,GAAgB,SAAA6B,GAAI,4BAAQA,GAAR,CAAcD,GAAd,GAAxB,IACZE,OAAM,SAAAlB,GAAK,OACRV,GAAU,SAAA2B,GAAI,4BACPA,GADO,CAEV,CACIpB,KAAMC,EAAKD,KACXE,KAAMD,EAAKC,KACXC,UALM,GADN,GAHE,GAczB,GAAE,IAEH,EAAuDmB,YAAY,CAC/DC,QAAS7D,EACT8D,UAAU,EACV9B,WAHIE,EAAR,EAAQA,cAAe6B,EAAvB,EAAuBA,aAAcC,EAArC,EAAqCA,cAM/BC,EAAa/B,EAAcgC,SAAWtC,EAAasC,OAEzD,OACI,qCACI,cAACC,EAAA,EAAD,CAAQ1C,MAAOA,IACf,sBAAK2C,UAAW1C,EAAQhB,KAAxB,UACI,cAAC2D,EAAA,EAAD,CAAcC,SAAUC,IAAc9C,MAAOA,IAE7C,cAAC+C,EAAA,EAAD,CAASC,OAAQR,EAAjB,SACI,eAACS,EAAA,EAAD,2BAAUX,EAAa,CAAEK,UAAW1C,EAAQV,YAA5C,cACI,qCAAWgD,MACX,cAACW,EAAA,EAAD,CAAYC,QAAQ,QAApB,2CACA,cAACD,EAAA,EAAD,CAAYC,QAAQ,QAApB,iDAGR,8BACK9C,GACGA,EAAOM,KAAI,SAACyC,EAAoBC,GAC5B,IAAMtC,EAAOE,YAAYmC,EAAQrC,MACjC,OACI,8BACI,eAACmC,EAAA,EAAD,CAAYC,QAAQ,QAApB,UACI,iCAASC,EAAQvC,OADrB,KACsCE,EADtC,YACqDqC,EAAQpC,UAFvDqC,EAMjB,MAET,8BACKb,GACG,eAACU,EAAA,EAAD,CAAYI,MAAM,YAAYH,QAAQ,KAAtC,wBACgB1C,EAAcgC,OAAStC,EAAasC,OADpD,gBAMPtC,EAAaQ,KAAI,SAACG,EAAmBuC,GAApB,OACd,8BACI,eAACJ,EAAA,EAAD,WACKnC,EAAKa,QAAQ4B,WAAW,gBACrB,cAACC,EAAA,EAAD,CAAK9E,QAAQ,OAAOC,WAAW,SAASC,eAAe,SAAvD,SACI,cAAC,IAAD,CAAW6E,MAAOjF,EAAckF,YAAa,CAAE9D,MAAO,IAAK+D,OAAQ,QAAnE,SACI,qBAAKC,IAAK9C,EAAKa,QAASkC,IAAK/C,EAAKD,KAAM8B,UAAW1C,EAAQN,YAIvE,eAACmE,EAAA,EAAD,WACI,eAACZ,EAAA,EAAD,CAAYa,cAAY,EAACC,MAAM,SAASb,QAAQ,KAAKc,UAAU,KAA/D,UACI,4BAAInD,EAAKD,OADb,KACyBI,YAAYH,EAAKC,MAD1C,OAGCD,EAAKa,QAAQ4B,WAAW,gBACrB,cAACW,EAAA,EAAD,CACIC,MAAM,eACNC,WAAS,EACTC,MAAK,oBAAevD,EAAKD,KAApB,kBAAkCC,EAAKa,QAAvC,OACLzC,OAAO,SACPiE,QAAQ,aAGhB,cAACe,EAAA,EAAD,CACIC,MAAM,kDACNC,WAAS,EACTC,MAAOvD,EAAKa,QACZzC,OAAO,SACPiE,QAAQ,WACRmB,WAAS,EACTC,QAAQ,MAEZ,eAACC,EAAA,EAAD,CAAS7B,UAAW1C,EAAQJ,QAA5B,UACI,cAAC2D,EAAA,EAAD,CAAK9E,QAAQ,OAAOU,SAAU,IAC9B,cAACqF,EAAA,EAAD,CAAYC,KAAM5D,EAAKa,oBAjC7B0B,EADI,SA2CjC,C,mCC9HD,mCAIMvE,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCgB,MAAO,CACH2E,UAAW,cAEfC,cAAe,CACXlG,QAAS,OACTC,WAAY,UAEhBkG,eAAgB,CACZnG,QAAS,OACTE,eAAgB,UAEpBkG,KAAM,CACFnB,OAAQ,OACR/D,MAAO,OACPmF,YAAa/F,EAAMG,QAAQ,IAfD,IAwCnByD,IAhBuB,SAACoC,GACnC,IAAM/E,EAAUnB,IACVmG,EAAcD,EAAMnC,SAE1B,OACI,qBAAKF,UAAW1C,EAAQ4E,eAAxB,SACI,sBAAKlC,UAAW1C,EAAQ2E,cAAxB,UACI,cAACK,EAAD,CAAatC,UAAW1C,EAAQ6E,OAChC,cAAC,IAAD,CAAY3B,QAAQ,KAAKR,UAAW1C,EAAQD,MAA5C,SACKgF,EAAMhF,YAK1B,C,mCC1CD,uEAwCeyE,IA1BqB,SAAC,GAA+E,IAA7EC,EAA4E,EAA5EA,KAAMQ,EAAsE,EAAtEA,aAAcC,EAAwD,EAAxDA,gBAAwD,IAAvCC,YAAuC,MAAhCC,IAAgC,EACvGC,EAAoBC,cAApBD,gBAaR,OACI,cAAC,IAAD,CACIE,QAbW,WACf,GAAKd,EAAL,CAIA,IAAMe,EAAO,OAAGN,QAAH,IAAGA,IAAH,yCAAwDT,EAAKgB,UAAU,EAAG,IAA1E,WAEbC,IAAajB,EAAM,CAAEkB,OAAQ,eAC7BN,EAAgB,CAAEO,MAAM,EAAMJ,UAASK,KAAM,UAAWC,iBAAkB,KALzE,CAMJ,EAKOC,UAAWtB,EACX1E,MAAK,OAAEkF,QAAF,IAAEA,IAAgB,oBACvB/B,QAAQ,YACRG,MAAM,UALV,SAMI,cAAC8B,EAAD,KAGX,C,mCCtCD,+FAOMtG,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACF,qBAAsB,CAClBgH,WAAY,uBAHU,IAarBlD,EAA2B,SAACiC,GACrC,IAAM/E,EAAUnB,IAEhB,OACI,cAAC,IAAD,CACIoH,gBAAgB,WAChBvD,UAAW1C,EAAQhB,KACnB+D,OAAQgC,EAAMhC,OACdmD,QAAS,cAAC,IAAD,CAAa7C,MAAM,YAJhC,SAKK0B,EAAMoB,UAGlB,C","file":"static/js/32.fd0211f4.chunk.js","sourcesContent":["import { FileRejection } from 'react-dropzone';\nimport prettyBytes from 'pretty-bytes';\n\nexport interface EncodedFile {\n    name: string;\n    size: number;\n    encoded: string;\n}\n\nexport interface ErrorFile {\n    name: string;\n    size: number;\n    error: string;\n}\n\nexport const MAX_FILE_SIZE_BYTES = 250000;\n\nexport function loadFile(file: File): Promise<EncodedFile> {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        const base = {\n            name: file.name,\n            size: file.size,\n        };\n\n        reader.addEventListener('abort', e => reject(`File upload aborted: ${e}`));\n        reader.addEventListener('error', e => reject(`File upload error: ${e}`));\n        reader.addEventListener(\n            'load',\n            () =>\n                resolve({\n                    ...base,\n                    encoded: reader.result as string,\n                }),\n            false,\n        );\n\n        reader.readAsDataURL(file);\n    });\n}\n\nexport function rejectFiles(fileRejections: FileRejection[]): ErrorFile[] {\n    return fileRejections.map(rejection => ({\n        name: rejection.file.name,\n        size: rejection.file.size,\n        error: `Exceeds size limit: ${prettyBytes(MAX_FILE_SIZE_BYTES)}`,\n    }));\n}\n","import { makeStyles } from '@material-ui/core';\n\nexport const imageResizer = {\n    marginTop: 10,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    border: 'solid 1px blue',\n};\n\nexport const useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(1),\n        flexGrow: 1,\n    },\n    header: {\n        padding: '20px 0',\n    },\n    dropzone: {\n        flex: '1',\n        cursor: 'pointer',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        padding: '20px',\n    },\n    image: {\n        width: '100%',\n    },\n    toolbar: {\n        margin: 0,\n        padding: 0,\n        '& > *': {\n            marginLeft: theme.spacing(1),\n        },\n    },\n}));\n","import React, { useCallback, useState } from 'react';\nimport { FileRejection, useDropzone } from 'react-dropzone';\n\nimport { Box, Card, CardContent, TextField, Toolbar, Typography } from '@material-ui/core';\nimport PanoramaIcon from '@material-ui/icons/Panorama';\nimport prettyBytes from 'pretty-bytes';\nimport { Resizable } from 're-resizable';\n\nimport CopyButton from '../../components/CopyButton';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport { Spinner } from '../../components/Spinner/Spinner';\nimport { EncodedFile, ErrorFile, loadFile, MAX_FILE_SIZE_BYTES, rejectFiles } from './services';\nimport { imageResizer, useStyles } from './styled';\nimport { Helmet } from 'react-helmet';\n\nconst Base64FileEncoder: React.FC = () => {\n    const title = 'Base64 file encoder';\n    const classes = useStyles();\n    const [encodedFiles, setEncodedFiles] = useState<EncodedFile[]>([]);\n    const [errors, setErrors] = useState<ErrorFile[]>([]);\n\n    const onDrop = useCallback((acceptedFiles: File[], rejectedFiles: FileRejection[]) => {\n        setErrors(rejectFiles(rejectedFiles)); // set/reset errors\n        setEncodedFiles([]); // reset UI\n\n        acceptedFiles.forEach((file: File) =>\n            loadFile(file)\n                .then(encFile => setEncodedFiles(list => [...list, encFile]))\n                .catch(error =>\n                    setErrors(list => [\n                        ...list,\n                        {\n                            name: file.name,\n                            size: file.size,\n                            error,\n                        },\n                    ]),\n                ),\n        );\n    }, []);\n\n    const { acceptedFiles, getRootProps, getInputProps } = useDropzone({\n        maxSize: MAX_FILE_SIZE_BYTES,\n        multiple: true,\n        onDrop,\n    });\n\n    const processing = acceptedFiles.length !== encodedFiles.length;\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={PanoramaIcon} title={title} />\n\n                <Spinner active={processing}>\n                    <Card {...getRootProps({ className: classes.dropzone })}>\n                        <input {...getInputProps()} />\n                        <Typography variant=\"body1\">Drag 'n' drop some files here</Typography>\n                        <Typography variant=\"body1\">or just click to select files</Typography>\n                    </Card>\n                </Spinner>\n                <div>\n                    {errors &&\n                        errors.map((errFile: ErrorFile, idx: number) => {\n                            const size = prettyBytes(errFile.size);\n                            return (\n                                <div key={idx}>\n                                    <Typography variant=\"body1\">\n                                        <strong>{errFile.name}</strong> ({size} bytes): {errFile.error}\n                                    </Typography>\n                                </div>\n                            );\n                        })}\n                </div>\n                <div>\n                    {processing && (\n                        <Typography color=\"secondary\" variant=\"h5\">\n                            Processing {acceptedFiles.length - encodedFiles.length} file(s)\n                        </Typography>\n                    )}\n                </div>\n\n                {encodedFiles.map((file: EncodedFile, idx: number) => (\n                    <div key={idx}>\n                        <Card>\n                            {file.encoded.startsWith('data:image/') && (\n                                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                                    <Resizable style={imageResizer} defaultSize={{ width: 300, height: '100%' }}>\n                                        <img src={file.encoded} alt={file.name} className={classes.image} />\n                                    </Resizable>\n                                </Box>\n                            )}\n                            <CardContent>\n                                <Typography gutterBottom align=\"center\" variant=\"h5\" component=\"h2\">\n                                    <b>{file.name}</b> ({prettyBytes(file.size)})\n                                </Typography>\n                                {file.encoded.startsWith('data:image/') && (\n                                    <TextField\n                                        label=\"Full img tag\"\n                                        fullWidth\n                                        value={`<img alt=\"${file.name}\" src=\"${file.encoded}\"/>`}\n                                        margin=\"normal\"\n                                        variant=\"outlined\"\n                                    />\n                                )}\n                                <TextField\n                                    label=\"Base64 encoded. Copy-paste into 'src' attribute\"\n                                    fullWidth\n                                    value={file.encoded}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    multiline\n                                    minRows=\"8\"\n                                />\n                                <Toolbar className={classes.toolbar}>\n                                    <Box display=\"flex\" flexGrow={1}></Box>\n                                    <CopyButton data={file.encoded} />\n                                </Toolbar>\n                            </CardContent>\n                        </Card>\n                    </div>\n                ))}\n            </div>\n        </>\n    );\n};\n\nexport default Base64FileEncoder;\n","import { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        wordBreak: 'break-word',\n    },\n    titleWithIcon: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    titleContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    icon: {\n        height: '40px',\n        width: '40px',\n        marginRight: theme.spacing(1),\n    },\n}));\n\ninterface Props {\n    title: string;\n    iconType: any;\n}\n\nconst FeatureTitle: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const FeatureIcon = props.iconType;\n\n    return (\n        <div className={classes.titleContainer}>\n            <div className={classes.titleWithIcon}>\n                <FeatureIcon className={classes.icon} />\n                <Typography variant=\"h5\" className={classes.title}>\n                    {props.title}\n                </Typography>\n            </div>\n        </div>\n    );\n};\n\nexport default FeatureTitle;\n","import { Button, SvgIconTypeMap } from '@material-ui/core';\nimport { OverridableComponent } from '@material-ui/core/OverridableComponent';\nimport AssignmentTurnedIn from '@material-ui/icons/AssignmentTurnedIn';\nimport * as copy from 'copy-to-clipboard';\nimport React from 'react';\nimport { useToasterUpdate } from '../Toaster/ToasterProvider';\n\ninterface Props {\n    data?: string;\n    hoverMessage?: string;\n    feedbackMessage?: string;\n    Icon?: OverridableComponent<SvgIconTypeMap<unknown, 'svg'>>;\n}\n\nconst CopyButton: React.FC<Props> = ({ data, hoverMessage, feedbackMessage, Icon = AssignmentTurnedIn }: Props) => {\n    const { setToasterState } = useToasterUpdate();\n\n    const handleCopy = () => {\n        if (!data) {\n            return;\n        }\n\n        const message = feedbackMessage ?? `Content copied into clipboard: ${data.substring(0, 25)} …`;\n\n        copy.default(data, { format: 'text/plain' });\n        setToasterState({ open: true, message, type: 'success', autoHideDuration: 2000 });\n    };\n\n    return (\n        <Button\n            onClick={handleCopy}\n            disabled={!data}\n            title={hoverMessage ?? 'Copy to clipboard'}\n            variant=\"contained\"\n            color=\"primary\">\n            <Icon />\n        </Button>\n    );\n};\n\nexport default CopyButton;\n","import React from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport LoadingOverlay from 'react-loading-overlay';\nimport ScaleLoader from 'react-spinners/ScaleLoader';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        '& .spinner_overlay': {\n            background: 'rgba(0, 0, 0, 0.3)',\n        },\n    },\n}));\n\ninterface Props {\n    active: boolean;\n    children: any;\n}\n\nexport const Spinner: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n\n    return (\n        <LoadingOverlay\n            classNamePrefix=\"spinner_\"\n            className={classes.root}\n            active={props.active}\n            spinner={<ScaleLoader color=\"#bf3a2b\" />}>\n            {props.children}\n        </LoadingOverlay>\n    );\n};\n"],"sourceRoot":""}