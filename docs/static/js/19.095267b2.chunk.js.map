{"version":3,"sources":["../../lib/atob.js","../../lib/base64_url_decode.js","../../lib/index.js","containers/JWTDecoder/services.ts","containers/JWTDecoder/index.tsx","hooks/useSyntaxHighlightTheme.ts"],"names":["InvalidCharacterError","message","this","prototype","Error","name","window","atob","bind","input","str","String","replace","length","bs","buffer","bc","idx","output","charAt","fromCharCode","indexOf","decodeURIComponent","m","p","code","charCodeAt","toString","toUpperCase","err","InvalidTokenError","token","options","pos","header","JSON","parse","base64_url_decode","split","e","decode","value","obj","jwt_decode","stringify","useStyles","makeStyles","theme","root","margin","spacing","decoded","padding","borderColor","palette","text","disabled","borderStyle","borderWidth","borderRadius","shape","width","overflow","toolbar","marginLeft","mapStateToProps","state","inputText","textInputs","mapDispatchToProps","dispatch","storeInputText","setTextAction","connect","withWidth","props","title","classes","syntaxTheme","useSyntaxHighlightTheme","React","useState","services","setHeader","transformed","setTransformed","Helmet","className","FeatureTitle","iconType","LockOpenIcon","noValidate","autoComplete","TextField","autoFocus","isWidthUp","id","label","placeholder","multiline","minRows","maxRows","variant","fullWidth","onChange","target","Toolbar","Box","display","flexGrow","CopyButton","data","Button","color","endIcon","onClick","language","style","usePreferenceTheme","isDark","dark","docco"],"mappings":"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","file":"static/js/19.095267b2.chunk.js","sourcesContent":["/**\n * The code was extracted from:\n * https://github.com/davidchambers/Base64.js\n */\n\nvar chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\nfunction InvalidCharacterError(message) {\n    this.message = message;\n}\n\nInvalidCharacterError.prototype = new Error();\nInvalidCharacterError.prototype.name = \"InvalidCharacterError\";\n\nfunction polyfill(input) {\n    var str = String(input).replace(/=+$/, \"\");\n    if (str.length % 4 == 1) {\n        throw new InvalidCharacterError(\n            \"'atob' failed: The string to be decoded is not correctly encoded.\"\n        );\n    }\n    for (\n        // initialize result and counters\n        var bc = 0, bs, buffer, idx = 0, output = \"\";\n        // get next character\n        (buffer = str.charAt(idx++));\n        // character found in table? initialize bit storage and add its ascii value;\n        ~buffer &&\n        ((bs = bc % 4 ? bs * 64 + buffer : buffer),\n            // and if not first of each 4 characters,\n            // convert the first 8 bits to one ascii character\n            bc++ % 4) ?\n        (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6)))) :\n        0\n    ) {\n        // try to find character in table (0-63, not found => -1)\n        buffer = chars.indexOf(buffer);\n    }\n    return output;\n}\n\nexport default (typeof window !== \"undefined\" &&\n    window.atob &&\n    window.atob.bind(window)) ||\npolyfill;","import atob from \"./atob\";\n\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(\n        atob(str).replace(/(.)/g, function(m, p) {\n            var code = p.charCodeAt(0).toString(16).toUpperCase();\n            if (code.length < 2) {\n                code = \"0\" + code;\n            }\n            return \"%\" + code;\n        })\n    );\n}\n\nexport default function(str) {\n    var output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n        case 0:\n            break;\n        case 2:\n            output += \"==\";\n            break;\n        case 3:\n            output += \"=\";\n            break;\n        default:\n            throw \"Illegal base64url string!\";\n    }\n\n    try {\n        return b64DecodeUnicode(output);\n    } catch (err) {\n        return atob(output);\n    }\n}","\"use strict\";\n\nimport base64_url_decode from \"./base64_url_decode\";\n\nexport function InvalidTokenError(message) {\n    this.message = message;\n}\n\nInvalidTokenError.prototype = new Error();\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\n\nexport default function(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified\");\n    }\n\n    options = options || {};\n    var pos = options.header === true ? 0 : 1;\n    try {\n        return JSON.parse(base64_url_decode(token.split(\".\")[pos]));\n    } catch (e) {\n        throw new InvalidTokenError(\"Invalid token specified: \" + e.message);\n    }\n}","import jwt_decode from 'jwt-decode';\n\nexport function decode(value: string | undefined, header: boolean): string {\n    if (!value) {\n        return '';\n    }\n\n    try {\n        const obj = jwt_decode(value, { header });\n        return JSON.stringify(obj, null, 4);\n    } catch (e) {\n        return JSON.stringify(e);\n    }\n}\n","import { Box, Toolbar } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\nimport TextField from '@material-ui/core/TextField';\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { Dispatch } from 'redux';\nimport { setTextAction } from '../../actions/text-actions';\nimport CopyButton from '../../components/CopyButton';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport { useSyntaxHighlightTheme } from '../../hooks/useSyntaxHighlightTheme';\nimport { AppState } from '../../reducers';\nimport * as services from './services';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    decoded: {\n        padding: theme.spacing(1),\n        borderColor: theme.palette.text.disabled,\n        borderStyle: 'solid',\n        borderWidth: 1,\n        borderRadius: theme.shape.borderRadius,\n        width: '100%',\n        overflow: 'auto',\n    },\n    toolbar: {\n        margin: 0,\n        padding: 0,\n        '& > *': {\n            marginLeft: theme.spacing(1),\n        },\n    },\n}));\n\ninterface Props {\n    width: Breakpoint;\n    inputText?: string;\n    storeInputText: (name: string, value: string) => void;\n}\n\nconst JWTDecoder: React.FC<Props> = (props: Props) => {\n    const title = 'JWT decoderâ€¦';\n    const classes = useStyles();\n    const syntaxTheme = useSyntaxHighlightTheme();\n    const { inputText, storeInputText } = props;\n    const [header, setHeader] = React.useState(services.decode(inputText, true));\n    const [transformed, setTransformed] = React.useState(services.decode(inputText, false));\n\n    function handleDecode() {\n        setHeader(services.decode(inputText, true));\n        setTransformed(services.decode(inputText, false));\n    }\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={LockOpenIcon} title={title} />\n\n                <form noValidate autoComplete='off'>\n                    <TextField\n                        autoFocus={isWidthUp('md', props.width)}\n                        id='jwt'\n                        label='JSON web token to decode'\n                        placeholder='Paste or type the content here'\n                        multiline\n                        minRows={10}\n                        maxRows={isWidthUp('md', props.width) ? 20 : 10}\n                        variant='outlined'\n                        margin='normal'\n                        fullWidth={true}\n                        value={inputText}\n                        onChange={(e) => storeInputText('lastJWT', e.target.value)}\n                    />\n                </form>\n\n                <Toolbar className={classes.toolbar}>\n                    <Box display='flex' flexGrow={1}></Box>\n                    <CopyButton data={transformed} />\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        endIcon={<LockOpenIcon>Decode</LockOpenIcon>}\n                        disabled={!inputText}\n                        onClick={handleDecode}\n                    >\n                        Decode\n                    </Button>\n                </Toolbar>\n\n                <div className={classes.decoded}>\n                    <div>\n                        <SyntaxHighlighter language='json' style={syntaxTheme}>\n                            {header}\n                        </SyntaxHighlighter>\n\n                        <SyntaxHighlighter language='json' style={syntaxTheme}>\n                            {transformed}\n                        </SyntaxHighlighter>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        inputText: state.textInputs['lastJWT'],\n    };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withWidth()(JWTDecoder));\n","import { usePreferenceTheme } from \"../components/Preferences/PreferencesProvider\";\nimport { docco, dark } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n\nexport const useSyntaxHighlightTheme = () => {\n  const { isDark } = usePreferenceTheme();\n\n  return isDark ? dark : docco;\n};\n"],"sourceRoot":""}