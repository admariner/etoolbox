{"version":3,"sources":["containers/URLParser/styles.ts","containers/URLParser/index.tsx","containers/URLParser/services.ts","components/FeatureTitle/index.tsx","../node_modules/@material-ui/core/esm/TextField/TextField.js","../node_modules/@material-ui/core/esm/FormHelperText/FormHelperText.js","../node_modules/@material-ui/core/esm/TableHead/TableHead.js"],"names":["StyledTableCell","withStyles","theme","body","fontSize","spacing","whiteSpace","wordBreak","TableCell","StyledTableRow","root","backgroundColor","palette","action","hover","TableRow","useStyles","makeStyles","margin","panel","marginBottom","tableHeader","primary","main","mapStateToProps","state","inputText","textInputs","mapDispatchToProps","dispatch","storeInputText","name","value","setTextAction","connect","withWidth","props","title","classes","React","useState","Map","urlFragments","setUrlFragments","urlParams","setUrlParams","useEffect","fragments","url","URL","set","host","protocol","hash","origin","pathname","port","search","e","services","params","searchParams","forEach","key","Helmet","className","FeatureTitle","iconType","LinkIcon","TextField","autoFocus","isWidthUp","width","label","placeholder","multiline","minRows","maxRows","variant","fullWidth","onChange","target","TableContainer","component","Paper","Table","size","TableHead","TableBody","keys","sort","map","scope","get","titleWithIcon","display","alignItems","titleContainer","justifyContent","icon","height","marginRight","FeatureIcon","variantComponent","standard","Input","filled","FilledInput","outlined","OutlinedInput","ref","autoComplete","_props$autoFocus","children","_props$color","color","defaultValue","_props$disabled","disabled","_props$error","error","FormHelperTextProps","_props$fullWidth","helperText","hiddenLabel","id","InputLabelProps","inputProps","InputProps","inputRef","_props$multiline","onBlur","onFocus","_props$required","required","rows","rowsMax","_props$select","select","SelectProps","type","_props$variant","other","_objectWithoutProperties","InputMore","shrink","notched","_InputLabelProps$requ","displayRequired","native","undefined","helperTextId","concat","inputLabelId","InputComponent","InputElement","_extends","FormControl","clsx","InputLabel","htmlFor","Select","labelId","input","FormHelperText","_props$component","Component","focused","muiFormControl","useFormControl","fcs","formControlState","states","contained","marginDense","dangerouslySetInnerHTML","__html","text","secondary","typography","caption","textAlign","marginTop","marginLeft","tablelvl2","defaultComponent","Tablelvl2Context","Provider","role"],"mappings":"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","file":"static/js/28.775a1a41.chunk.js","sourcesContent":["import { makeStyles, TableCell, TableRow, withStyles } from '@material-ui/core';\n\nexport const StyledTableCell = withStyles(theme => ({\n    body: {\n        fontSize: theme.spacing(1.75),\n        whiteSpace: 'normal',\n        wordBreak: 'break-word',\n    },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles(theme => ({\n    root: {\n        '&:nth-of-type(even)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\nexport const useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    panel: {\n        marginBottom: theme.spacing(3),\n    },\n    tableHeader: {\n        backgroundColor: theme.palette.primary.main,\n    },\n}));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport LinkIcon from '@material-ui/icons/Link';\n\nimport { setTextAction } from '../../actions/text-actions';\nimport { AppState } from '../../reducers';\nimport * as services from './services';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport { StyledTableCell, StyledTableRow, useStyles } from './styles';\nimport { Helmet } from 'react-helmet';\n\ninterface Props {\n    inputText?: string;\n    storeInputText: (name: string, value: string) => void;\n    width: Breakpoint;\n}\n\nconst URLParser: React.FC<Props> = (props: Props) => {\n    const title = 'URL Parser';\n    const classes = useStyles();\n    const { inputText, storeInputText } = props;\n    const [urlFragments, setUrlFragments] = React.useState(new Map());\n    const [urlParams, setUrlParams] = React.useState(new Map());\n\n    React.useEffect(() => {\n        setUrlFragments(services.parseUrl(inputText));\n        setUrlParams(services.parseUrlParams(inputText));\n    }, [inputText]);\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={LinkIcon} title={title} />\n\n                <TextField\n                    autoFocus={isWidthUp('md', props.width)}\n                    label=\"URL\"\n                    placeholder=\"Paste or type the url here\"\n                    multiline\n                    minRows={4}\n                    maxRows={isWidthUp('md', props.width) ? 20 : 4}\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    fullWidth={true}\n                    value={inputText}\n                    className={classes.panel}\n                    onChange={e => storeInputText('lastUrlParserValue', e.target.value)}\n                />\n\n                <TableContainer component={Paper} className={classes.panel}>\n                    <Table size={isWidthUp('md', props.width) ? 'medium' : 'small'}>\n                        <TableHead className={classes.tableHeader}>\n                            <TableRow>\n                                <StyledTableCell>Fragment</StyledTableCell>\n                                <StyledTableCell>Value</StyledTableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {[...urlFragments.keys()].sort().map(key => (\n                                <StyledTableRow key={key}>\n                                    <StyledTableCell component=\"th\" scope=\"row\">\n                                        {key}\n                                    </StyledTableCell>\n                                    <StyledTableCell>{urlFragments.get(key)}</StyledTableCell>\n                                </StyledTableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n\n                <TableContainer component={Paper}>\n                    <Table size={isWidthUp('md', props.width) ? 'medium' : 'small'}>\n                        <TableHead className={classes.tableHeader}>\n                            <TableRow>\n                                <StyledTableCell>Parameter</StyledTableCell>\n                                <StyledTableCell>Value</StyledTableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {[...urlParams.keys()].sort().map(key => (\n                                <StyledTableRow key={key}>\n                                    <StyledTableCell component=\"th\" scope=\"row\">\n                                        {key}\n                                    </StyledTableCell>\n                                    <StyledTableCell>{urlParams.get(key)}</StyledTableCell>\n                                </StyledTableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n        </>\n    );\n};\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        inputText: state.textInputs['lastUrlParserValue'],\n    };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withWidth()(URLParser));\n","export function parseUrl(value?: string): Map<string, string> {\n    const fragments: Map<string, string> = new Map();\n\n    if (!value) {\n        return fragments;\n    }\n\n    try {\n        const url = new URL(value);\n\n        fragments.set('host', url.host);\n        fragments.set('protocol', url.protocol);\n        fragments.set('hash', url.hash);\n        fragments.set('origin', url.origin);\n        fragments.set('pathname', url.pathname);\n        fragments.set('port', url.port ? url.port : '<default>');\n        fragments.set('search', url.search);\n    } catch (e) {\n        //  do nothing user may still be typing...\n    }\n\n    return fragments;\n}\n\nexport function parseUrlParams(value?: string): Map<string, string> {\n    const params: Map<string, string> = new Map();\n\n    if (!value) {\n        return params;\n    }\n\n    try {\n        const url = new URL(value);\n        const searchParams: URLSearchParams = url.searchParams;\n        searchParams.forEach((value, key) => params.set(key, value));\n    } catch (e) {\n        //  do nothing user may still be typing...\n    }\n\n    return params;\n}\n","import { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        wordBreak: 'break-word',\n    },\n    titleWithIcon: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    titleContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    icon: {\n        height: '40px',\n        width: '40px',\n        marginRight: theme.spacing(1),\n    },\n}));\n\ninterface Props {\n    title: string;\n    iconType: any;\n}\n\nconst FeatureTitle: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const FeatureIcon = props.iconType;\n\n    return (\n        <div className={classes.titleContainer}>\n            <div className={classes.titleWithIcon}>\n                <FeatureIcon className={classes.icon} />\n                <Typography variant=\"h5\" className={classes.title}>\n                    {props.title}\n                </Typography>\n            </div>\n        </div>\n    );\n};\n\nexport default FeatureTitle;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport deprecatedPropType from '../utils/deprecatedPropType';\nimport Input from '../Input';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nimport InputLabel from '../InputLabel';\nimport FormControl from '../FormControl';\nimport FormHelperText from '../FormHelperText';\nimport Select from '../Select';\nimport withStyles from '../styles/withStyles';\nvar variantComponent = {\n  standard: Input,\n  filled: FilledInput,\n  outlined: OutlinedInput\n};\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {}\n};\n/**\n * The `TextField` is a convenience wrapper for the most common cases (80%).\n * It cannot be all things to all people, otherwise the API would grow out of control.\n *\n * ## Advanced Configuration\n *\n * It's important to understand that the text field is a simple abstraction\n * on top of the following components:\n *\n * - [FormControl](/api/form-control/)\n * - [InputLabel](/api/input-label/)\n * - [FilledInput](/api/filled-input/)\n * - [OutlinedInput](/api/outlined-input/)\n * - [Input](/api/input/)\n * - [FormHelperText](/api/form-helper-text/)\n *\n * If you wish to alter the props applied to the `input` element, you can do so as follows:\n *\n * ```jsx\n * const inputProps = {\n *   step: 300,\n * };\n *\n * return <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n * ```\n *\n * For advanced cases, please look at the source of TextField by clicking on the\n * \"Edit this page\" button above. Consider either:\n *\n * - using the upper case props for passing values directly to the components\n * - using the underlying components directly as shown in the demos\n */\n\nvar TextField = /*#__PURE__*/React.forwardRef(function TextField(props, ref) {\n  var autoComplete = props.autoComplete,\n      _props$autoFocus = props.autoFocus,\n      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,\n      children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      defaultValue = props.defaultValue,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$error = props.error,\n      error = _props$error === void 0 ? false : _props$error,\n      FormHelperTextProps = props.FormHelperTextProps,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      helperText = props.helperText,\n      hiddenLabel = props.hiddenLabel,\n      id = props.id,\n      InputLabelProps = props.InputLabelProps,\n      inputProps = props.inputProps,\n      InputProps = props.InputProps,\n      inputRef = props.inputRef,\n      label = props.label,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      name = props.name,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      placeholder = props.placeholder,\n      _props$required = props.required,\n      required = _props$required === void 0 ? false : _props$required,\n      rows = props.rows,\n      rowsMax = props.rowsMax,\n      maxRows = props.maxRows,\n      minRows = props.minRows,\n      _props$select = props.select,\n      select = _props$select === void 0 ? false : _props$select,\n      SelectProps = props.SelectProps,\n      type = props.type,\n      value = props.value,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"autoComplete\", \"autoFocus\", \"children\", \"classes\", \"className\", \"color\", \"defaultValue\", \"disabled\", \"error\", \"FormHelperTextProps\", \"fullWidth\", \"helperText\", \"hiddenLabel\", \"id\", \"InputLabelProps\", \"inputProps\", \"InputProps\", \"inputRef\", \"label\", \"multiline\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"placeholder\", \"required\", \"rows\", \"rowsMax\", \"maxRows\", \"minRows\", \"select\", \"SelectProps\", \"type\", \"value\", \"variant\"]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (select && !children) {\n      console.error('Material-UI: `children` must be passed when using the `TextField` component with `select`.');\n    }\n  }\n\n  var InputMore = {};\n\n  if (variant === 'outlined') {\n    if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {\n      InputMore.notched = InputLabelProps.shrink;\n    }\n\n    if (label) {\n      var _InputLabelProps$requ;\n\n      var displayRequired = (_InputLabelProps$requ = InputLabelProps === null || InputLabelProps === void 0 ? void 0 : InputLabelProps.required) !== null && _InputLabelProps$requ !== void 0 ? _InputLabelProps$requ : required;\n      InputMore.label = /*#__PURE__*/React.createElement(React.Fragment, null, label, displayRequired && \"\\xA0*\");\n    }\n  }\n\n  if (select) {\n    // unset defaults from textbox inputs\n    if (!SelectProps || !SelectProps.native) {\n      InputMore.id = undefined;\n    }\n\n    InputMore['aria-describedby'] = undefined;\n  }\n\n  var helperTextId = helperText && id ? \"\".concat(id, \"-helper-text\") : undefined;\n  var inputLabelId = label && id ? \"\".concat(id, \"-label\") : undefined;\n  var InputComponent = variantComponent[variant];\n  var InputElement = /*#__PURE__*/React.createElement(InputComponent, _extends({\n    \"aria-describedby\": helperTextId,\n    autoComplete: autoComplete,\n    autoFocus: autoFocus,\n    defaultValue: defaultValue,\n    fullWidth: fullWidth,\n    multiline: multiline,\n    name: name,\n    rows: rows,\n    rowsMax: rowsMax,\n    maxRows: maxRows,\n    minRows: minRows,\n    type: type,\n    value: value,\n    id: id,\n    inputRef: inputRef,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    placeholder: placeholder,\n    inputProps: inputProps\n  }, InputMore, InputProps));\n  return /*#__PURE__*/React.createElement(FormControl, _extends({\n    className: clsx(classes.root, className),\n    disabled: disabled,\n    error: error,\n    fullWidth: fullWidth,\n    hiddenLabel: hiddenLabel,\n    ref: ref,\n    required: required,\n    color: color,\n    variant: variant\n  }, other), label && /*#__PURE__*/React.createElement(InputLabel, _extends({\n    htmlFor: id,\n    id: inputLabelId\n  }, InputLabelProps), label), select ? /*#__PURE__*/React.createElement(Select, _extends({\n    \"aria-describedby\": helperTextId,\n    id: id,\n    labelId: inputLabelId,\n    value: value,\n    input: InputElement\n  }, SelectProps), children) : InputElement, helperText && /*#__PURE__*/React.createElement(FormHelperText, _extends({\n    id: helperTextId\n  }, FormHelperTextProps), helperText));\n});\nprocess.env.NODE_ENV !== \"production\" ? TextField.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The default value of the `input` element.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the `input` element will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label will be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * Props applied to the [`FormHelperText`](/api/form-helper-text/) element.\n   */\n  FormHelperTextProps: PropTypes.object,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The helper text content.\n   */\n  helperText: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  hiddenLabel: PropTypes.bool,\n\n  /**\n   * The id of the `input` element.\n   * Use this prop to make `label` and `helperText` accessible for screen readers.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Props applied to the [`InputLabel`](/api/input-label/) element.\n   */\n  InputLabelProps: PropTypes.object,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](/api/filled-input/),\n   * [`OutlinedInput`](/api/outlined-input/) or [`Input`](/api/input/)\n   * component depending on the `variant` prop value.\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   */\n  margin: PropTypes.oneOf(['dense', 'none', 'normal']),\n\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Minimum number of rows to display.\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * If `true`, a textarea element will be rendered instead of an input.\n   */\n  multiline: PropTypes.bool,\n\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * If `true`, the label is displayed as required and the `input` element` will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Number of rows to display when multiline option is set to true.\n   * @deprecated Use `minRows` instead.\n   */\n  rows: deprecatedPropType(PropTypes.oneOfType([PropTypes.number, PropTypes.string]), 'Use `minRows` instead'),\n\n  /**\n   * Maximum number of rows to display.\n   * @deprecated Use `maxRows` instead.\n   */\n  rowsMax: deprecatedPropType(PropTypes.oneOfType([PropTypes.number, PropTypes.string]), 'Use `maxRows` instead'),\n\n  /**\n   * Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.\n   * If this option is set you must pass the options of the select as children.\n   */\n  select: PropTypes.bool,\n\n  /**\n   * Props applied to the [`Select`](/api/select/) element.\n   */\n  SelectProps: PropTypes.object,\n\n  /**\n   * The size of the text field.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTextField'\n})(TextField);","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({\n      color: theme.palette.text.secondary\n    }, theme.typography.caption, {\n      textAlign: 'left',\n      marginTop: 3,\n      margin: 0,\n      '&$disabled': {\n        color: theme.palette.text.disabled\n      },\n      '&$error': {\n        color: theme.palette.error.main\n      }\n    }),\n\n    /* Pseudo-class applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `margin=\"dense\"`. */\n    marginDense: {\n      marginTop: 4\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"` or `variant=\"outlined\"`. */\n    contained: {\n      marginLeft: 14,\n      marginRight: 14\n    },\n\n    /* Pseudo-class applied to the root element if `focused={true}`. */\n    focused: {},\n\n    /* Pseudo-class applied to the root element if `filled={true}`. */\n    filled: {},\n\n    /* Pseudo-class applied to the root element if `required={true}`. */\n    required: {}\n  };\n};\nvar FormHelperText = /*#__PURE__*/React.forwardRef(function FormHelperText(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'p' : _props$component,\n      disabled = props.disabled,\n      error = props.error,\n      filled = props.filled,\n      focused = props.focused,\n      margin = props.margin,\n      required = props.required,\n      variant = props.variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"disabled\", \"error\", \"filled\", \"focused\", \"margin\", \"required\", \"variant\"]);\n\n  var muiFormControl = useFormControl();\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['variant', 'margin', 'disabled', 'error', 'filled', 'focused', 'required']\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, (fcs.variant === 'filled' || fcs.variant === 'outlined') && classes.contained, className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required, fcs.margin === 'dense' && classes.marginDense),\n    ref: ref\n  }, other), children === ' ' ?\n  /*#__PURE__*/\n  // eslint-disable-next-line react/no-danger\n  React.createElement(\"span\", {\n    dangerouslySetInnerHTML: {\n      __html: '&#8203;'\n    }\n  }) : children);\n});\nprocess.env.NODE_ENV !== \"production\" ? FormHelperText.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   *\n   * If `' '` is provided, the component reserves one line height for displaying a future message.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, the helper text should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, helper text should be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the helper text should use filled classes key.\n   */\n  filled: PropTypes.bool,\n\n  /**\n   * If `true`, the helper text should use focused classes key.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense']),\n\n  /**\n   * If `true`, the helper text should use required classes key.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormHelperText'\n})(FormHelperText);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'table-header-group'\n  }\n};\nvar tablelvl2 = {\n  variant: 'head'\n};\nvar defaultComponent = 'thead';\nvar TableHead = /*#__PURE__*/React.forwardRef(function TableHead(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? defaultComponent : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Tablelvl2Context.Provider, {\n    value: tablelvl2\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref,\n    role: Component === defaultComponent ? null : 'rowgroup'\n  }, other)));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableHead.propTypes = {\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableHead'\n})(TableHead);"],"sourceRoot":""}