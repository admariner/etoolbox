{"version":3,"sources":["containers/Base64Encoder/services.ts","containers/Base64Encoder/index.tsx"],"names":["transform","value","encoded","btoa","atob","e","JSON","stringify","useStyles","makeStyles","theme","root","margin","spacing","toolbar","padding","mapStateToProps","state","inputText","textInputs","mapDispatchToProps","dispatch","storeInputText","name","setTextAction","connect","props","title","classes","isMdUp","useIsWidthUp","React","useState","transformed","setTransformed","Helmet","className","FeatureTitle","iconType","DeveloperBoardIcon","TextField","autoFocus","label","placeholder","multiline","minRows","maxRows","variant","fullWidth","onChange","target","Toolbar","Button","color","disabled","onClick","Box","display","flexGrow","CopyButton","data","sx","mr","services","ResultMonospace","result"],"mappings":"6aAAO,SAASA,EAAUC,EAA2BC,GACnD,IAAKD,EACH,MAAO,GAGT,IACE,OAAIC,EACKC,KAAKF,GAELG,KAAKH,EAIhB,CAFE,MAAOI,GACP,OAAOC,KAAKC,UAAUF,EACxB,CACF,CCQA,IAAMG,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,OAAQF,EAAMG,QAAQ,IAExBC,QAAS,CACPF,OAAQ,EACRG,QAAS,GAEZ,IAsEM,SAASC,EAAgBC,GAC9B,MAAO,CACLC,UAAWD,EAAME,WAAmC,uBAExD,CAEO,SAASC,EAAmBC,GACjC,MAAO,CACLC,eAAgB,SAACC,EAActB,GAAa,OAAKoB,EAASG,YAAcD,EAAMtB,GAAO,EAEzF,CAEewB,sBAAQT,EAAiBI,EAAzBK,EA3EwB,SAACC,GACtC,IAAMC,EAAQ,2BACRC,EAAUpB,IACVqB,EAASC,YAAa,MACpBZ,EAA8BQ,EAA9BR,UAAWI,EAAmBI,EAAnBJ,eACnB,EAAsCS,IAAMC,SAAS,IAAG,mBAAjDC,EAAW,KAAEC,EAAc,KAOlC,OACE,oCACE,kBAACC,EAAA,EAAM,CAACR,MAAOA,IACf,yBAAKS,UAAWR,EAAQjB,MACtB,kBAAC0B,EAAA,EAAY,CAACC,SAAUC,IAAoBZ,MAAOA,IAEnD,kBAACa,EAAA,EAAS,CACRC,UAAWZ,EACXa,MAAM,kCACNC,YAAY,iCACZC,WAAS,EACTC,QAAS,EACTC,QAASjB,EAAS,GAAK,EACvBkB,QAAQ,WACRnC,OAAO,SACPoC,WAAW,EACX/C,MAAOiB,EACP+B,SAAU,SAAA5C,GAAC,OAAIiB,EAAe,yBAA0BjB,EAAE6C,OAAOjD,MAAM,IAGzE,kBAACkD,EAAA,EAAO,CAACf,UAAWR,EAAQd,SAC1B,kBAACsC,EAAA,EAAM,CAACL,QAAQ,YAAYM,MAAM,UAAUC,UAAWrB,EAAasB,QA1B/D,WACXjC,EAAe,yBAA0BW,GACzCC,EAAe,GACjB,EAuB2FP,MAAM,sBACvF,kBAAC,IAAgB,OAEnB,kBAAC6B,EAAA,EAAG,CAACC,QAAQ,OAAOC,SAAU,IAC9B,kBAACC,EAAA,EAAU,CAACC,KAAM3B,EAAa4B,GAAI,CAAEC,GAAI,KACzC,kBAACV,EAAA,EAAM,CACLS,GAAI,CAAEC,GAAI,GACVf,QAAQ,YACRpB,MAAM,qBACN0B,MAAM,UACNC,UAAWpC,EACXqC,QAAS,kBAAMrB,EAAe6B,EAAmB7C,GAAW,GAAM,GAClE,kBAAC,IAAU,OAEb,kBAACkC,EAAA,EAAM,CACLL,QAAQ,YACRpB,MAAM,qBACN0B,MAAM,UACNC,UAAWpC,EACXqC,QAAS,kBAAMrB,EAAe6B,EAAmB7C,GAAW,GAAO,GACnE,kBAAC,IAAU,QAIf,kBAAC8C,EAAA,EAAe,CAACtB,MAAM,SAASuB,OAAQhC,KAIhD,G","file":"static/js/42.1dfc01d3.chunk.js","sourcesContent":["export function transform(value: string | undefined, encoded: boolean): string {\n  if (!value) {\n    return '';\n  }\n\n  try {\n    if (encoded) {\n      return btoa(value);\n    } else {\n      return atob(value);\n    }\n  } catch (e) {\n    return JSON.stringify(e);\n  }\n}\n","import React from 'react';\n\nimport EncodeIcon from '@mui/icons-material/Code';\nimport DecodeIcon from '@mui/icons-material/CodeOff';\nimport DeveloperBoardIcon from '@mui/icons-material/DeveloperBoard';\nimport ImportExportIcon from '@mui/icons-material/ImportExport';\nimport { Box, Toolbar } from '@mui/material';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport { makeStyles } from '@mui/styles';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport { setTextAction } from '../../actions/text-actions';\nimport CopyButton from '../../components/CopyButton';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport ResultMonospace from '../../components/ResultMonospace';\nimport { AppState } from '../../reducers';\nimport { useIsWidthUp } from '../../theme';\nimport * as services from './services';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing(1),\n  },\n  toolbar: {\n    margin: 0,\n    padding: 0,\n  },\n}));\n\ninterface Props {\n  inputText?: string;\n  storeInputText: (name: string, value: string) => void;\n}\n\nconst Base64Encoder: React.FC<Props> = (props: Props) => {\n  const title = 'Base64 Encoder / decoder';\n  const classes = useStyles();\n  const isMdUp = useIsWidthUp('md');\n  const { inputText, storeInputText } = props;\n  const [transformed, setTransformed] = React.useState('');\n\n  const flip = () => {\n    storeInputText('lastBase64EncoderValue', transformed);\n    setTransformed('');\n  };\n\n  return (\n    <>\n      <Helmet title={title} />\n      <div className={classes.root}>\n        <FeatureTitle iconType={DeveloperBoardIcon} title={title} />\n\n        <TextField\n          autoFocus={isMdUp}\n          label=\"Content to Base64 encode/decode\"\n          placeholder=\"Paste or type the content here\"\n          multiline\n          minRows={4}\n          maxRows={isMdUp ? 20 : 4}\n          variant=\"outlined\"\n          margin=\"normal\"\n          fullWidth={true}\n          value={inputText}\n          onChange={e => storeInputText('lastBase64EncoderValue', e.target.value)}\n        />\n\n        <Toolbar className={classes.toolbar}>\n          <Button variant=\"contained\" color=\"primary\" disabled={!transformed} onClick={flip} title=\"Switch the content\">\n            <ImportExportIcon />\n          </Button>\n          <Box display=\"flex\" flexGrow={1}></Box>\n          <CopyButton data={transformed} sx={{ mr: 1 }} />\n          <Button\n            sx={{ mr: 1 }}\n            variant=\"contained\"\n            title=\"Encode the content\"\n            color=\"primary\"\n            disabled={!inputText}\n            onClick={() => setTransformed(services.transform(inputText, true))}>\n            <EncodeIcon />\n          </Button>\n          <Button\n            variant=\"contained\"\n            title=\"Decode the content\"\n            color=\"primary\"\n            disabled={!inputText}\n            onClick={() => setTransformed(services.transform(inputText, false))}>\n            <DecodeIcon />\n          </Button>\n        </Toolbar>\n\n        <ResultMonospace label=\"Result\" result={transformed} />\n      </div>\n    </>\n  );\n};\n\nexport function mapStateToProps(state: AppState) {\n  return {\n    inputText: state.textInputs['lastBase64EncoderValue'],\n  };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Base64Encoder);\n"],"sourceRoot":""}