{"version":3,"sources":["containers/CommonLists/index.tsx","containers/CommonLists/styles.ts","containers/CommonLists/TabPanel.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","hooks/usePagination.ts","components/Filter/styles.ts","components/Filter/index.tsx","components/FilterStats/styles.ts","components/FilterStats/index.tsx"],"names":["TABS","StyledTableCell","withStyles","body","fontSize","whiteSpace","wordBreak","TableCell","StyledTableRow","theme","root","backgroundColor","palette","action","hover","TableRow","useStyles","makeStyles","margin","spacing","toolbar","padding","marginLeft","tabsPanel","flexGrow","width","marginTop","background","paper","tabsBar","marginBottom","tableHeader","primary","main","TabPanel","props","children","value","index","other","isTabSelected","role","hidden","id","mapStateToProps","state","mimeTypes","elements","filteringMimeTypes","filtering","htmlEntities","filteringHtmlEntities","mapDispatchToProps","dispatch","applyMimeTypesFilter","searchTerm","applyHtmlEntitiesFilter","connect","classes","isMdUp","useIsWidthUp","React","useState","MIME_TYPES","selectedTab","setSelectedTab","inputFilter","setInputFilter","searching","usePagination","page","setPage","rowsPerPage","handleChangeRowsPerPage","applyFilter","newInputFilter","Helmet","title","Paper","square","Tabs","onChange","_e","newTab","indicatorColor","textColor","variant","scrollButtons","Tab","label","className","Toolbar","Filter","initialFilter","onFilterChange","Box","display","FilterStats","count","size","length","TablePagination","rowsPerPageOptions","component","keys","onPageChange","_","onRowsPerPageChange","TableContainer","Table","TableHead","scope","TableBody","slice","map","key","get","join","searchWords","textToHighlight","HTML_ENTITIES","htmlEntity","entityNumber","character","entityName","description","_objectWithoutProperties","source","excluded","i","target","Object","getOwnPropertySymbols","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call","setRowsPerPage","evt","autofocus","fullWidth","filter","setFilter","debounced","useDebouncedCallback","useEffect","FormControl","InputLabel","htmlFor","Input","autoFocus","type","e","endAdornment","InputAdornment","position","IconButton","SPACE","working","setWorking","setTimeout","Typography","align"],"mappings":"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","file":"static/js/28.0b98f124.chunk.js","sourcesContent":["import React from 'react';\n\nimport {\n  Box,\n  Paper,\n  Tab,\n  Table,\n  TableBody,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Tabs,\n  Toolbar,\n} from '@mui/material';\nimport { Helmet } from 'react-helmet';\nimport Highlighter from 'react-highlight-words';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport { applyHtmlEntitiesFilter, HtmlEntity } from '../../actions/html-entitie-actions';\nimport { applyMimeTypesFilter } from '../../actions/mime-type-actions';\nimport Filter from '../../components/Filter';\nimport FilterStats from '../../components/FilterStats';\nimport { usePagination } from '../../hooks/usePagination';\nimport { AppState } from '../../reducers';\nimport { useIsWidthUp } from '../../theme';\nimport { StyledTableCell, StyledTableRow, useStyles } from './styles';\nimport { TabPanel } from './TabPanel';\n\nenum TABS {\n  MIME_TYPES = 0,\n  HTML_ENTITIES = 1,\n}\n\ninterface Props {\n  mimeTypes: Map<string, readonly string[]>;\n  filteringMimeTypes: boolean;\n  htmlEntities: HtmlEntity[];\n  filteringHtmlEntities: boolean;\n\n  applyMimeTypesFilter: (searchTerm: string) => void;\n  applyHtmlEntitiesFilter: (searchTerm: string) => void;\n}\n\nconst CommonLists: React.FC<Props> = (props: Props) => {\n  const title = 'Mime-types, HTML Entitiesâ€¦';\n  const classes = useStyles();\n  const isMdUp = useIsWidthUp('md');\n  const [selectedTab, setSelectedTab] = React.useState(TABS.MIME_TYPES);\n  const [inputFilter, setInputFilter] = React.useState('');\n  const {\n    filteringMimeTypes,\n    mimeTypes,\n    filteringHtmlEntities,\n    htmlEntities,\n    applyMimeTypesFilter,\n    applyHtmlEntitiesFilter,\n  } = props;\n  const searching = filteringMimeTypes || filteringHtmlEntities;\n  const { page, setPage, rowsPerPage, handleChangeRowsPerPage } = usePagination();\n\n  const onTabSelected = (_e: unknown, newTab: number) => {\n    setSelectedTab(newTab);\n    applyFilter('');\n    setPage(0);\n  };\n\n  function applyFilter(newInputFilter: string) {\n    setInputFilter(newInputFilter);\n    setPage(0);\n    if (selectedTab === TABS.MIME_TYPES) {\n      applyMimeTypesFilter(newInputFilter);\n    } else {\n      applyHtmlEntitiesFilter(newInputFilter);\n    }\n  }\n\n  function getElementsCount(): number {\n    if (selectedTab === TABS.MIME_TYPES) {\n      return mimeTypes.size;\n    } else {\n      return htmlEntities.length;\n    }\n  }\n\n  return (\n    <>\n      <Helmet title={title} />\n      <Paper square>\n        <Tabs\n          value={selectedTab}\n          onChange={onTabSelected}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"scrollable\"\n          scrollButtons={true}\n          aria-label=\"Common web lists\">\n          <Tab label=\"Mime-types\" id=\"mime-types\" aria-controls=\"tab-mime-types\" />\n          <Tab label=\"HTML Entities\" id=\"html-entities\" aria-controls=\"tab-html-entities\" />\n        </Tabs>\n      </Paper>\n\n      <div className={classes.root}>\n        <Toolbar className={classes.toolbar}>\n          <Filter initialFilter={inputFilter} onFilterChange={applyFilter} />\n          <Box display=\"flex\" flexGrow={1}></Box>\n          <FilterStats count={getElementsCount()} searching={searching} />\n        </Toolbar>\n\n        <TabPanel value={selectedTab} index={TABS.MIME_TYPES}>\n          <TablePagination\n            rowsPerPageOptions={[5, 10, 25, 50, 100]}\n            component=\"div\"\n            count={[...mimeTypes.keys()].length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onPageChange={(_, page) => setPage(page)}\n            onRowsPerPageChange={handleChangeRowsPerPage}\n          />\n          <TableContainer component={Paper}>\n            <Table size={isMdUp ? 'medium' : 'small'}>\n              <TableHead className={classes.tableHeader}>\n                <TableRow>\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    Mime Type\n                  </StyledTableCell>\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    File extension\n                  </StyledTableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {[...mimeTypes.keys()].slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(key => {\n                  const extensions: readonly string[] = mimeTypes.get(key) ?? [];\n                  const value = extensions.join(', ');\n                  return (\n                    <StyledTableRow key={key}>\n                      <StyledTableCell>\n                        <Highlighter searchWords={[inputFilter]} textToHighlight={key} />\n                      </StyledTableCell>\n                      <StyledTableCell>\n                        <Highlighter searchWords={[inputFilter]} textToHighlight={value} />\n                      </StyledTableCell>\n                    </StyledTableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </TabPanel>\n\n        <TabPanel value={selectedTab} index={TABS.HTML_ENTITIES}>\n          <TablePagination\n            rowsPerPageOptions={[5, 10, 25, 50, 100]}\n            component=\"div\"\n            count={htmlEntities.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onPageChange={(_, page) => setPage(page)}\n            onRowsPerPageChange={handleChangeRowsPerPage}\n          />\n          <TableContainer component={Paper}>\n            <Table size={isMdUp ? 'medium' : 'small'}>\n              <TableHead className={classes.tableHeader}>\n                <TableRow>\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    Entity\n                  </StyledTableCell>\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    Name\n                  </StyledTableCell>\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    Number\n                  </StyledTableCell>\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    Description\n                  </StyledTableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {htmlEntities.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(htmlEntity => (\n                  <StyledTableRow key={htmlEntity.entityNumber}>\n                    <StyledTableCell>\n                      <Highlighter searchWords={[inputFilter]} textToHighlight={htmlEntity.character} />\n                    </StyledTableCell>\n                    <StyledTableCell>\n                      <Highlighter searchWords={[inputFilter]} textToHighlight={htmlEntity.entityName} />\n                    </StyledTableCell>\n                    <StyledTableCell>\n                      <Highlighter searchWords={[inputFilter]} textToHighlight={htmlEntity.entityNumber} />\n                    </StyledTableCell>\n                    <StyledTableCell>\n                      <Highlighter searchWords={[inputFilter]} textToHighlight={htmlEntity.description} />\n                    </StyledTableCell>\n                  </StyledTableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </TabPanel>\n      </div>\n    </>\n  );\n};\n\nexport function mapStateToProps(state: AppState) {\n  return {\n    mimeTypes: state.mimeTypes.elements,\n    filteringMimeTypes: state.mimeTypes.filtering,\n\n    htmlEntities: state.htmlEntities.elements,\n    filteringHtmlEntities: state.htmlEntities.filtering,\n  };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    applyMimeTypesFilter: (searchTerm: string) => dispatch(applyMimeTypesFilter(searchTerm)),\n    applyHtmlEntitiesFilter: (searchTerm: string) => dispatch(applyHtmlEntitiesFilter(searchTerm)),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommonLists);\n","import { TableCell, TableRow } from '@mui/material';\nimport { makeStyles, withStyles } from '@mui/styles';\n\nexport const StyledTableCell = withStyles(() => ({\n  body: {\n    fontSize: 14,\n    whiteSpace: 'normal',\n    wordBreak: 'break-word',\n  },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles(theme => ({\n  root: {\n    '&:nth-of-type(even)': {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}))(TableRow);\n\nexport const useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing(1),\n  },\n  toolbar: {\n    margin: 0,\n    padding: 0,\n    '& > *': {\n      marginLeft: theme.spacing(1),\n    },\n  },\n  tabsPanel: {\n    flexGrow: 1,\n    width: '100%',\n    marginTop: theme.spacing(3),\n    backgroundColor: theme.palette.background.paper,\n  },\n  tabsBar: {\n    marginBottom: theme.spacing(2),\n  },\n  tableHeader: {\n    backgroundColor: theme.palette.primary.main,\n  },\n}));\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nexport function TabPanel(props: Record<string, unknown>) {\n  const { children, value, index, ...other } = props;\n  const isTabSelected = value === index;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={!isTabSelected}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}>\n      {isTabSelected && <>{children}</>}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.number.isRequired,\n  value: PropTypes.number.isRequired,\n};\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","import { useState } from 'react';\n\nexport const usePagination = () => {\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const handleChangeRowsPerPage = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(+evt.target.value);\n    setPage(0);\n  };\n\n  return {\n    page,\n    setPage,\n    rowsPerPage,\n    handleChangeRowsPerPage,\n  };\n};\n","import { makeStyles } from '@mui/styles';\n\nexport const useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing(1),\n  },\n}));\n","import React from 'react';\n\nimport SearchIcon from '@mui/icons-material/Search';\nimport { FormControl, IconButton, Input, InputAdornment, InputLabel } from '@mui/material';\nimport { useDebouncedCallback } from 'use-debounce';\n\nimport { useStyles } from './styles';\n\ninterface Props {\n  label?: string;\n  autofocus?: boolean;\n  fullWidth?: boolean;\n  initialFilter?: string;\n  onFilterChange: (newValue: string) => void;\n}\n\nconst Filter: React.FC<Props> = ({\n  label = 'Search',\n  autofocus = false,\n  fullWidth = false,\n  initialFilter = '',\n  onFilterChange,\n}) => {\n  const [filter, setFilter] = React.useState(initialFilter);\n  const classes = useStyles();\n\n  // https://www.npmjs.com/package/use-debounce\n  // Since onFilterChange may launch http requests, we trottle these calls with a delay\n  // Implementation note: we CAN'T just replace this mechanism with useDeferredValue because\n  // that would not prevent the \"too many http calls\" issue\n  const debounced = useDebouncedCallback((filter: string) => onFilterChange(filter), 300);\n\n  React.useEffect(() => debounced(filter), [filter, debounced]);\n\n  return (\n    <FormControl fullWidth={fullWidth} className={classes.root}>\n      <InputLabel htmlFor=\"searchField\">{label}</InputLabel>\n      <Input\n        id=\"searchField\"\n        autoFocus={autofocus}\n        type=\"text\"\n        value={filter}\n        onChange={e => setFilter(e.target.value)}\n        endAdornment={\n          <InputAdornment position=\"end\">\n            <IconButton>\n              <SearchIcon />\n            </IconButton>\n          </InputAdornment>\n        }\n      />\n    </FormControl>\n  );\n};\n\nexport default Filter;\n","import { makeStyles } from '@mui/styles';\n\nexport const useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing(1),\n  },\n}));\n","import React from 'react';\n\nimport { Typography } from '@mui/material';\n\nimport { SPACE } from '../../constants';\nimport { useStyles } from './styles';\n\ninterface Props {\n  searching: boolean;\n  count: number;\n}\n\nconst FILTERING = 'filteringâ€¦';\n\nconst FilterStats: React.FC<Props> = (props: Props) => {\n  const classes = useStyles();\n  const [working, setWorking] = React.useState(SPACE);\n  const { count, searching } = props;\n\n  React.useEffect(() => {\n    if (searching) {\n      setWorking(FILTERING);\n    } else {\n      setTimeout(() => setWorking(SPACE), 800);\n    }\n  }, [searching]);\n\n  return (\n    <div className={classes.root}>\n      <Typography align=\"right\">{working}</Typography>\n      <Typography align=\"right\">{count}</Typography>\n    </div>\n  );\n};\n\nexport default FilterStats;\n"],"sourceRoot":""}