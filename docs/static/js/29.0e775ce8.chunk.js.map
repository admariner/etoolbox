{"version":3,"sources":["containers/RegExTester/services.ts","containers/RegExTester/index.tsx","components/FeatureTitle/index.tsx","components/CopyButton/index.tsx","components/ResultMonospace/index.tsx"],"names":["replacer","match","capture","console","debug","useStyles","makeStyles","theme","root","margin","spacing","matches","padding","borderColor","palette","text","disabled","borderStyle","borderWidth","borderRadius","shape","backgroundColor","fontWeight","color","toolbar","mapStateToProps","state","regularExpression","textInputs","inputText","mapDispatchToProps","dispatch","storeInputText","name","value","setTextAction","connect","title","classes","isMdUp","useIsWidthUp","deferredRegularExpressionValue","useDeferredValue","deferredInputTextValue","React","useState","highlithedMatches","setHighlithedMatches","extracted","setExtracted","useEffect","replaceAll","regex","regexParser","global","replace","e","JSON","stringify","services","extratedItemsList","result","exec","push","set","Set","log","size","sort","join","Helmet","className","FeatureTitle","iconType","TextRotationNoneIcon","TextField","autoFocus","id","label","placeholder","variant","fullWidth","onChange","target","Toolbar","Box","display","flexGrow","CopyButton","data","multiline","minRows","maxRows","ReactHtmlParser","ResultMonospace","wordBreak","titleWithIcon","alignItems","titleContainer","justifyContent","icon","height","width","marginRight","FeatureIcon","isDisabled","hoverMessage","feedbackMessage","Icon","AssignmentTurnedIn","others","setToasterState","useToasterUpdate","onClick","message","substring","copy","format","open","type","autoHideDuration","fontFamily","rows","InputProps","input"],"mappings":"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","file":"static/js/29.0e775ce8.chunk.js","sourcesContent":["import regexParser from 'regex-parser';\n\nexport function transform(regularExpression: string | undefined, inputText: string | undefined): string {\n  if (!regularExpression || !inputText) {\n    return '';\n  }\n\n  const text = inputText.replaceAll('\\n', '<br />');\n\n  try {\n    const regex = regexParser(regularExpression);\n    if (regex.global) {\n      return text.replaceAll(regex, replacer);\n    } else {\n      return text.replace(regex, replacer);\n    }\n  } catch (e) {\n    return JSON.stringify(e);\n  }\n}\n\nexport function extract(regularExpression: string | undefined, inputText: string | undefined): string {\n  const extratedItemsList: string[] = [];\n\n  if (!regularExpression || !inputText) {\n    return '';\n  }\n\n  try {\n    const regex = regexParser(regularExpression);\n    if (!regex.global) {\n      return '';\n    }\n\n    let result: RegExpExecArray | null;\n    while ((result = regex.exec(inputText)) !== null) {\n      extratedItemsList.push(result[0]);\n    }\n\n    // Log some stats\n    const set = new Set(extratedItemsList);\n    console.log(`Sorted set of unique ${set.size} entries:`, [...set].sort().join(', '));\n\n    return extratedItemsList.join(', ');\n  } catch (e) {\n    return JSON.stringify(e);\n  }\n}\n\nfunction replacer(match: string, capture: string): string {\n  console.debug(`match: ${match}, at position ${capture}`);\n  return `<span>${match}</span>`;\n}\n","import React, { useDeferredValue } from 'react';\n\nimport TextRotationNoneIcon from '@mui/icons-material/TextRotationNone';\nimport { Box, Toolbar } from '@mui/material';\nimport TextField from '@mui/material/TextField';\nimport { makeStyles } from '@mui/styles';\nimport { Helmet } from 'react-helmet';\nimport ReactHtmlParser from 'react-html-parser';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport { setTextAction } from '../../actions/text-actions';\nimport CopyButton from '../../components/CopyButton';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport ResultMonospace from '../../components/ResultMonospace';\nimport { AppState } from '../../reducers';\nimport { useIsWidthUp } from '../../theme';\nimport * as services from './services';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing(1),\n  },\n  matches: {\n    padding: theme.spacing(1),\n    borderColor: theme.palette.text.disabled,\n    borderStyle: 'solid',\n    borderWidth: 1,\n    borderRadius: theme.shape.borderRadius,\n    '& span': {\n      backgroundColor: 'yellow',\n      fontWeight: 'bold',\n      color: 'black',\n    },\n  },\n  toolbar: {\n    margin: 0,\n    padding: 0,\n  },\n}));\n\ninterface Props {\n  inputText?: string;\n  regularExpression?: string;\n  storeInputText: (name: string, value: string) => void;\n}\n\nconst RegExTester: React.FC<Props> = ({ regularExpression, inputText, storeInputText }) => {\n  const title = 'Regular expressions tester';\n  const classes = useStyles();\n  const isMdUp = useIsWidthUp('md');\n  const deferredRegularExpressionValue = useDeferredValue(regularExpression);\n  const deferredInputTextValue = useDeferredValue(inputText);\n  const [highlithedMatches, setHighlithedMatches] = React.useState('');\n  const [extracted, setExtracted] = React.useState('');\n\n  React.useEffect(() => {\n    setHighlithedMatches(services.transform(deferredRegularExpressionValue, deferredInputTextValue));\n    setExtracted(services.extract(deferredRegularExpressionValue, deferredInputTextValue));\n  }, [deferredRegularExpressionValue, deferredInputTextValue]);\n\n  return (\n    <>\n      <Helmet title={title} />\n      <div className={classes.root}>\n        <FeatureTitle iconType={TextRotationNoneIcon} title={title} />\n\n        <TextField\n          autoFocus={isMdUp}\n          id=\"regex\"\n          label=\"Regular expression\"\n          placeholder=\"Type the regular expression. Example: /example/g\"\n          variant=\"outlined\"\n          margin=\"normal\"\n          fullWidth={true}\n          value={regularExpression}\n          onChange={e => storeInputText('lastRegEx', e.target.value)}\n        />\n\n        <Toolbar className={classes.toolbar}>\n          <Box display=\"flex\" flexGrow={1}></Box>\n          <CopyButton data={regularExpression} />\n        </Toolbar>\n\n        <TextField\n          id=\"content\"\n          label=\"Content to test the regular expression against\"\n          placeholder=\"Paste or type the content here\"\n          multiline\n          minRows={6}\n          maxRows={isMdUp ? 20 : 6}\n          variant=\"outlined\"\n          margin=\"normal\"\n          fullWidth={true}\n          value={inputText}\n          onChange={e => storeInputText('lastRegExTextSample', e.target.value)}\n        />\n\n        <div className={classes.matches}>{ReactHtmlParser(highlithedMatches)}</div>\n\n        <p>\n          Collection of values. Could be usefull for Jira tickets numbers with expressions like:\n          <br />\n          <strong>issueKey in (FS-3456, WS-3213, FS-9988)</strong>\n        </p>\n\n        <ResultMonospace result={extracted} />\n\n        <Toolbar className={classes.toolbar}>\n          <Box display=\"flex\" flexGrow={1}></Box>\n          <CopyButton data={extracted} />\n        </Toolbar>\n      </div>\n    </>\n  );\n};\n\nexport function mapStateToProps(state: AppState) {\n  return {\n    regularExpression: state.textInputs['lastRegEx'],\n    inputText: state.textInputs['lastRegExTextSample'],\n  };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RegExTester);\n","import React, { ElementType } from 'react';\n\nimport { Typography } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles(theme => ({\n  title: {\n    wordBreak: 'break-word',\n  },\n  titleWithIcon: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  titleContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  icon: {\n    height: '40px',\n    width: '40px',\n    marginRight: theme.spacing(1),\n  },\n}));\n\ninterface Props {\n  title: string;\n  iconType: ElementType;\n}\n\nconst FeatureTitle: React.FC<Props> = ({ title, iconType: FeatureIcon }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.titleContainer}>\n      <div className={classes.titleWithIcon}>\n        <FeatureIcon className={classes.icon} />\n        <Typography variant=\"h5\" className={classes.title}>\n          {title}\n        </Typography>\n      </div>\n    </div>\n  );\n};\n\nexport default FeatureTitle;\n","import React from 'react';\n\nimport AssignmentTurnedIn from '@mui/icons-material/AssignmentTurnedIn';\nimport { Button, ButtonProps, SvgIconTypeMap } from '@mui/material';\nimport { OverridableComponent } from '@mui/material/OverridableComponent';\nimport * as copy from 'copy-to-clipboard';\n\nimport { useToasterUpdate } from '../Toaster/ToasterProvider';\n\ntype Props = {\n  data?: string;\n  isDisabled?: boolean;\n  hoverMessage?: string;\n  feedbackMessage?: string;\n  Icon?: OverridableComponent<SvgIconTypeMap<unknown, 'svg'>>;\n} & ButtonProps;\n\nconst CopyButton: React.FC<Props> = ({\n  data,\n  isDisabled,\n  hoverMessage,\n  feedbackMessage,\n  Icon = AssignmentTurnedIn,\n  ...others\n}: Props) => {\n  const { setToasterState } = useToasterUpdate();\n\n  const handleCopy = () => {\n    if (!data) {\n      return;\n    }\n\n    const message = feedbackMessage ?? `Content copied into clipboard: ${data.substring(0, 25)} …`;\n\n    copy.default(data, { format: 'text/plain' });\n    setToasterState({ open: true, message, type: 'success', autoHideDuration: 2000 });\n  };\n\n  return (\n    <Button\n      {...others}\n      onClick={handleCopy}\n      disabled={!data || isDisabled}\n      title={hoverMessage ?? 'Copy to clipboard'}\n      variant=\"contained\"\n      color=\"primary\">\n      <Icon />\n    </Button>\n  );\n};\n\nexport default CopyButton;\n","import React from 'react';\n\nimport { TextField } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles(() => ({\n  result: {\n    fontFamily: 'monospace',\n    height: 'auto',\n  },\n}));\n\ninterface Props {\n  label?: string;\n  result?: string;\n  rows?: number;\n  maxRows?: number;\n}\n\nexport const ResultMonospace = ({ label, result, rows = 10, maxRows = 15 }: Props) => {\n  const classes = useStyles();\n\n  return (\n    <TextField\n      multiline\n      minRows={rows}\n      maxRows={maxRows}\n      label={label}\n      variant=\"outlined\"\n      margin=\"normal\"\n      fullWidth={true}\n      value={result}\n      InputProps={{\n        classes: {\n          input: classes.result,\n        },\n      }}\n    />\n  );\n};\n\nexport default ResultMonospace;\n"],"sourceRoot":""}