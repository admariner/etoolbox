{"version":3,"sources":["containers/QRCodeGenerator/services.ts","containers/QRCodeGenerator/index.tsx"],"names":["DEFAULT_OPTIONS","errorCorrectionLevel","type","width","quality","margin","color","dark","light","useStyles","makeStyles","theme","root","spacing","toolbar","padding","marginLeft","qrOptions","fontFamily","generatedQR","mapStateToProps","state","inputText","textInputs","inputOptions","mapDispatchToProps","dispatch","storeInputText","name","value","setTextAction","connect","withWidth","props","title","classes","React","useState","imgDataURL","setImgDataURL","Helmet","className","FeatureTitle","iconType","SelectAllIcon","noValidate","autoComplete","Grid","container","item","md","sm","xs","TextField","autoFocus","isWidthUp","label","placeholder","multiline","minRows","maxRows","variant","fullWidth","onChange","e","target","InputProps","input","helperText","Link","rel","href","Toolbar","Box","display","flexGrow","CopyButton","data","Button","onClick","opts","JSON","parse","services","QRCode","toDataURL","err","url","stringify","disabled","endIcon","Card","alignItems","justifyContent","src","alt","CardContent"],"mappings":"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","file":"static/js/22.98921a32.chunk.js","sourcesContent":["export const DEFAULT_OPTIONS = {\n    errorCorrectionLevel: 'H',\n    type: 'image/png',\n    width: 200,\n    quality: 0.3,\n    margin: 1,\n    color: {\n        dark: '#000000FF',\n        light: '#FFFFFFFF',\n    },\n\n};\n","import { Box, Button, Card, CardContent, Grid, Link, TextField, Toolbar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\nimport SelectAllIcon from '@material-ui/icons/SelectAll';\nimport QRCode from 'qrcode';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { setTextAction } from '../../actions/text-actions';\nimport CopyButton from '../../components/CopyButton';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport { AppState } from '../../reducers';\nimport * as services from './services';\n\n\n\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing(1),\n  },\n  toolbar: {\n    margin: 0,\n    padding: 0,\n    '& > *': {\n      marginLeft: theme.spacing(1),\n    },\n  },\n  qrOptions: {\n    fontFamily: 'monospace',\n  },\n  generatedQR: {\n    padding: theme.spacing(2),\n  },\n}));\n\ninterface Props {\n  width: Breakpoint;\n  inputText?: string;\n  inputOptions?: string;\n  storeInputText: (name: string, value: string) => void;\n}\n\nconst QRCodeGenerator: React.FC<Props> = (props: Props) => {\n  const title = 'QR Code generator';\n  const classes = useStyles();\n  const {inputText, inputOptions, storeInputText} = props;\n  const [imgDataURL, setImgDataURL] = React.useState('');\n\n  function generate() {\n    if (!inputText) {\n      return;\n    }\n\n    const opts = inputOptions ? JSON.parse(inputOptions) : services.DEFAULT_OPTIONS;\n    QRCode.toDataURL(inputText, opts, (err, url) => {\n      if (err) {\n        throw err;\n      }\n\n      setImgDataURL(url);\n      storeInputText('lastQRCodeOptions', JSON.stringify(opts, null, 2));\n    });\n  }\n\n  return (\n    <>\n      <Helmet title={title} />\n      <div className={classes.root}>\n        <FeatureTitle iconType={SelectAllIcon} title={title} />\n\n        <form noValidate autoComplete=\"off\">\n          <Grid container spacing={1}>\n            <Grid item md={6} sm={12} xs={12}>\n              <TextField\n                autoFocus={isWidthUp('md', props.width)}\n                label=\"Text to store into QR Code\"\n                placeholder=\"Paste or type the content here\"\n                multiline\n                minRows={12}\n                maxRows={isWidthUp('md', props.width) ? 20 : 12}\n                variant=\"outlined\"\n                margin=\"normal\"\n                fullWidth={true}\n                value={inputText}\n                onChange={e => storeInputText('lastQRCodeTextValue', e.target.value)}\n              />\n            </Grid>\n            <Grid item md={6} sm={12} xs={12}>\n              <TextField\n                label=\"QR Code generation options\"\n                multiline\n                minRows={12}\n                maxRows={isWidthUp('md', props.width) ? 20 : 12}\n                variant=\"outlined\"\n                margin=\"normal\"\n                fullWidth={true}\n                InputProps={{\n                  classes: {\n                    input: classes.qrOptions,\n                  },\n                }}\n                value={inputOptions}\n                onChange={e => storeInputText('lastQRCodeOptions', e.target.value)}\n                helperText={\n                  <Link target=\"_blank\" rel=\"noreferrer\" href=\"https://www.npmjs.com/package/qrcode#qr-code-options\">\n                    Options documentation available here!\n                  </Link>\n                }\n              />\n            </Grid>\n          </Grid>\n        </form>\n\n        <Toolbar className={classes.toolbar}>\n          <Box display=\"flex\" flexGrow={1}></Box>\n          <CopyButton data={imgDataURL} />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={generate}\n            disabled={!inputText}\n            endIcon={<SelectAllIcon />}>\n            Generate\n          </Button>\n        </Toolbar>\n\n        {imgDataURL && (\n          <Card className={classes.generatedQR}>\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n              <img src={imgDataURL} alt=\"QR Code\" />\n            </Box>\n            <CardContent>\n              <TextField\n                label=\"Full img tag\"\n                fullWidth\n                value={`<img alt=\"QR Code\" src=\"${imgDataURL}\"/>`}\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n              <TextField\n                label=\"QR Code. Copy-paste into 'src' attribute\"\n                fullWidth\n                value={imgDataURL}\n                margin=\"normal\"\n                variant=\"outlined\"\n                multiline\n                minRows=\"8\"\n              />\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport function mapStateToProps(state: AppState) {\n  return {\n    inputText: state.textInputs['lastQRCodeTextValue'],\n    inputOptions: state.textInputs['lastQRCodeOptions'],\n  };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withWidth()(QRCodeGenerator));\n"],"sourceRoot":""}