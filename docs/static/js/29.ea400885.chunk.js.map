{"version":3,"sources":["containers/CommonLists/styles.ts","containers/CommonLists/TabPanel.tsx","containers/CommonLists/index.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","hooks/usePagination.ts","components/Filter/styles.ts","components/Filter/index.tsx","components/FilterStats/styles.ts","components/FilterStats/index.tsx"],"names":["StyledTableCell","withStyles","body","fontSize","whiteSpace","wordBreak","TableCell","StyledTableRow","theme","root","backgroundColor","palette","action","hover","TableRow","useStyles","makeStyles","margin","spacing","toolbar","padding","marginLeft","tabsPanel","flexGrow","width","marginTop","background","paper","tabsBar","marginBottom","tableHeader","primary","main","TabPanel","props","children","value","index","other","isTabSelected","role","hidden","id","TABS","mapStateToProps","state","mimeTypes","elements","filteringMimeTypes","filtering","htmlEntities","filteringHtmlEntities","mapDispatchToProps","dispatch","applyMimeTypesFilter","searchTerm","applyHtmlEntitiesFilter","connect","classes","isMdUp","useIsWidthUp","React","useState","MIME_TYPES","selectedTab","setSelectedTab","inputFilter","setInputFilter","searching","usePagination","page","setPage","rowsPerPage","handleChangeRowsPerPage","applyFilter","newInputFilter","Helmet","title","Paper","square","Tabs","onChange","_e","newTab","indicatorColor","textColor","variant","scrollButtons","Tab","label","className","Toolbar","Filter","initialFilter","onFilterChange","Box","display","FilterStats","count","size","length","TablePagination","rowsPerPageOptions","component","keys","onPageChange","_","onRowsPerPageChange","TableContainer","Table","TableHead","scope","TableBody","slice","map","key","get","join","searchWords","textToHighlight","HTML_ENTITIES","htmlEntity","character","entityName","entityNumber","description","_objectWithoutProperties","source","excluded","i","target","Object","getOwnPropertySymbols","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call","setRowsPerPage","evt","autofocus","fullWidth","filter","setFilter","inputLabel","debounced","useDebouncedCallback","useEffect","FormControl","InputLabel","htmlFor","Input","autoFocus","type","e","endAdornment","InputAdornment","position","IconButton","SPACE","working","setWorking","setTimeout","Typography","align"],"mappings":"ubAGaA,EAAkBC,aAAW,iBAAO,CAC7CC,KAAM,CACFC,SAAU,GACVC,WAAY,SACZC,UAAW,cAJuB,GAAXJ,CAM3BK,KAESC,EAAiBN,aAAW,SAAAO,GAAK,MAAK,CAC/CC,KAAM,CACF,sBAAuB,CACnBC,gBAAiBF,EAAMG,QAAQC,OAAOC,QAHJ,GAAhBZ,CAM1Ba,KAESC,EAAYC,aAAW,SAAAR,GAAK,MAAK,CAC1CC,KAAM,CACFQ,OAAQT,EAAMU,QAAQ,IAE1BC,QAAS,CACLF,OAAQ,EACRG,QAAS,EACT,QAAS,CACLC,WAAYb,EAAMU,QAAQ,KAGlCI,UAAW,CACPC,SAAU,EACVC,MAAO,OACPC,UAAWjB,EAAMU,QAAQ,GACzBR,gBAAiBF,EAAMG,QAAQe,WAAWC,OAE9CC,QAAS,CACLC,aAAcrB,EAAMU,QAAQ,IAEhCY,YAAa,CACTpB,gBAAiBF,EAAMG,QAAQoB,QAAQC,MArBN,I,uDChBlC,SAASC,EAASC,GACrB,IAAQC,EAAqCD,EAArCC,SAAUC,EAA2BF,EAA3BE,MAAOC,EAAoBH,EAApBG,MAAUC,EAAnC,YAA6CJ,EAA7C,GACMK,EAAgBH,IAAUC,EAEhC,OACI,6CACIG,KAAK,WACLC,QAASF,EACTG,GAAE,mCAA8BL,GAChC,gDAAwCA,IACpCC,GALR,aAMKC,GAAiB,mCAAGJ,MAGhC,C,ICWIQ,E,6CAAAA,O,2BAAAA,I,kCAAAA,M,KAgME,SAASC,EAAgBC,GAC5B,MAAO,CACHC,UAAWD,EAAMC,UAAUC,SAC3BC,mBAAoBH,EAAMC,UAAUG,UAEpCC,aAAcL,EAAMK,aAAaH,SACjCI,sBAAuBN,EAAMK,aAAaD,UAEjD,CAEM,SAASG,EAAmBC,GAC/B,MAAO,CACHC,qBAAsB,SAACC,GAAD,OAAwBF,EAASC,YAAqBC,GAAtD,EACtBC,wBAAyB,SAACD,GAAD,OAAwBF,EAASG,YAAwBD,GAAzD,EAEhC,CAEcE,sBAAQb,EAAiBQ,EAAzBK,EAlMsB,SAACvB,GAClC,IACMwB,EAAU3C,IACV4C,EAASC,YAAa,MAC5B,EAAsCC,IAAMC,SAASnB,EAAKoB,YAA1D,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAsCJ,IAAMC,SAAS,IAArD,mBAAOI,EAAP,KAAoBC,EAApB,KAEInB,EAMAd,EANAc,mBACAF,EAKAZ,EALAY,UACAK,EAIAjB,EAJAiB,sBACAD,EAGAhB,EAHAgB,aACAI,EAEApB,EAFAoB,qBACAE,EACAtB,EADAsB,wBAEEY,EAAYpB,GAAsBG,EACxC,EAAgEkB,cAAxDC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,YAAaC,EAApC,EAAoCA,wBAQpC,SAASC,EAAYC,GACjBR,EAAeQ,GACfJ,EAAQ,GACJP,IAAgBrB,EAAKoB,WACrBT,EAAqBqB,GAErBnB,EAAwBmB,EAE/B,CAUD,OACI,qCACI,cAACC,EAAA,EAAD,CAAQC,MA1CF,oCA2CN,cAACC,EAAA,EAAD,CAAOC,QAAM,EAAb,SACI,eAACC,EAAA,EAAD,CACI5C,MAAO4B,EACPiB,SA9BM,SAACC,EAAaC,GAChClB,EAAekB,GACfT,EAAY,IACZH,EAAQ,EACX,EA2Bea,eAAe,UACfC,UAAU,UACVC,QAAQ,aACRC,eAAe,EACf,aAAW,mBAPf,UAQI,cAACC,EAAA,EAAD,CAAKC,MAAM,aAAa/C,GAAG,aAAa,gBAAc,mBACtD,cAAC8C,EAAA,EAAD,CAAKC,MAAM,gBAAgB/C,GAAG,gBAAgB,gBAAc,2BAIpE,sBAAKgD,UAAWhC,EAAQjD,KAAxB,UACI,eAACkF,EAAA,EAAD,CAASD,UAAWhC,EAAQvC,QAA5B,UACI,cAACyE,EAAA,EAAD,CAAQC,cAAe3B,EAAa4B,eAAgBpB,IACpD,cAACqB,EAAA,EAAD,CAAKC,QAAQ,OAAOzE,SAAU,IAC9B,cAAC0E,EAAA,EAAD,CAAaC,MA5BrBlC,IAAgBrB,EAAKoB,WACdjB,EAAUqD,KAEVjD,EAAakD,OAyB4BhC,UAAWA,OAGvD,eAACnC,EAAD,CAAUG,MAAO4B,EAAa3B,MAAOM,EAAKoB,WAA1C,UACI,cAACsC,EAAA,EAAD,CACIC,mBAAoB,CAAC,EAAG,GAAI,GAAI,GAAI,KACpCC,UAAU,MACVL,MAAO,YAAIpD,EAAU0D,QAAQJ,OAC7B5B,YAAaA,EACbF,KAAMA,EACNmC,aAAc,SAACC,EAAGpC,GAAJ,OAAaC,EAAQD,EAArB,EACdqC,oBAAqBlC,IAEzB,cAACmC,EAAA,EAAD,CAAgBL,UAAWzB,IAA3B,SACI,eAAC+B,EAAA,EAAD,CAAOV,KAAMxC,EAAS,SAAW,QAAjC,UACI,cAACmD,EAAA,EAAD,CAAWpB,UAAWhC,EAAQ5B,YAA9B,SACI,eAAChB,EAAA,EAAD,WACI,cAACd,EAAD,CAAiBuG,UAAU,KAAKQ,MAAM,MAAtC,uBAGA,cAAC/G,EAAD,CAAiBuG,UAAU,KAAKQ,MAAM,MAAtC,iCAKR,cAACC,EAAA,EAAD,UACK,YAAIlE,EAAU0D,QACVS,MAAM3C,EAAOE,EAAaF,EAAOE,EAAcA,GAC/C0C,KAAI,SAAAC,GAAQ,IAAD,EAEF/E,GAD6B,UAAGU,EAAUsE,IAAID,UAAjB,QAAyB,IACnCE,KAAK,MAC9B,OACI,eAAC9G,EAAD,WACI,cAACP,EAAD,UACI,cAAC,IAAD,CAAasH,YAAa,CAACpD,GAAcqD,gBAAiBJ,MAE9D,cAACnH,EAAD,UACI,cAAC,IAAD,CAAasH,YAAa,CAACpD,GAAcqD,gBAAiBnF,QAL7C+E,EAS5B,cAMrB,eAAClF,EAAD,CAAUG,MAAO4B,EAAa3B,MAAOM,EAAK6E,cAA1C,UACI,cAACnB,EAAA,EAAD,CACIC,mBAAoB,CAAC,EAAG,GAAI,GAAI,GAAI,KACpCC,UAAU,MACVL,MAAOhD,EAAakD,OACpB5B,YAAaA,EACbF,KAAMA,EACNmC,aAAc,SAACC,EAAGpC,GAAJ,OAAaC,EAAQD,EAArB,EACdqC,oBAAqBlC,IAEzB,cAACmC,EAAA,EAAD,CAAgBL,UAAWzB,IAA3B,SACI,eAAC+B,EAAA,EAAD,CAAOV,KAAMxC,EAAS,SAAW,QAAjC,UACI,cAACmD,EAAA,EAAD,CAAWpB,UAAWhC,EAAQ5B,YAA9B,SACI,eAAChB,EAAA,EAAD,WACI,cAACd,EAAD,CAAiBuG,UAAU,KAAKQ,MAAM,MAAtC,oBAGA,cAAC/G,EAAD,CAAiBuG,UAAU,KAAKQ,MAAM,MAAtC,kBAGA,cAAC/G,EAAD,CAAiBuG,UAAU,KAAKQ,MAAM,MAAtC,oBAGA,cAAC/G,EAAD,CAAiBuG,UAAU,KAAKQ,MAAM,MAAtC,8BAKR,cAACC,EAAA,EAAD,UACK9D,EACI+D,MAAM3C,EAAOE,EAAaF,EAAOE,EAAcA,GAC/C0C,KAAI,SAAAO,GAAU,OACX,eAAClH,EAAD,WACI,cAACP,EAAD,UACI,cAAC,IAAD,CACIsH,YAAa,CAACpD,GACdqD,gBAAiBE,EAAWC,cAGpC,cAAC1H,EAAD,UACI,cAAC,IAAD,CACIsH,YAAa,CAACpD,GACdqD,gBAAiBE,EAAWE,eAGpC,cAAC3H,EAAD,UACI,cAAC,IAAD,CACIsH,YAAa,CAACpD,GACdqD,gBAAiBE,EAAWG,iBAGpC,cAAC5H,EAAD,UACI,cAAC,IAAD,CACIsH,YAAa,CAACpD,GACdqD,gBAAiBE,EAAWI,kBAtBnBJ,EAAWG,aADrB,mBAmClD,G,mCC1ND,8CACe,SAASE,EAAyBC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,CAAC,EAC5B,IACIZ,EAAKc,EADLC,EAAS,YAA6BH,EAAQC,GAGlD,GAAIG,OAAOC,sBAAuB,CAChC,IAAIC,EAAmBF,OAAOC,sBAAsBL,GAEpD,IAAKE,EAAI,EAAGA,EAAII,EAAiBjC,OAAQ6B,IACvCd,EAAMkB,EAAiBJ,GACnBD,EAASM,QAAQnB,IAAQ,GACxBgB,OAAOI,UAAUC,qBAAqBC,KAAKV,EAAQZ,KACxDe,EAAOf,GAAOY,EAAOZ,GAEzB,CAEA,OAAOe,CACT,C,wFChBa7D,EAAgB,WACzB,MAAwBP,mBAAS,GAAjC,mBAAOQ,EAAP,KAAaC,EAAb,KACA,EAAsCT,mBAAS,IAA/C,mBAAOU,EAAP,KAAoBkE,EAApB,KAOA,MAAO,CACHpE,OACAC,UACAC,cACAC,wBAT4B,SAACkE,GAC7BD,GAAgBC,EAAIT,OAAO9F,OAC3BmC,EAAQ,EACX,EAQJ,C,0ICfYxD,EAAYC,aAAW,SAAAR,GAAK,MAAK,CAC1CC,KAAM,CACFQ,OAAQT,EAAMU,QAAQ,IAFW,I,gBCgD1B0E,IAnCiB,SAAC1D,GAC7B,IAAQ0G,EAA+D1G,EAA/D0G,UAAW/C,EAAoD3D,EAApD2D,cAAeJ,EAAqCvD,EAArCuD,MAAOK,EAA8B5D,EAA9B4D,eAAgB+C,EAAc3G,EAAd2G,UACzD,EAA4BhF,IAAMC,SAAS,IAA3C,mBAAOgF,EAAP,KAAeC,EAAf,KACMrF,EAAU3C,IACViI,EAAavD,GAAgB,SAG7BwD,EAAYC,aAAqB,SAACJ,GAAD,OAAoBhD,EAAegD,EAAnC,GAA4C,KAOnF,OALAjF,IAAMsF,WAAU,WACZJ,EAAUlD,EACb,GAAE,CAACA,IACJhC,IAAMsF,WAAU,kBAAMF,EAAUH,EAAhB,GAAyB,CAACA,EAAQG,IAG9C,eAACG,EAAA,EAAD,CAAaP,UAAWA,EAAWnD,UAAWhC,EAAQjD,KAAtD,UACI,cAAC4I,EAAA,EAAD,CAAYC,QAAQ,cAApB,SAAmCN,IACnC,cAACO,EAAA,EAAD,CACI7G,GAAG,cACH8G,UAAWZ,EACXa,KAAK,OACLrH,MAAO0G,EACP7D,SAAU,SAAAyE,GAAC,OAAIX,EAAUW,EAAExB,OAAO9F,MAAvB,EACXuH,aACI,cAACC,EAAA,EAAD,CAAgBC,SAAS,MAAzB,SACI,cAACC,EAAA,EAAD,UACI,cAAC,IAAD,YAO3B,C,gFC9CY/I,EAAYC,aAAW,SAAAR,GAAK,MAAK,CAC1CC,KAAM,CACFQ,OAAQT,EAAMU,QAAQ,IAFW,I,eCgC1B+E,IArBsB,SAAC/D,GAClC,IAAMwB,EAAU3C,IAChB,EAA8B8C,IAAMC,SAASiG,KAA7C,mBAAOC,EAAP,KAAgBC,EAAhB,KACQ/D,EAAqBhE,EAArBgE,MAAO9B,EAAclC,EAAdkC,UAUf,OARAP,IAAMsF,WAAU,WACR/E,EACA6F,EATM,mBAWNC,YAAW,kBAAMD,EAAWF,IAAjB,GAAyB,IAE3C,GAAE,CAAC3F,IAGA,sBAAKsB,UAAWhC,EAAQjD,KAAxB,UACI,cAAC0J,EAAA,EAAD,CAAYC,MAAM,QAAlB,SAA2BJ,IAC3B,cAACG,EAAA,EAAD,CAAYC,MAAM,QAAlB,SAA2BlE,MAGtC,C","file":"static/js/29.ea400885.chunk.js","sourcesContent":["import { TableCell, TableRow } from '@mui/material';\nimport { withStyles, makeStyles } from '@mui/styles';\n\nexport const StyledTableCell = withStyles(() => ({\n    body: {\n        fontSize: 14,\n        whiteSpace: 'normal',\n        wordBreak: 'break-word',\n    },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles(theme => ({\n    root: {\n        '&:nth-of-type(even)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\nexport const useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    toolbar: {\n        margin: 0,\n        padding: 0,\n        '& > *': {\n            marginLeft: theme.spacing(1),\n        },\n    },\n    tabsPanel: {\n        flexGrow: 1,\n        width: '100%',\n        marginTop: theme.spacing(3),\n        backgroundColor: theme.palette.background.paper,\n    },\n    tabsBar: {\n        marginBottom: theme.spacing(2),\n    },\n    tableHeader: {\n        backgroundColor: theme.palette.primary.main,\n    },\n}));\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function TabPanel(props: any) {\n    const { children, value, index, ...other } = props;\n    const isTabSelected = value === index;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={!isTabSelected}\n            id={`scrollable-auto-tabpanel-${index}`}\n            aria-labelledby={`scrollable-auto-tab-${index}`}\n            {...other}>\n            {isTabSelected && <>{children}</>}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n};\n","import {\n    Box,\n    Paper,\n    Tab,\n    Table,\n    TableBody,\n    TableContainer,\n    TableHead,\n    TablePagination,\n    TableRow,\n    Tabs,\n    Toolbar,\n} from '@mui/material';\nimport React from 'react';\nimport Highlighter from 'react-highlight-words';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { applyHtmlEntitiesFilter, HtmlEntity } from '../../actions/html-entitie-actions';\nimport { applyMimeTypesFilter } from '../../actions/mime-type-actions';\nimport { AppState } from '../../reducers';\nimport Filter from '../../components/Filter';\nimport { StyledTableCell, StyledTableRow, useStyles } from './styles';\nimport { TabPanel } from './TabPanel';\nimport { Helmet } from 'react-helmet';\nimport FilterStats from '../../components/FilterStats';\nimport { usePagination } from '../../hooks/usePagination';\nimport { useIsWidthUp } from '../../theme';\n\nenum TABS {\n    MIME_TYPES = 0,\n    HTML_ENTITIES = 1,\n}\n\ninterface Props {\n    mimeTypes: Map<string, readonly string[]>;\n    filteringMimeTypes: boolean;\n    htmlEntities: HtmlEntity[];\n    filteringHtmlEntities: boolean;\n\n    applyMimeTypesFilter: (searchTerm: string) => void;\n    applyHtmlEntitiesFilter: (searchTerm: string) => void;\n}\n\nconst CommonLists: React.FC<Props> = (props: Props) => {\n    const title = 'Mime-types, HTML Entities…';\n    const classes = useStyles();\n    const isMdUp = useIsWidthUp('md');\n    const [selectedTab, setSelectedTab] = React.useState(TABS.MIME_TYPES);\n    const [inputFilter, setInputFilter] = React.useState('');\n    const {\n        filteringMimeTypes,\n        mimeTypes,\n        filteringHtmlEntities,\n        htmlEntities,\n        applyMimeTypesFilter,\n        applyHtmlEntitiesFilter,\n    } = props;\n    const searching = filteringMimeTypes || filteringHtmlEntities;\n    const { page, setPage, rowsPerPage, handleChangeRowsPerPage } = usePagination();\n\n    const onTabSelected = (_e: unknown, newTab: number) => {\n        setSelectedTab(newTab);\n        applyFilter('');\n        setPage(0);\n    };\n\n    function applyFilter(newInputFilter: string) {\n        setInputFilter(newInputFilter);\n        setPage(0);\n        if (selectedTab === TABS.MIME_TYPES) {\n            applyMimeTypesFilter(newInputFilter);\n        } else {\n            applyHtmlEntitiesFilter(newInputFilter);\n        }\n    }\n\n    function getElementsCount(): number {\n        if (selectedTab === TABS.MIME_TYPES) {\n            return mimeTypes.size;\n        } else {\n            return htmlEntities.length;\n        }\n    }\n\n    return (\n        <>\n            <Helmet title={title} />\n            <Paper square>\n                <Tabs\n                    value={selectedTab}\n                    onChange={onTabSelected}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    variant=\"scrollable\"\n                    scrollButtons={true}\n                    aria-label=\"Common web lists\">\n                    <Tab label=\"Mime-types\" id=\"mime-types\" aria-controls=\"tab-mime-types\" />\n                    <Tab label=\"HTML Entities\" id=\"html-entities\" aria-controls=\"tab-html-entities\" />\n                </Tabs>\n            </Paper>\n\n            <div className={classes.root}>\n                <Toolbar className={classes.toolbar}>\n                    <Filter initialFilter={inputFilter} onFilterChange={applyFilter} />\n                    <Box display=\"flex\" flexGrow={1}></Box>\n                    <FilterStats count={getElementsCount()} searching={searching} />\n                </Toolbar>\n\n                <TabPanel value={selectedTab} index={TABS.MIME_TYPES}>\n                    <TablePagination\n                        rowsPerPageOptions={[5, 10, 25, 50, 100]}\n                        component=\"div\"\n                        count={[...mimeTypes.keys()].length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={(_, page) => setPage(page)}\n                        onRowsPerPageChange={handleChangeRowsPerPage}\n                    />\n                    <TableContainer component={Paper}>\n                        <Table size={isMdUp ? 'medium' : 'small'}>\n                            <TableHead className={classes.tableHeader}>\n                                <TableRow>\n                                    <StyledTableCell component=\"th\" scope=\"row\">\n                                        Mime Type\n                                    </StyledTableCell>\n                                    <StyledTableCell component=\"th\" scope=\"row\">\n                                        File extension\n                                    </StyledTableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {[...mimeTypes.keys()]\n                                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                    .map(key => {\n                                        const extensions: readonly string[] = mimeTypes.get(key) ?? [];\n                                        const value = extensions.join(', ');\n                                        return (\n                                            <StyledTableRow key={key}>\n                                                <StyledTableCell>\n                                                    <Highlighter searchWords={[inputFilter]} textToHighlight={key} />\n                                                </StyledTableCell>\n                                                <StyledTableCell>\n                                                    <Highlighter searchWords={[inputFilter]} textToHighlight={value} />\n                                                </StyledTableCell>\n                                            </StyledTableRow>\n                                        );\n                                    })}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </TabPanel>\n\n                <TabPanel value={selectedTab} index={TABS.HTML_ENTITIES}>\n                    <TablePagination\n                        rowsPerPageOptions={[5, 10, 25, 50, 100]}\n                        component=\"div\"\n                        count={htmlEntities.length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={(_, page) => setPage(page)}\n                        onRowsPerPageChange={handleChangeRowsPerPage}\n                    />\n                    <TableContainer component={Paper}>\n                        <Table size={isMdUp ? 'medium' : 'small'}>\n                            <TableHead className={classes.tableHeader}>\n                                <TableRow>\n                                    <StyledTableCell component=\"th\" scope=\"row\">\n                                        Entity\n                                    </StyledTableCell>\n                                    <StyledTableCell component=\"th\" scope=\"row\">\n                                        Name\n                                    </StyledTableCell>\n                                    <StyledTableCell component=\"th\" scope=\"row\">\n                                        Number\n                                    </StyledTableCell>\n                                    <StyledTableCell component=\"th\" scope=\"row\">\n                                        Description\n                                    </StyledTableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {htmlEntities\n                                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                    .map(htmlEntity => (\n                                        <StyledTableRow key={htmlEntity.entityNumber}>\n                                            <StyledTableCell>\n                                                <Highlighter\n                                                    searchWords={[inputFilter]}\n                                                    textToHighlight={htmlEntity.character}\n                                                />\n                                            </StyledTableCell>\n                                            <StyledTableCell>\n                                                <Highlighter\n                                                    searchWords={[inputFilter]}\n                                                    textToHighlight={htmlEntity.entityName}\n                                                />\n                                            </StyledTableCell>\n                                            <StyledTableCell>\n                                                <Highlighter\n                                                    searchWords={[inputFilter]}\n                                                    textToHighlight={htmlEntity.entityNumber}\n                                                />\n                                            </StyledTableCell>\n                                            <StyledTableCell>\n                                                <Highlighter\n                                                    searchWords={[inputFilter]}\n                                                    textToHighlight={htmlEntity.description}\n                                                />\n                                            </StyledTableCell>\n                                        </StyledTableRow>\n                                    ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </TabPanel>\n            </div>\n        </>\n    );\n};\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        mimeTypes: state.mimeTypes.elements,\n        filteringMimeTypes: state.mimeTypes.filtering,\n\n        htmlEntities: state.htmlEntities.elements,\n        filteringHtmlEntities: state.htmlEntities.filtering,\n    };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        applyMimeTypesFilter: (searchTerm: string) => dispatch(applyMimeTypesFilter(searchTerm)),\n        applyHtmlEntitiesFilter: (searchTerm: string) => dispatch(applyHtmlEntitiesFilter(searchTerm)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommonLists);\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","import { useState } from 'react';\n\nexport const usePagination = () => {\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n\n    const handleChangeRowsPerPage = (evt: React.ChangeEvent<HTMLInputElement>) => {\n        setRowsPerPage(+evt.target.value);\n        setPage(0);\n    };\n\n    return {\n        page,\n        setPage,\n        rowsPerPage,\n        handleChangeRowsPerPage,\n    };\n};\n","import { makeStyles } from '@mui/styles';\n\nexport const useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n}));\n","import React from 'react';\nimport { FormControl, IconButton, Input, InputAdornment, InputLabel } from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\n\nimport { useStyles } from './styles';\nimport { useDebouncedCallback } from 'use-debounce';\n\ninterface Props {\n    label?: string;\n    autofocus?: boolean;\n    fullWidth?: boolean;\n    initialFilter: string;\n    onFilterChange: (newValue: string) => void;\n}\n\nconst Filter: React.FC<Props> = (props: Props) => {\n    const { autofocus, initialFilter, label, onFilterChange, fullWidth } = props;\n    const [filter, setFilter] = React.useState('');\n    const classes = useStyles();\n    const inputLabel = label ? label : 'Search';\n\n    // https://www.npmjs.com/package/use-debounce\n    const debounced = useDebouncedCallback((filter: string) => onFilterChange(filter), 300);\n\n    React.useEffect(() => {\n        setFilter(initialFilter);\n    }, [initialFilter]);\n    React.useEffect(() => debounced(filter), [filter, debounced]);\n\n    return (\n        <FormControl fullWidth={fullWidth} className={classes.root}>\n            <InputLabel htmlFor=\"searchField\">{inputLabel}</InputLabel>\n            <Input\n                id=\"searchField\"\n                autoFocus={autofocus}\n                type=\"text\"\n                value={filter}\n                onChange={e => setFilter(e.target.value)}\n                endAdornment={\n                    <InputAdornment position=\"end\">\n                        <IconButton>\n                            <SearchIcon />\n                        </IconButton>\n                    </InputAdornment>\n                }\n            />\n        </FormControl>\n    );\n};\n\nexport default Filter;\n","import { makeStyles } from '@mui/styles';\n\nexport const useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n}));\n","import React from 'react';\nimport { Typography } from '@mui/material';\n\nimport { useStyles } from './styles';\nimport { SPACE } from '../../constants';\n\ninterface Props {\n    searching: boolean;\n    count: number;\n}\n\nconst FILTERING = 'filtering…';\n\nconst FilterStats: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const [working, setWorking] = React.useState(SPACE);\n    const { count, searching } = props;\n\n    React.useEffect(() => {\n        if (searching) {\n            setWorking(FILTERING);\n        } else {\n            setTimeout(() => setWorking(SPACE), 800);\n        }\n    }, [searching]);\n\n    return (\n        <div className={classes.root}>\n            <Typography align=\"right\">{working}</Typography>\n            <Typography align=\"right\">{count}</Typography>\n        </div>\n    );\n};\n\nexport default FilterStats;\n"],"sourceRoot":""}