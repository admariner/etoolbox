{"version":3,"sources":["containers/RegExTester/services.ts","containers/RegExTester/index.tsx","components/FeatureTitle/index.tsx","components/CopyButton/index.tsx","components/ResultMonospace/index.tsx"],"names":["replacer","match","capture","useStyles","makeStyles","theme","root","margin","spacing","matches","padding","borderColor","palette","text","disabled","borderStyle","borderWidth","borderRadius","shape","backgroundColor","fontWeight","color","toolbar","mapStateToProps","state","regularExpression","textInputs","inputText","mapDispatchToProps","dispatch","storeInputText","name","value","setTextAction","connect","props","title","classes","isMdUp","useIsWidthUp","React","useState","highlithedMatches","setHighlithedMatches","extracted","setExtracted","debounced","useDebouncedCallback","replaceAll","regex","regexParser","global","replace","e","JSON","stringify","services","extratedItemsList","result","exec","push","set","Set","console","log","size","sort","join","useEffect","Helmet","className","FeatureTitle","iconType","TextRotationNoneIcon","TextField","autoFocus","id","label","placeholder","variant","fullWidth","onChange","target","Toolbar","Box","display","flexGrow","CopyButton","data","multiline","minRows","maxRows","ReactHtmlParser","ResultMonospace","wordBreak","titleWithIcon","alignItems","titleContainer","justifyContent","icon","height","width","marginRight","FeatureIcon","isDisabled","hoverMessage","feedbackMessage","Icon","AssignmentTurnedIn","others","setToasterState","useToasterUpdate","onClick","message","substring","copy","format","open","type","autoHideDuration","fontFamily","rows","InputProps","input"],"mappings":"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","file":"static/js/30.80b77356.chunk.js","sourcesContent":["import regexParser from 'regex-parser';\n\nexport function transform(regularExpression: string | undefined, inputText: string | undefined): string {\n    if (!regularExpression || !inputText) {\n        return '';\n    }\n\n    const text = inputText.replaceAll('\\n', '<br />');\n\n    try {\n        const regex = regexParser(regularExpression);\n        if (regex.global) {\n            return text.replaceAll(regex, replacer);\n        } else {\n            return text.replace(regex, replacer);\n        }\n    } catch (e) {\n        return JSON.stringify(e);\n    }\n}\n\nexport function extract(regularExpression: string | undefined, inputText: string | undefined): string {\n    const extratedItemsList: string[] = [];\n\n    if (!regularExpression || !inputText) {\n        return '';\n    }\n\n    try {\n        const regex = regexParser(regularExpression);\n        if (!regex.global) {\n            return '';\n        }\n\n        let result: RegExpExecArray | null;\n        while ((result = regex.exec(inputText)) !== null) {\n            extratedItemsList.push(result[0]);\n        }\n\n        // Log some stats\n        const set = new Set(extratedItemsList);\n        console.log(`Sorted set of unique ${set.size} entries:`, [...set].sort().join(', '));\n\n        return extratedItemsList.join(', ');\n    } catch (e) {\n        return JSON.stringify(e);\n    }\n}\n\nfunction replacer(match: string, capture: string): string {\n    // console.log(`match: ${match}, at position ${capture}`);\n    return `<span>${match}</span>`;\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport { Box, Toolbar } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport TextRotationNoneIcon from '@mui/icons-material/TextRotationNone';\nimport TextField from '@mui/material/TextField';\nimport ReactHtmlParser from 'react-html-parser';\nimport { useDebouncedCallback } from 'use-debounce';\n\nimport { setTextAction } from '../../actions/text-actions';\nimport { AppState } from '../../reducers';\nimport * as services from './services';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport CopyButton from '../../components/CopyButton';\nimport { Helmet } from 'react-helmet';\nimport ResultMonospace from '../../components/ResultMonospace';\nimport { useIsWidthUp } from '../../theme';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    matches: {\n        padding: theme.spacing(1),\n        borderColor: theme.palette.text.disabled,\n        borderStyle: 'solid',\n        borderWidth: 1,\n        borderRadius: theme.shape.borderRadius,\n        '& span': {\n            backgroundColor: 'yellow',\n            fontWeight: 'bold',\n            color: 'black',\n        },\n    },\n    toolbar: {\n        margin: 0,\n        padding: 0,\n    },\n}));\n\ninterface Props {\n    inputText?: string;\n    regularExpression?: string;\n    storeInputText: (name: string, value: string) => void;\n}\n\nconst RegExTester: React.FC<Props> = (props: Props) => {\n    const title = 'Regular expressions tester';\n    const classes = useStyles();\n    const isMdUp = useIsWidthUp('md');\n    const { regularExpression, inputText, storeInputText } = props;\n    const [highlithedMatches, setHighlithedMatches] = React.useState('');\n    const [extracted, setExtracted] = React.useState('');\n\n    // https://www.npmjs.com/package/use-debounce\n    const debounced = useDebouncedCallback((regularExpression, inputText) => {\n        setHighlithedMatches(services.transform(regularExpression, inputText));\n        setExtracted(services.extract(regularExpression, inputText));\n    }, 300);\n\n    React.useEffect(\n        // https://www.npmjs.com/package/use-debounce\n        () => debounced(regularExpression, inputText),\n        [regularExpression, inputText, debounced],\n    );\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={TextRotationNoneIcon} title={title} />\n\n                <TextField\n                    autoFocus={isMdUp}\n                    id=\"regex\"\n                    label=\"Regular expression\"\n                    placeholder=\"Type the regular expression. Example: /example/g\"\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    fullWidth={true}\n                    value={regularExpression}\n                    onChange={e => storeInputText('lastRegEx', e.target.value)}\n                />\n\n                <Toolbar className={classes.toolbar}>\n                    <Box display=\"flex\" flexGrow={1}></Box>\n                    <CopyButton data={regularExpression} />\n                </Toolbar>\n\n                <TextField\n                    id=\"content\"\n                    label=\"Content to test the regular expression against\"\n                    placeholder=\"Paste or type the content here\"\n                    multiline\n                    minRows={6}\n                    maxRows={isMdUp ? 20 : 6}\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    fullWidth={true}\n                    value={inputText}\n                    onChange={e => storeInputText('lastRegExTextSample', e.target.value)}\n                />\n\n                <div className={classes.matches}>{ReactHtmlParser(highlithedMatches)}</div>\n\n                <p>\n                    Collection of values. Could be usefull for Jira tickets numbers with expressions like:\n                    <br />\n                    <strong>issueKey in (FS-3456, WS-3213, FS-9988)</strong>\n                </p>\n\n                <ResultMonospace result={extracted} />\n\n                <Toolbar className={classes.toolbar}>\n                    <Box display=\"flex\" flexGrow={1}></Box>\n                    <CopyButton data={extracted} />\n                </Toolbar>\n            </div>\n        </>\n    );\n};\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        regularExpression: state.textInputs['lastRegEx'],\n        inputText: state.textInputs['lastRegExTextSample'],\n    };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RegExTester);\n","import { Typography } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport React from 'react';\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        wordBreak: 'break-word',\n    },\n    titleWithIcon: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    titleContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    icon: {\n        height: '40px',\n        width: '40px',\n        marginRight: theme.spacing(1),\n    },\n}));\n\ninterface Props {\n    title: string;\n    iconType: any;\n}\n\nconst FeatureTitle: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const FeatureIcon = props.iconType;\n\n    return (\n        <div className={classes.titleContainer}>\n            <div className={classes.titleWithIcon}>\n                <FeatureIcon className={classes.icon} />\n                <Typography variant=\"h5\" className={classes.title}>\n                    {props.title}\n                </Typography>\n            </div>\n        </div>\n    );\n};\n\nexport default FeatureTitle;\n","import { Button, ButtonProps, SvgIconTypeMap } from '@mui/material';\nimport { OverridableComponent } from '@mui/material/OverridableComponent';\nimport AssignmentTurnedIn from '@mui/icons-material/AssignmentTurnedIn';\nimport * as copy from 'copy-to-clipboard';\nimport React from 'react';\nimport { useToasterUpdate } from '../Toaster/ToasterProvider';\n\ntype Props = {\n    data?: string;\n    isDisabled?: boolean;\n    hoverMessage?: string;\n    feedbackMessage?: string;\n    Icon?: OverridableComponent<SvgIconTypeMap<unknown, 'svg'>>;\n} & ButtonProps;\n\nconst CopyButton: React.FC<Props> = ({\n    data,\n    isDisabled,\n    hoverMessage,\n    feedbackMessage,\n    Icon = AssignmentTurnedIn,\n    ...others\n}: Props) => {\n    const { setToasterState } = useToasterUpdate();\n\n    const handleCopy = () => {\n        if (!data) {\n            return;\n        }\n\n        const message = feedbackMessage ?? `Content copied into clipboard: ${data.substring(0, 25)} …`;\n\n        copy.default(data, { format: 'text/plain' });\n        setToasterState({ open: true, message, type: 'success', autoHideDuration: 2000 });\n    };\n\n    return (\n        <Button\n            {...others}\n            onClick={handleCopy}\n            disabled={!data || isDisabled}\n            title={hoverMessage ?? 'Copy to clipboard'}\n            variant=\"contained\"\n            color=\"primary\">\n            <Icon />\n        </Button>\n    );\n};\n\nexport default CopyButton;\n","import { TextField } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport React from 'react';\n\nconst useStyles = makeStyles(() => ({\n    result: {\n        fontFamily: 'monospace',\n        height: 'auto',\n    },\n}));\n\ninterface Props {\n    label?: string;\n    result?: string;\n    rows?: number;\n    maxRows?: number;\n}\n\nexport const ResultMonospace = ({ label, result, rows = 10, maxRows = 15 }: Props) => {\n    const classes = useStyles();\n\n    return (\n        <TextField\n            multiline\n            minRows={rows}\n            maxRows={maxRows}\n            label={label}\n            variant=\"outlined\"\n            margin=\"normal\"\n            fullWidth={true}\n            value={result}\n            InputProps={{\n                classes: {\n                    input: classes.result,\n                },\n            }}\n        />\n    );\n};\n\nexport default ResultMonospace;\n"],"sourceRoot":""}