{"version":3,"sources":["containers/PokerPlanning/message.factory.ts","containers/PokerPlanning/model.ts","containers/PokerPlanning/PokerCard.tsx","containers/PokerPlanning/styles.ts","containers/PokerPlanning/PokerOptionsForm.tsx","containers/PokerPlanning/services.ts","containers/PokerPlanning/index.tsx","components/FeatureTitle/index.tsx","components/CopyButton/index.tsx","services/string-utils.ts"],"names":["buildVoteMessage","username","value","type","payload","estimate","estimatedAtISO8601","Date","toISOString","undefined","POKER_PLANNING_RATINGS_FIBONNACI_ENHANCED","POKER_PLANNING_RATINGS_FIBONNACI","POKER_PLANNING_RATINGS_T_SHIRT_SIZES","POKER_PLANNING_RATINGS_T_SHIRT_SIZES_ENHENCED","sorterFactory","valuesArray","a","b","indexOf","CARDS_LISTING_CATEGORIES","fibonnacy","values","displayValue","slice","join","sorter","map","v","replace","DEFAULT_CARDS_LISTING_CATEGORY","DEFAULT_HOSTNAME","SOCKET_STATES","Map","WebSocket","CLOSED","OPEN","CLOSING","CONNECTING","PokerCard","isDisabled","isSelected","onClick","theme","useTheme","size","useIsWidthUp","Button","style","maxWidth","maxHeight","minWidth","minHeight","margin","spacing","variant","disabled","title","color","Typography","StyledTableCell","withStyles","body","fontSize","whiteSpace","wordBreak","TableCell","StyledTableRow","root","backgroundColor","palette","action","hover","TableRow","useStyles","makeStyles","toolbar","height","padding","marginLeft","formControl","marginRight","submitEstimate","marginTop","display","justifyContent","flexWrap","teamEstimates","tableHeader","primary","main","connect","state","lastPokerPlanningHostName","textInputs","lastPokerPlanningRoomName","lastPokerPlanningUsername","lastPokerCardsListingCategoryName","dispatch","storeInputText","name","setTextAction","socketState","classes","useParams","hostName","roomUUID","roomName","isReadyToStartSession","isNotBlank","cardsListingCategoryName","Grid","container","item","md","xs","FormControl","className","fullWidth","TextField","label","placeholder","onChange","e","target","InputProps","endAdornment","InputAdornment","position","IconButton","href","select","Object","entries","category","MenuItem","getSocketState","get","buildRouteURL","v4","buildFullRouteURL","params","document","location","split","mapStateToProps","mapDispatchToProps","props","navigate","useNavigate","showConfirmationDialog","useConfirmDialogContext","setToasterState","useToasterUpdate","socketRef","useRef","useState","setSocketState","myEstimate","setMyEstimate","postponedMessage","setPostponedMessage","isEstimatesVisible","setIsEstimatesVisible","pokerSession","setPokerSession","trim","estimates","pokerCards","filter","isNumeric","Number","estimatesSum","reduce","acc","val","average","length","estimatesAverage","Math","round","EPSILON","isEstimatesCleared","every","isUserMemberOfRoom","some","parseEstimates","isReadyToVote","isReadyToCreateNewRoom","useEffect","IS_DEV_MODE","console","info","myUserSessionEstimate","find","current","onSocketStateUpdate","onSessionUpdate","protocol","url","socket","ReconnectingWebSocket","onopen","readyState","onerror","onclose","onmessage","ev","session","JSON","parse","data","createSocket","close","sendOrPostpone","message","send","stringify","shareAsQRCode","QRCode","toDataURL","width","imgDataURL","fetch","response","blob","navigator","clipboard","write","ClipboardItem","open","autoHideDuration","error","Helmet","FeatureTitle","iconType","PockerPlanningIcon","alignItems","sx","mr","CopyButton","Icon","ShareLink","hoverMessage","feedbackMessage","updateMyEstimate","TableContainer","component","Paper","Table","TableHead","scope","align","description","onConfirm","TableBody","sort","estimateWhenDisplayON","estimateWhenDisplayOFF","buildRemoveUserMessage","titleWithIcon","titleContainer","icon","FeatureIcon","AssignmentTurnedIn","others","substring","copy","format","isBlank","str","isNaN"],"mappings":"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","file":"static/js/37.247fa341.chunk.js","sourcesContent":["import { UserEstimate, UserMessage } from './common.model';\n\nexport const buildVoteMessage = (username = '', value?: string): UserMessage<UserEstimate> => ({\n  type: 'vote',\n  payload: {\n    username,\n    estimate: value,\n    estimatedAtISO8601: value ? new Date().toISOString() : undefined,\n  },\n});\n\nexport const buildResetMessage = (): UserMessage => ({ type: 'reset' });\n\nexport const buildRemoveUserMessage = (username = ''): UserMessage<string> => ({ type: 'remove', payload: username });\n","import { UserEstimate } from './common.model';\n\nexport const POKER_PLANNING_RATINGS_FIBONNACI_ENHANCED: string[] = [\n  '?',\n  '0',\n  '0.5',\n  '1',\n  '1.5',\n  '2',\n  '2.5',\n  '3',\n  '3.5',\n  '4',\n  '4.5',\n  '5',\n  '8',\n  '13',\n  '20',\n  '40',\n  '100',\n];\n\nexport const POKER_PLANNING_RATINGS_FIBONNACI: string[] = ['?', '0', '1', '2', '3', '5', '8', '13', '20', '40', '100'];\n\nexport const POKER_PLANNING_RATINGS_T_SHIRT_SIZES: string[] = ['?', 'S', 'M', 'L', 'XL'];\n\nexport const POKER_PLANNING_RATINGS_T_SHIRT_SIZES_ENHENCED: string[] = ['?', 'XS', 'S', 'M', 'L', 'XL', 'XXL'];\n\nexport type CardsListingCategoryName = 'fibonnacy' | 'fibonnacy-variant-1' | 't-shirt' | 't-shirt-variant-1';\n\nexport type CardsListingCategory = {\n  values: string[];\n  displayValue: string;\n  sorter: (a: UserEstimate, b: UserEstimate) => number;\n};\n\ntype PokerVotesSorter = (a: UserEstimate, b: UserEstimate) => number;\nconst sorterFactory = (valuesArray: string[]): PokerVotesSorter => {\n  return (a: UserEstimate, b: UserEstimate) =>\n    valuesArray.indexOf(a.estimate ?? '?') - valuesArray.indexOf(b.estimate ?? '?');\n};\n\nexport const CARDS_LISTING_CATEGORIES: Record<CardsListingCategoryName, CardsListingCategory> = {\n  fibonnacy: {\n    values: POKER_PLANNING_RATINGS_FIBONNACI,\n    displayValue: POKER_PLANNING_RATINGS_FIBONNACI.slice(2).join(' '),\n    sorter: sorterFactory(POKER_PLANNING_RATINGS_FIBONNACI),\n  },\n  'fibonnacy-variant-1': {\n    values: POKER_PLANNING_RATINGS_FIBONNACI_ENHANCED,\n    displayValue: POKER_PLANNING_RATINGS_FIBONNACI_ENHANCED.slice(2)\n      .map(v => v.replace('0.5', '½'))\n      .map(v => v.replace('.5', '½'))\n      .join(' '),\n    sorter: sorterFactory(POKER_PLANNING_RATINGS_FIBONNACI_ENHANCED),\n  },\n  't-shirt': {\n    values: POKER_PLANNING_RATINGS_T_SHIRT_SIZES,\n    displayValue: POKER_PLANNING_RATINGS_T_SHIRT_SIZES.slice(1).join(' '),\n    sorter: sorterFactory(POKER_PLANNING_RATINGS_T_SHIRT_SIZES),\n  },\n  't-shirt-variant-1': {\n    values: POKER_PLANNING_RATINGS_T_SHIRT_SIZES_ENHENCED,\n    displayValue: POKER_PLANNING_RATINGS_T_SHIRT_SIZES_ENHENCED.slice(1).join(' '),\n    sorter: sorterFactory(POKER_PLANNING_RATINGS_T_SHIRT_SIZES_ENHENCED),\n  },\n};\n\nexport const DEFAULT_CARDS_LISTING_CATEGORY: CardsListingCategoryName = 'fibonnacy';\nexport const DEFAULT_ROOM_UUID = 'default';\nexport const DEFAULT_ROOM_NAME = 'default';\nexport const DEFAULT_HOSTNAME = 'localhost';\n\nexport type SocketState = 'open' | 'closed' | 'closing' | 'connecting';\n\nexport const SOCKET_STATES: Map<number, SocketState> = new Map([\n  [WebSocket.CLOSED, 'closed'],\n  [WebSocket.OPEN, 'open'],\n  [WebSocket.CLOSING, 'closing'],\n  [WebSocket.CONNECTING, 'connecting'],\n]);\n\nexport type EstimatesStats = {\n  values: number[];\n  estimatesSum: number;\n  estimatesAverage: number;\n  isEstimatesCleared: boolean;\n  isUserMemberOfRoom: boolean;\n};\n","import React from 'react';\n\nimport { Button, Typography, useTheme } from '@mui/material';\n\nimport { useIsWidthUp } from '../../theme';\n\ntype PokerCardType = {\n  value: string;\n  isDisabled: boolean;\n  isSelected: boolean;\n  onClick: (value: string) => void;\n};\n\nconst PokerCard: React.FC<PokerCardType> = ({ value, isDisabled, isSelected, onClick }) => {\n  const theme = useTheme();\n  const isMdUp = useIsWidthUp('md');\n  const size = isMdUp ? '70px' : '48px';\n\n  return (\n    <Button\n      style={{\n        maxWidth: size,\n        maxHeight: size,\n        minWidth: size,\n        minHeight: size,\n        margin: theme.spacing(1),\n      }}\n      variant={isSelected ? 'contained' : 'outlined'}\n      disabled={isDisabled}\n      title={`Estimate the current story point as: [${value}]`}\n      color=\"primary\"\n      onClick={() => onClick(value)}>\n      <Typography variant=\"h5\">{value}</Typography>\n    </Button>\n  );\n};\n\nexport default PokerCard;\n","import { TableCell, TableRow } from '@mui/material';\nimport { makeStyles, withStyles } from '@mui/styles';\n\nexport const StyledTableCell = withStyles(() => ({\n  body: {\n    fontSize: 14,\n    whiteSpace: 'normal',\n    wordBreak: 'break-word',\n  },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles(theme => ({\n  root: {\n    '&:nth-of-type(even)': {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}))(TableRow);\n\nexport const useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing(1),\n  },\n  toolbar: {\n    height: '100%',\n    margin: 0,\n    padding: 0,\n    '& > *': {\n      marginLeft: theme.spacing(1),\n    },\n  },\n  formControl: {\n    marginRight: theme.spacing(1),\n  },\n  submitEstimate: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n  },\n  teamEstimates: {\n    marginTop: theme.spacing(4),\n  },\n  tableHeader: {\n    backgroundColor: theme.palette.primary.main,\n  },\n}));\n","import React from 'react';\n\nimport HelpIcon from '@mui/icons-material/Help';\nimport { FormControl, Grid, IconButton, InputAdornment, MenuItem, useTheme } from '@mui/material';\nimport TextField from '@mui/material/TextField';\nimport { connect } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { Dispatch } from 'redux';\n\nimport { setTextAction } from '../../actions/text-actions';\nimport { AppState } from '../../reducers';\nimport { isNotBlank } from '../../services/string-utils';\nimport {\n  CARDS_LISTING_CATEGORIES,\n  CardsListingCategoryName,\n  DEFAULT_CARDS_LISTING_CATEGORY,\n  SocketState,\n} from './model';\nimport { useStyles } from './styles';\n\ntype PokerSettingsProps = {\n  socketState: SocketState;\n  lastPokerPlanningRoomName?: string;\n  lastPokerPlanningUsername?: string;\n  lastPokerPlanningHostName?: string;\n  lastPokerCardsListingCategoryName?: CardsListingCategoryName;\n  storeInputText: (name: string, value: string) => void;\n};\n\nconst PokerOptionsForm: React.FC<PokerSettingsProps> = ({\n  lastPokerPlanningRoomName,\n  lastPokerPlanningUsername,\n  lastPokerPlanningHostName,\n  lastPokerCardsListingCategoryName,\n  storeInputText,\n  socketState,\n}) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const { hostName, roomUUID, roomName } = useParams();\n\n  // computing\n  const isReadyToStartSession = isNotBlank(roomName) && isNotBlank(hostName) && isNotBlank(roomUUID);\n  const cardsListingCategoryName: CardsListingCategoryName = lastPokerCardsListingCategoryName\n    ? lastPokerCardsListingCategoryName\n    : DEFAULT_CARDS_LISTING_CATEGORY;\n\n  return (\n    <Grid container spacing={1}>\n      <Grid item md={4} xs={6}>\n        <FormControl className={classes.formControl} fullWidth={true}>\n          <TextField\n            label={`Serveur (channel ${socketState})`}\n            placeholder=\"Type the poker plannind hostname here\"\n            variant=\"outlined\"\n            fullWidth={true}\n            margin=\"normal\"\n            value={lastPokerPlanningHostName}\n            title={lastPokerPlanningHostName}\n            disabled={isReadyToStartSession}\n            onChange={e => storeInputText('lastPokerPlanningHostName', e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    title=\"Instruction to setup a poker planning server\"\n                    target=\"_blank\"\n                    href=\"https://github.com/amwebexpert/ws-poker-planning#wspokerplanning-server-production-deployment\">\n                    <HelpIcon />\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n          />\n        </FormControl>\n      </Grid>\n      <Grid item md={2} xs={6}>\n        <FormControl className={classes.formControl} fullWidth={true}>\n          <TextField\n            label=\"Team name\"\n            placeholder=\"Type the team name here\"\n            variant=\"outlined\"\n            fullWidth={true}\n            margin=\"normal\"\n            value={lastPokerPlanningRoomName}\n            title={lastPokerPlanningRoomName}\n            disabled={isReadyToStartSession}\n            onChange={e => storeInputText('lastPokerPlanningRoomName', e.target.value)}\n          />\n        </FormControl>\n      </Grid>\n      <Grid item md={2} xs={6}>\n        <FormControl className={classes.formControl} fullWidth={true}>\n          <TextField\n            label=\"Your name\"\n            placeholder=\"Type your name here\"\n            variant=\"outlined\"\n            fullWidth={true}\n            margin=\"normal\"\n            value={lastPokerPlanningUsername}\n            onChange={e => storeInputText('lastPokerPlanningUsername', e.target.value)}\n          />\n        </FormControl>\n      </Grid>\n      <Grid item md={4} xs={6}>\n        <FormControl className={classes.formControl} fullWidth={true}>\n          <TextField\n            select={true}\n            label=\"Poker card types\"\n            style={{ marginTop: theme.spacing(2) }}\n            variant=\"outlined\"\n            fullWidth={true}\n            title={cardsListingCategoryName}\n            value={cardsListingCategoryName}\n            onChange={e => storeInputText('lastPokerCardsListingCategoryName', e.target.value)}>\n            {Object.entries(CARDS_LISTING_CATEGORIES).map(([name, category]) => (\n              <MenuItem key={name} value={name} title={name}>\n                {category.displayValue}\n              </MenuItem>\n            ))}\n          </TextField>\n        </FormControl>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport function mapStateToProps(state: AppState) {\n  return {\n    lastPokerPlanningHostName: state.textInputs['lastPokerPlanningHostName'],\n    lastPokerPlanningRoomName: state.textInputs['lastPokerPlanningRoomName'],\n    lastPokerPlanningUsername: state.textInputs['lastPokerPlanningUsername'],\n    lastPokerCardsListingCategoryName: state.textInputs[\n      'lastPokerCardsListingCategoryName'\n    ] as CardsListingCategoryName,\n  };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PokerOptionsForm);\n","import ReconnectingWebSocket from 'reconnecting-websocket';\nimport { v4 } from 'uuid';\n\nimport { isNumeric } from '../../services/string-utils';\nimport { PokerPlanningSession, UserEstimate } from './common.model';\nimport { DEFAULT_HOSTNAME, DEFAULT_ROOM_NAME, EstimatesStats, SOCKET_STATES, SocketState } from './model';\n\ntype CreateSocketParams = {\n  hostName?: string;\n  roomUUID?: string;\n  onSocketStateUpdate: (socketState: SocketState) => void;\n  onSessionUpdate: (session: PokerPlanningSession) => void;\n};\n\nexport const createSocket = ({\n  hostName = DEFAULT_HOSTNAME,\n  roomUUID = v4(),\n  onSocketStateUpdate,\n  onSessionUpdate,\n}: CreateSocketParams): ReconnectingWebSocket => {\n  const protocol = document.location.protocol === 'https:' ? 'wss' : 'ws';\n  const url = `${protocol}://${hostName}/ws?roomUUID=${roomUUID}`;\n\n  const socket = new ReconnectingWebSocket(url);\n  socket.onopen = () => onSocketStateUpdate(getSocketState(socket.readyState));\n  socket.onerror = () => onSocketStateUpdate(getSocketState(socket.readyState));\n  socket.onclose = () => onSocketStateUpdate(getSocketState(socket.readyState));\n  socket.onmessage = (ev: MessageEvent<string>) => {\n    const session = JSON.parse(ev.data) as PokerPlanningSession;\n    onSessionUpdate(session);\n  };\n\n  return socket;\n};\n\nexport const parseEstimates = (estimates: UserEstimate[], username?: string): EstimatesStats => {\n  const values = estimates\n    .map(e => e.estimate)\n    .filter(e => !!e)\n    .filter(e => isNumeric(e))\n    .map(e => Number(e));\n  const estimatesSum = values.reduce((acc, val) => acc + Number(val), 0);\n  const average = values.length > 0 ? estimatesSum / values.length : 0;\n  const estimatesAverage = Math.round(average * 10 + Number.EPSILON) / 10;\n  const isEstimatesCleared = estimates.length > 0 && estimates.every(e => e.estimate === undefined);\n  const isUsernameProvided = !!username?.trim();\n  const isUserMemberOfRoom = isUsernameProvided && estimates.some(e => e.username === username);\n\n  return {\n    values,\n    estimatesSum,\n    estimatesAverage,\n    isEstimatesCleared,\n    isUserMemberOfRoom,\n  };\n};\n\nexport const getSocketState = (state: number): SocketState => SOCKET_STATES.get(state) ?? 'closed';\n\ntype BuildRouteURLParams = {\n  hostName?: string;\n  roomUUID?: string;\n  roomName?: string;\n};\n\nexport const buildRouteURL = ({\n  hostName = DEFAULT_HOSTNAME,\n  roomName = DEFAULT_ROOM_NAME,\n  roomUUID = v4(),\n}: BuildRouteURLParams) => `/PokerPlanning/${hostName}/${roomUUID}/${roomName}`;\n\nexport const extractSinglePageAppHostnameAndPath = () => document.location.href.split('/#/')[0];\n\nexport const buildFullRouteURL = (params: BuildRouteURLParams) =>\n  extractSinglePageAppHostnameAndPath() + '/#' + buildRouteURL(params);\n","import React, { useEffect, useRef, useState } from 'react';\n\nimport { default as RemoveEstimates, default as RemoveUser } from '@mui/icons-material/DeleteOutline';\nimport PockerPlanningIcon from '@mui/icons-material/Filter3';\nimport QRCodeIcon from '@mui/icons-material/QrCode';\nimport ShareLink from '@mui/icons-material/Share';\nimport Visibility from '@mui/icons-material/Visibility';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\nimport {\n  Grid,\n  IconButton,\n  Paper,\n  Table,\n  TableBody,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n} from '@mui/material';\nimport Button from '@mui/material/Button';\nimport QRCode from 'qrcode';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport ReconnectingWebSocket from 'reconnecting-websocket';\nimport { Dispatch } from 'redux';\n\nimport { setTextAction } from '../../actions/text-actions';\nimport { useConfirmDialogContext } from '../../components/ConfirmDialog/ConfirmDialogProvider';\nimport CopyButton from '../../components/CopyButton';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport { useToasterUpdate } from '../../components/Toaster/ToasterProvider';\nimport { AppState } from '../../reducers';\nimport { isNotBlank } from '../../services/string-utils';\nimport { IS_DEV_MODE } from '../../services/utils';\nimport { PokerPlanningSession, UserMessage } from './common.model';\nimport { buildRemoveUserMessage, buildResetMessage, buildVoteMessage } from './message.factory';\nimport {\n  CARDS_LISTING_CATEGORIES,\n  CardsListingCategory,\n  CardsListingCategoryName,\n  DEFAULT_CARDS_LISTING_CATEGORY,\n  SocketState,\n} from './model';\nimport PokerCard from './PokerCard';\nimport PokerOptionsForm from './PokerOptionsForm';\nimport { buildFullRouteURL, buildRouteURL, createSocket, parseEstimates } from './services';\nimport { StyledTableCell, StyledTableRow, useStyles } from './styles';\n\ninterface Props {\n  lastPokerPlanningRoomName?: string;\n  lastPokerPlanningUsername?: string;\n  lastPokerPlanningHostName?: string;\n  lastPokerCardsListingCategoryName?: CardsListingCategoryName;\n  storeInputText: (name: string, value: string) => void;\n}\n\nconst PokerPlanning: React.FC<Props> = (props: Props) => {\n  const classes = useStyles();\n  const navigate = useNavigate();\n  const { showConfirmationDialog } = useConfirmDialogContext();\n  const { setToasterState } = useToasterUpdate();\n\n  // component inputs\n  const { hostName, roomUUID, roomName } = useParams();\n  const {\n    lastPokerPlanningRoomName,\n    lastPokerPlanningUsername,\n    lastPokerPlanningHostName,\n    lastPokerCardsListingCategoryName,\n    storeInputText,\n  } = props;\n\n  // component state\n  const socketRef = useRef<ReconnectingWebSocket>();\n  const [socketState, setSocketState] = useState<SocketState>('closed');\n  const [myEstimate, setMyEstimate] = useState<string>();\n  const [postponedMessage, setPostponedMessage] = useState<UserMessage>();\n  const [isEstimatesVisible, setIsEstimatesVisible] = useState<boolean>(false);\n  const [pokerSession, setPokerSession] = useState<PokerPlanningSession>();\n\n  // computing\n  const title = `Poker planning ${lastPokerPlanningRoomName ?? ''}`.trim();\n  const estimates = pokerSession?.estimates ?? [];\n  const cardsListingCategoryName: CardsListingCategoryName = lastPokerCardsListingCategoryName\n    ? lastPokerCardsListingCategoryName\n    : DEFAULT_CARDS_LISTING_CATEGORY;\n  const pokerCards: CardsListingCategory = CARDS_LISTING_CATEGORIES[cardsListingCategoryName];\n  const { estimatesAverage, isEstimatesCleared, isUserMemberOfRoom } = parseEstimates(\n    estimates,\n    lastPokerPlanningUsername,\n  );\n  const isReadyToStartSession = socketRef && isNotBlank(roomName) && isNotBlank(hostName) && isNotBlank(roomUUID);\n  const isReadyToVote = isReadyToStartSession && isNotBlank(lastPokerPlanningUsername);\n  const isReadyToCreateNewRoom = isNotBlank(lastPokerPlanningHostName) && isNotBlank(lastPokerPlanningRoomName);\n\n  // keep the store in sync whenever route params are updated\n  useEffect(() => {\n    if (isReadyToStartSession) {\n      storeInputText('lastPokerPlanningRoomName', roomName ?? '');\n      storeInputText('lastPokerPlanningHostName', hostName ?? '');\n    }\n  }, [roomName, hostName, storeInputText, isReadyToStartSession]);\n\n  // update current user vote\n  useEffect(() => {\n    if (!pokerSession || !lastPokerPlanningUsername) {\n      return;\n    }\n\n    if (IS_DEV_MODE) {\n      console.info('poker session', pokerSession);\n    }\n\n    const myUserSessionEstimate = pokerSession.estimates.find(e => e.username === lastPokerPlanningUsername);\n    if (myUserSessionEstimate) {\n      setMyEstimate(myUserSessionEstimate.estimate);\n    }\n  }, [lastPokerPlanningUsername, pokerSession]);\n\n  useEffect(() => {\n    if (!isReadyToStartSession) {\n      return;\n    }\n\n    socketRef.current = createSocket({\n      hostName,\n      roomUUID,\n      onSessionUpdate: setPokerSession,\n      onSocketStateUpdate: setSocketState,\n    });\n\n    // socket cleanup whenever component unmount\n    return () => socketRef.current?.close();\n  }, [socketRef, isReadyToStartSession, hostName, roomUUID]);\n\n  const handleCreateNewRoom = () => {\n    const url = buildRouteURL({ hostName: lastPokerPlanningHostName, roomName: lastPokerPlanningRoomName });\n    navigate(url, { replace: true });\n  };\n\n  useEffect(() => {\n    if (isEstimatesCleared) {\n      setIsEstimatesVisible(false);\n      setMyEstimate(undefined);\n    }\n  }, [isEstimatesCleared]);\n\n  const updateMyEstimate = (value?: string) => {\n    if (value !== myEstimate) {\n      setMyEstimate(value);\n      sendOrPostpone(buildVoteMessage(lastPokerPlanningUsername, value));\n    } else {\n      setMyEstimate(undefined); // user is un-voting\n      sendOrPostpone(buildVoteMessage(lastPokerPlanningUsername));\n    }\n  };\n\n  const sendOrPostpone = (message: UserMessage) => {\n    if (socketRef.current && socketState === 'open') {\n      socketRef.current.send(JSON.stringify(message));\n    } else {\n      setPostponedMessage(message);\n    }\n  };\n\n  const handleClearAllVotes = () =>\n    showConfirmationDialog({\n      title: 'Confirmation',\n      description: 'Are you sure you want to delete all votes?',\n      onConfirm: () => sendOrPostpone(buildResetMessage()),\n    });\n\n  // send delayed message (if any)\n  useEffect(() => {\n    if (socketRef.current && socketState === 'open' && postponedMessage) {\n      socketRef.current.send(JSON.stringify(postponedMessage));\n      setPostponedMessage(undefined);\n    }\n  }, [postponedMessage, socketState]);\n\n  const shareAsQRCode = async () => {\n    try {\n      const data = buildFullRouteURL({ hostName, roomUUID, roomName });\n      const imgDataURL = await QRCode.toDataURL(data, { type: 'image/png', width: 200 });\n      const response = await fetch(imgDataURL);\n      const blob = await response.blob();\n      // TODO We may have to do this workaround for Safari: https://stackoverflow.com/a/68241503/704681\n      await navigator.clipboard.write([new ClipboardItem({ 'image/png': blob })]);\n      setToasterState({ open: true, message: 'Image copied', type: 'success', autoHideDuration: 2000 });\n    } catch (e) {\n      console.error(e);\n      const errorMessage = `Unexpected copy error, see detail on console`;\n      setToasterState({ open: true, message: errorMessage, type: 'warning', autoHideDuration: 2000 });\n    }\n  };\n\n  return (\n    <>\n      <Helmet title={title} />\n\n      <div className={classes.root}>\n        <FeatureTitle iconType={PockerPlanningIcon} title={title} />\n\n        <Grid container>\n          <Grid item md={9} xs={12}>\n            <PokerOptionsForm socketState={socketState} />\n          </Grid>\n          <Grid item md={3} xs={12}>\n            <Grid container justifyContent=\"flex-end\" alignItems=\"center\" className={classes.toolbar}>\n              <Button\n                sx={{ mr: 1 }}\n                variant=\"contained\"\n                title=\"Register the team and start planning in a new room\"\n                color=\"primary\"\n                disabled={!isReadyToCreateNewRoom}\n                onClick={handleCreateNewRoom}>\n                New\n              </Button>\n              <Button\n                sx={{ mr: 1 }}\n                variant=\"contained\"\n                title=\"Enter existing room\"\n                color=\"primary\"\n                disabled={isUserMemberOfRoom || !isReadyToVote}\n                onClick={() => sendOrPostpone(buildVoteMessage(lastPokerPlanningUsername))}>\n                Join\n              </Button>\n              <CopyButton\n                sx={{ mr: 1 }}\n                isDisabled={!isReadyToStartSession}\n                data={buildFullRouteURL({ hostName, roomUUID, roomName })}\n                Icon={ShareLink}\n                hoverMessage=\"Copy link to clipboard for sharing\"\n                feedbackMessage=\"Link copied to clipboard, you can now share to all members\"\n              />\n              <Button\n                variant=\"contained\"\n                title=\"Copy QRCode for sharing\"\n                disabled={!isReadyToStartSession}\n                onClick={shareAsQRCode}\n                color=\"primary\">\n                <QRCodeIcon />\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <div className={classes.submitEstimate}>\n          {pokerCards.values.map(value => (\n            <PokerCard\n              key={value}\n              isDisabled={!isReadyToVote}\n              isSelected={myEstimate === value}\n              value={value}\n              onClick={() => updateMyEstimate(value)}\n            />\n          ))}\n        </div>\n\n        <TableContainer component={Paper} className={classes.teamEstimates}>\n          <Table size=\"small\">\n            <TableHead className={classes.tableHeader}>\n              <TableRow>\n                <StyledTableCell component=\"th\" scope=\"row\" width={30}></StyledTableCell>\n                <StyledTableCell component=\"th\" scope=\"row\">\n                  Team member\n                </StyledTableCell>\n                <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                  Points\n                  <IconButton\n                    title=\"Toggle story points visibility\"\n                    disabled={!isUserMemberOfRoom}\n                    onClick={() => setIsEstimatesVisible(v => !v)}>\n                    {isEstimatesVisible ? <VisibilityOff /> : <Visibility />}\n                  </IconButton>\n                  <IconButton onClick={handleClearAllVotes} title=\"Clear all votes\" disabled={!isUserMemberOfRoom}>\n                    <RemoveEstimates />\n                  </IconButton>\n                </StyledTableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {estimates.sort(pokerCards.sorter).map(({ username, estimate }) => {\n                const estimateWhenDisplayON = estimate ?? '…';\n                const estimateWhenDisplayOFF = estimate ? '✔' : '…';\n                return (\n                  <StyledTableRow key={username}>\n                    <StyledTableCell width={30}>\n                      <IconButton\n                        disabled={!isUserMemberOfRoom}\n                        onClick={() => sendOrPostpone(buildRemoveUserMessage(username))}\n                        title={`Remove user \"${username}\"`}>\n                        <RemoveUser />\n                      </IconButton>\n                    </StyledTableCell>\n                    <StyledTableCell>{username}</StyledTableCell>\n                    <StyledTableCell align=\"center\">\n                      {isEstimatesVisible ? estimateWhenDisplayON : estimateWhenDisplayOFF}\n                    </StyledTableCell>\n                  </StyledTableRow>\n                );\n              })}\n              <StyledTableRow key=\"average\">\n                <StyledTableCell width={30}></StyledTableCell>\n                <StyledTableCell>\n                  <Typography>Story points average</Typography>\n                </StyledTableCell>\n                <StyledTableCell align=\"center\">\n                  <Typography>{isEstimatesVisible ? estimatesAverage : ''}</Typography>\n                </StyledTableCell>\n              </StyledTableRow>\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </div>\n    </>\n  );\n};\n\nexport function mapStateToProps(state: AppState) {\n  return {\n    lastPokerPlanningHostName: state.textInputs['lastPokerPlanningHostName'],\n    lastPokerPlanningRoomName: state.textInputs['lastPokerPlanningRoomName'],\n    lastPokerPlanningUsername: state.textInputs['lastPokerPlanningUsername'],\n    lastPokerCardsListingCategoryName: state.textInputs[\n      'lastPokerCardsListingCategoryName'\n    ] as CardsListingCategoryName,\n  };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PokerPlanning);\n","import React, { ElementType } from 'react';\n\nimport { Typography } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles(theme => ({\n  title: {\n    wordBreak: 'break-word',\n  },\n  titleWithIcon: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  titleContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  icon: {\n    height: '40px',\n    width: '40px',\n    marginRight: theme.spacing(1),\n  },\n}));\n\ninterface Props {\n  title: string;\n  iconType: ElementType;\n}\n\nconst FeatureTitle: React.FC<Props> = ({ title, iconType: FeatureIcon }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.titleContainer}>\n      <div className={classes.titleWithIcon}>\n        <FeatureIcon className={classes.icon} />\n        <Typography variant=\"h5\" className={classes.title}>\n          {title}\n        </Typography>\n      </div>\n    </div>\n  );\n};\n\nexport default FeatureTitle;\n","import React from 'react';\n\nimport AssignmentTurnedIn from '@mui/icons-material/AssignmentTurnedIn';\nimport { Button, ButtonProps, SvgIconTypeMap } from '@mui/material';\nimport { OverridableComponent } from '@mui/material/OverridableComponent';\nimport * as copy from 'copy-to-clipboard';\n\nimport { useToasterUpdate } from '../Toaster/ToasterProvider';\n\ntype Props = {\n  data?: string;\n  isDisabled?: boolean;\n  hoverMessage?: string;\n  feedbackMessage?: string;\n  Icon?: OverridableComponent<SvgIconTypeMap<unknown, 'svg'>>;\n} & ButtonProps;\n\nconst CopyButton: React.FC<Props> = ({\n  data,\n  isDisabled,\n  hoverMessage,\n  feedbackMessage,\n  Icon = AssignmentTurnedIn,\n  ...others\n}: Props) => {\n  const { setToasterState } = useToasterUpdate();\n\n  const handleCopy = () => {\n    if (!data) {\n      return;\n    }\n\n    const message = feedbackMessage ?? `Content copied into clipboard: ${data.substring(0, 25)} …`;\n\n    copy.default(data, { format: 'text/plain' });\n    setToasterState({ open: true, message, type: 'success', autoHideDuration: 2000 });\n  };\n\n  return (\n    <Button\n      {...others}\n      onClick={handleCopy}\n      disabled={!data || isDisabled}\n      title={hoverMessage ?? 'Copy to clipboard'}\n      variant=\"contained\"\n      color=\"primary\">\n      <Icon />\n    </Button>\n  );\n};\n\nexport default CopyButton;\n","export function isBlank(str: string | undefined | null) {\n  if (!str || str.trim().length === 0) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function isNotBlank(str: string | undefined | null) {\n  return !isBlank(str);\n}\n\nexport const isNumeric = (val?: string): boolean => !isNaN(Number(val));\n"],"sourceRoot":""}