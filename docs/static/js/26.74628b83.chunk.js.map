{"version":3,"sources":["containers/ImageOCR/index.tsx","components/FeatureTitle/index.tsx","components/CopyButton/index.tsx","components/Spinner/Spinner.tsx","containers/ImageOCR/services.ts","containers/ImageOCR/styled.ts"],"names":["INITIAL_WORKER_STATUS","workerId","jobId","status","progress","ImageOCR","title","classes","useStyles","isMdUp","useIsWidthUp","setToasterState","useToasterUpdate","React","useState","language","setLanguage","workerStatus","setWorkerStatus","imgDataURL","setImgDataURL","imgExtractedText","setImgExtractedText","logger","onPasteFromClipboard","e","clipboardData","originalEvent","clipboard","services","items","ev","target","result","useEffect","document","onpaste","removeEventListener","className","root","iconType","OCRIcon","noValidate","autoComplete","form","formControl","select","label","id","style","width","value","autoFocus","onChange","display","alignItems","justifyContent","imageSelector","type","color","accept","file","reader","FileReader","onload","readAsDataURL","onFileSelected","files","htmlFor","variant","component","imageResizer","defaultSize","height","src","alt","image","endIcon","onClick","event","preventDefault","active","startsWith","fullWidth","margin","multiline","minRows","toolbar","flexGrow","data","sx","mr","imageBuffer","Buffer","from","split","then","open","message","autoHideDuration","disabled","makeStyles","theme","wordBreak","titleWithIcon","titleContainer","icon","marginRight","spacing","FeatureTitle","props","FeatureIcon","CopyButton","isDisabled","hoverMessage","feedbackMessage","Icon","AssignmentTurnedIn","others","substring","copy","format","background","Spinner","classNamePrefix","spinner","children","clipboardToDataURL","onLoad","i","length","item","getAsFile","processOCR","onCompleted","worker","createWorker","load","loadLanguage","initialize","recognize","text","terminate","marginTop","border","minWidth","textAlign","padding","marginLeft","formatted","wordWrap"],"mappings":"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","file":"static/js/26.74628b83.chunk.js","sourcesContent":["import React from 'react';\n\nimport {\n    Box,\n    Card,\n    CardContent,\n    FormControl,\n    InputLabel,\n    LinearProgress,\n    MenuItem,\n    Select,\n    TextField,\n    Toolbar,\n    Typography,\n} from '@mui/material';\nimport Button from '@mui/material/Button';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport OCRIcon from '@mui/icons-material/Scanner';\nimport PhotoCameraIcon from '@mui/icons-material/PhotoCamera';\n\nimport { Resizable } from 're-resizable';\n\nimport FeatureTitle from '../../components/FeatureTitle';\nimport * as services from './services';\nimport { useToasterUpdate } from '../../components/Toaster/ToasterProvider';\nimport { useStyles, imageResizer } from './styled';\nimport { Spinner } from '../../components/Spinner/Spinner';\nimport CopyButton from '../../components/CopyButton';\nimport { Helmet } from 'react-helmet';\nimport { useIsWidthUp } from '../../theme';\n\ninterface WorkerStatus {\n    workerId: string;\n    jobId: string;\n    status: string;\n    progress: number;\n}\n\nconst INITIAL_WORKER_STATUS: WorkerStatus = {\n    workerId: '',\n    jobId: '',\n    status: '',\n    progress: 0,\n};\n\nconst ImageOCR: React.FC = () => {\n    const title = 'Image OCR (text extraction)';\n    const classes = useStyles();\n    const isMdUp = useIsWidthUp('md');\n    const { setToasterState } = useToasterUpdate();\n    const [language, setLanguage] = React.useState('eng');\n    const [workerStatus, setWorkerStatus] = React.useState<WorkerStatus>(INITIAL_WORKER_STATUS);\n    const [imgDataURL, setImgDataURL] = React.useState('');\n    const [imgExtractedText, setImgExtractedText] = React.useState('');\n\n    function handleClear(event: any) {\n        event.preventDefault();\n        setWorkerStatus(INITIAL_WORKER_STATUS);\n        setImgDataURL('');\n        setImgExtractedText('');\n    }\n\n    function handleProcess(event: any) {\n        event.preventDefault();\n        if (!imgDataURL) {\n            setToasterState({\n                open: true,\n                message: 'There is no image to process',\n                type: 'error',\n                autoHideDuration: 2000,\n            });\n            return;\n        }\n\n        setImgExtractedText('Processing the image, please wait…');\n\n        const imageBuffer = Buffer.from(imgDataURL.split(',')[1], 'base64');\n        services.processOCR(language, imageBuffer, logger, setImgExtractedText).then();\n    }\n\n    function logger(workerStatus: WorkerStatus) {\n        setWorkerStatus(workerStatus);\n        setImgExtractedText(`Processing the image\\n\\t → ${workerStatus.status}…`);\n    }\n\n    function onPasteFromClipboard(e: any) {\n        const clipboardData = e.clipboardData || e.originalEvent.clipboardData || e.originalEvent.clipboard;\n        services.clipboardToDataURL(clipboardData.items, (ev: ProgressEvent<FileReader>) =>\n            setImgDataURL(ev.target!.result as string),\n        );\n    }\n\n    function onFileSelected(file: File) {\n        const reader = new FileReader();\n        reader.onload = (ev: ProgressEvent<FileReader>) => setImgDataURL(ev.target!.result as string);\n        reader.readAsDataURL(file);\n    }\n\n    React.useEffect(() => {\n        document.onpaste = onPasteFromClipboard;\n        return () => {\n            document.removeEventListener('onpaste', onPasteFromClipboard);\n        };\n    }, []);\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={OCRIcon} title={title} />\n\n                <form noValidate autoComplete=\"off\" className={classes.form}>\n                    <FormControl className={classes.formControl}>\n                        <TextField\n                            select={true}\n                            label=\"Image language\"\n                            id=\"language\"\n                            style={{ width: 160 }}\n                            value={language}\n                            autoFocus={isMdUp}\n                            onChange={(e: any) => setLanguage(e.target.value)}>\n                            {/**\n                             * TODO: Add all Tesseract.js supported languages:\n                             * https://tesseract-ocr.github.io/tessdoc/Data-Files#data-files-for-version-400-november-29-2016\n                             */}\n                            <MenuItem value=\"eng\">English</MenuItem>\n                            <MenuItem value=\"fra\">French</MenuItem>\n                        </TextField>\n                    </FormControl>\n                </form>\n\n                <Card>\n                    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" className={classes.imageSelector}>\n                        {!imgDataURL && (\n                            <div>\n                                <Typography>paste image from clipboard</Typography>\n                                <Typography>or select a file</Typography>\n                                <input\n                                    type=\"file\"\n                                    color=\"primary\"\n                                    accept=\"image/*\"\n                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                                        onFileSelected(e.target.files![0])\n                                    }\n                                    id=\"icon-button-file\"\n                                    style={{ display: 'none' }}\n                                />\n                                <label htmlFor=\"icon-button-file\">\n                                    <Button variant=\"contained\" component=\"span\" color=\"primary\">\n                                        <PhotoCameraIcon />\n                                    </Button>\n                                </label>\n                            </div>\n                        )}\n                        {imgDataURL && (\n                            <Resizable style={imageResizer} defaultSize={{ width: 300, height: '100%' }}>\n                                <img src={imgDataURL} alt=\"Clipboard content\" className={classes.image} />\n                            </Resizable>\n                        )}\n                    </Box>\n                    {imgDataURL && (\n                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                            <Button endIcon={<DeleteIcon />} variant=\"contained\" color=\"primary\" onClick={handleClear}>\n                                Clear\n                            </Button>\n                        </Box>\n                    )}\n                    <CardContent>\n                        <Spinner active={imgExtractedText.startsWith('Processing')}>\n                            <TextField\n                                label=\"Extracted text\"\n                                fullWidth\n                                value={imgExtractedText}\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                multiline\n                                minRows=\"8\"\n                            />\n                        </Spinner>\n                        <LinearProgress variant=\"determinate\" value={workerStatus.progress * 100} />\n                        <Toolbar className={classes.toolbar}>\n                            <Box display=\"flex\" flexGrow={1}></Box>\n                            <CopyButton data={imgExtractedText} sx={{ mr: 1 }} />\n                            <Button\n                                variant=\"contained\"\n                                title=\"Run optical caracters recognition process to extract text\"\n                                color=\"primary\"\n                                onClick={handleProcess}\n                                disabled={!imgDataURL}\n                                endIcon={<OCRIcon />}>\n                                Run\n                            </Button>\n                        </Toolbar>\n                    </CardContent>\n                </Card>\n            </div>\n        </>\n    );\n};\n\nexport default ImageOCR;\n","import { Typography } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport React from 'react';\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        wordBreak: 'break-word',\n    },\n    titleWithIcon: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    titleContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    icon: {\n        height: '40px',\n        width: '40px',\n        marginRight: theme.spacing(1),\n    },\n}));\n\ninterface Props {\n    title: string;\n    iconType: any;\n}\n\nconst FeatureTitle: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const FeatureIcon = props.iconType;\n\n    return (\n        <div className={classes.titleContainer}>\n            <div className={classes.titleWithIcon}>\n                <FeatureIcon className={classes.icon} />\n                <Typography variant=\"h5\" className={classes.title}>\n                    {props.title}\n                </Typography>\n            </div>\n        </div>\n    );\n};\n\nexport default FeatureTitle;\n","import { Button, ButtonProps, SvgIconTypeMap } from '@mui/material';\nimport { OverridableComponent } from '@mui/material/OverridableComponent';\nimport AssignmentTurnedIn from '@mui/icons-material/AssignmentTurnedIn';\nimport * as copy from 'copy-to-clipboard';\nimport React from 'react';\nimport { useToasterUpdate } from '../Toaster/ToasterProvider';\n\ntype Props = {\n    data?: string;\n    isDisabled?: boolean;\n    hoverMessage?: string;\n    feedbackMessage?: string;\n    Icon?: OverridableComponent<SvgIconTypeMap<unknown, 'svg'>>;\n} & ButtonProps;\n\nconst CopyButton: React.FC<Props> = ({\n    data,\n    isDisabled,\n    hoverMessage,\n    feedbackMessage,\n    Icon = AssignmentTurnedIn,\n    ...others\n}: Props) => {\n    const { setToasterState } = useToasterUpdate();\n\n    const handleCopy = () => {\n        if (!data) {\n            return;\n        }\n\n        const message = feedbackMessage ?? `Content copied into clipboard: ${data.substring(0, 25)} …`;\n\n        copy.default(data, { format: 'text/plain' });\n        setToasterState({ open: true, message, type: 'success', autoHideDuration: 2000 });\n    };\n\n    return (\n        <Button\n            {...others}\n            onClick={handleCopy}\n            disabled={!data || isDisabled}\n            title={hoverMessage ?? 'Copy to clipboard'}\n            variant=\"contained\"\n            color=\"primary\">\n            <Icon />\n        </Button>\n    );\n};\n\nexport default CopyButton;\n","import React from 'react';\n\nimport { makeStyles } from '@mui/styles';\n\nimport LoadingOverlay from 'react-loading-overlay';\nimport ScaleLoader from 'react-spinners/ScaleLoader';\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        '& .spinner_overlay': {\n            background: 'rgba(0, 0, 0, 0.3)',\n        },\n    },\n}));\n\ninterface Props {\n    active: boolean;\n    children: any;\n}\n\nexport const Spinner: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n\n    return (\n        <LoadingOverlay\n            classNamePrefix=\"spinner_\"\n            className={classes.root}\n            active={props.active}\n            spinner={<ScaleLoader color=\"#bf3a2b\" />}>\n            {props.children}\n        </LoadingOverlay>\n    );\n};\n","import { createWorker } from 'tesseract.js';\n\nexport function clipboardToDataURL(items: DataTransferItemList, onLoad: (ev: ProgressEvent<FileReader>) => void): void {\n    if (!items) {\n        return;\n    }\n\n    for (let i = 0; i < items.length; i++) {\n        const item: DataTransferItem = items[i];\n        if (item.type.startsWith('image')) {\n            const reader = new FileReader();\n            reader.onload = onLoad;\n            reader.readAsDataURL(item.getAsFile() as Blob);\n            break;\n        }\n    }\n}\n\nexport async function processOCR(\n    language: string,\n    imageBuffer: Buffer,\n    logger: (log: any) => void,\n    onCompleted: (text: string) => void,\n) {\n    const worker = createWorker({ logger });\n    await worker.load();\n    await worker.loadLanguage(language);\n    await worker.initialize(language);\n\n    const result = await worker.recognize(imageBuffer);\n    onCompleted(result.data.text);\n\n    await worker.terminate();\n}\n","import { makeStyles } from '@mui/styles';\n\nexport const imageResizer = {\n    marginTop: 10,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    border: 'solid 1px blue',\n};\n\nexport const useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    form: {\n        marginTop: theme.spacing(2),\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    image: {\n        width: '100%',\n    },\n    imageSelector: {\n        margin: theme.spacing(2),\n        textAlign: 'center',\n    },\n    toolbar: {\n        margin: 0,\n        padding: 0,\n        '& > *': {\n            marginLeft: theme.spacing(1),\n        },\n    },\n    formatted: {\n        padding: theme.spacing(1),\n        border: '1px solid grey',\n        wordWrap: 'break-word',\n        height: 116,\n    },\n}));\n"],"sourceRoot":""}