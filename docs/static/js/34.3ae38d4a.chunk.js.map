{"version":3,"sources":["containers/ImageOCR/services.ts","containers/ImageOCR/styled.ts","containers/ImageOCR/index.tsx","components/FeatureTitle/index.tsx","components/CopyButton/index.tsx","components/Spinner/Spinner.tsx"],"names":["language","imageBuffer","logger","onCompleted","worker","createWorker","load","loadLanguage","initialize","recognize","result","data","text","terminate","imageResizer","marginTop","display","alignItems","justifyContent","border","useStyles","makeStyles","theme","root","margin","spacing","form","formControl","minWidth","image","width","imageSelector","textAlign","toolbar","padding","marginLeft","formatted","wordWrap","height","INITIAL_WORKER_STATUS","workerId","jobId","status","progress","ImageOCR","title","classes","isMdUp","useIsWidthUp","setToasterState","useToasterUpdate","React","useState","setLanguage","workerStatus","setWorkerStatus","imgDataURL","setImgDataURL","imgExtractedText","setImgExtractedText","onPasteFromClipboard","e","items","onLoad","i","length","item","type","startsWith","reader","FileReader","onload","readAsDataURL","getAsFile","services","clipboardData","originalEvent","clipboard","ev","target","useEffect","document","onpaste","removeEventListener","Helmet","className","FeatureTitle","iconType","OCRIcon","noValidate","autoComplete","FormControl","TextField","select","label","id","style","value","autoFocus","onChange","MenuItem","Card","Box","Typography","color","accept","file","onFileSelected","files","htmlFor","Button","variant","component","defaultSize","src","alt","endIcon","onClick","event","preventDefault","CardContent","Spinner","active","fullWidth","multiline","minRows","LinearProgress","Toolbar","flexGrow","CopyButton","sx","mr","Buffer","from","split","then","open","message","autoHideDuration","disabled","wordBreak","titleWithIcon","titleContainer","icon","marginRight","FeatureIcon","isDisabled","hoverMessage","feedbackMessage","Icon","AssignmentTurnedIn","others","substring","copy","format","background","props","classNamePrefix","spinner","children"],"mappings":"wYAoCC,sDAhBM,WACLA,EACAC,EAEAC,EACAC,GAAmC,mFAEI,OAAjCC,EAASC,uBAAa,CAAEH,WAAU,EAAD,OACjCE,EAAOE,OAAO,KAAD,kBACbF,EAAOG,aAAaP,GAAU,KAAD,kBAC7BI,EAAOI,WAAWR,GAAU,KAAD,kBAEZI,EAAOK,UAAUR,GAAa,KAAD,EACpB,OADxBS,EAAM,OACZP,EAAYO,EAAOC,KAAKC,MAAM,UAExBR,EAAOS,YAAY,KAAD,wCACzB,sB,aClCYC,EAAe,CAC1BC,UAAW,GACXC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,OAAQ,kBAGGC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CAC5CC,KAAM,CACJC,OAAQF,EAAMG,QAAQ,IAExBC,KAAM,CACJX,UAAWO,EAAMG,QAAQ,IAE3BE,YAAa,CACXH,OAAQF,EAAMG,QAAQ,GACtBG,SAAU,KAEZC,MAAO,CACLC,MAAO,QAETC,cAAe,CACbP,OAAQF,EAAMG,QAAQ,GACtBO,UAAW,UAEbC,QAAS,CACPT,OAAQ,EACRU,QAAS,EACT,QAAS,CACPC,WAAYb,EAAMG,QAAQ,KAG9BW,UAAW,CACTF,QAASZ,EAAMG,QAAQ,GACvBN,OAAQ,iBACRkB,SAAU,aACVC,OAAQ,KAEX,ICJKC,EAAsC,CAC1CC,SAAU,GACVC,MAAO,GACPC,OAAQ,GACRC,SAAU,GAiKGC,UA9JY,WACzB,IAAMC,EAAQ,8BACRC,EAAU1B,IACV2B,EAASC,YAAa,MACpBC,EAAoBC,cAApBD,gBACR,EAAgCE,IAAMC,SAAS,OAAM,mBAA9CpD,EAAQ,KAAEqD,EAAW,KAC5B,EAAwCF,IAAMC,SAAuBb,GAAsB,mBAApFe,EAAY,KAAEC,EAAe,KACpC,EAAoCJ,IAAMC,SAAS,IAAG,mBAA/CI,EAAU,KAAEC,EAAa,KAChC,EAAgDN,IAAMC,SAAS,IAAG,mBAA3DM,EAAgB,KAAEC,EAAmB,KA2B5C,SAASzD,EAAOoD,GACdC,EAAgBD,GAChBK,EAAoB,mCAAD,OAA+BL,EAAaZ,OAAM,UACvE,CAGA,SAASkB,EAAqBC,IFjFzB,SAA4BC,EAA6BC,GAC9D,GAAKD,EAIL,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAAK,CACrC,IAAME,EAAyBJ,EAAME,GACrC,GAAIE,EAAKC,KAAKC,WAAW,SAAU,CACjC,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAASR,EAChBM,EAAOG,cAAcN,EAAKO,aAC1B,KACF,CACF,CACF,CEqEIC,EADsBb,EAAEc,eAAiBd,EAAEe,cAAcD,eAAiBd,EAAEe,cAAcC,WAChDf,OAAO,SAACgB,GAA6B,aAC7ErB,EAAuB,QAAV,EAACqB,EAAGC,cAAM,aAAT,EAAWrE,OAAiB,GAE9C,CAmBA,OAPAyC,IAAM6B,WAAU,WAEd,OADAC,SAASC,QAAUtB,EACZ,WACLqB,SAASE,oBAAoB,UAAWvB,EAC1C,CACF,GAAG,IAGD,oCACE,kBAACwB,EAAA,EAAM,CAACvC,MAAOA,IACf,yBAAKwC,UAAWvC,EAAQvB,MACtB,kBAAC+D,EAAA,EAAY,CAACC,SAAUC,IAAS3C,MAAOA,IAExC,0BAAM4C,YAAU,EAACC,aAAa,MAAML,UAAWvC,EAAQpB,MACrD,kBAACiE,EAAA,EAAW,CAACN,UAAWvC,EAAQnB,aAC9B,kBAACiE,EAAA,EAAS,CACRC,QAAQ,EACRC,MAAM,iBACNC,GAAG,WACHC,MAAO,CAAElE,MAAO,KAChBmE,MAAOjG,EACPkG,UAAWnD,EACXoD,SAAU,SAAAtC,GAAC,OAAIR,EAAYQ,EAAEkB,OAAOkB,MAAM,GAK1C,kBAACG,EAAA,EAAQ,CAACH,MAAM,OAAK,WACrB,kBAACG,EAAA,EAAQ,CAACH,MAAM,OAAK,aAK3B,kBAACI,EAAA,EAAI,KACH,kBAACC,EAAA,EAAG,CAACtF,QAAQ,OAAOC,WAAW,SAASC,eAAe,SAASmE,UAAWvC,EAAQf,gBAC/EyB,GACA,6BACE,kBAAC+C,EAAA,EAAU,mCACX,kBAACA,EAAA,EAAU,yBACX,2BACEpC,KAAK,OACLqC,MAAM,UACNC,OAAO,UACPN,SAAU,SAACtC,GAAsC,aArDjE,SAAwB6C,GACtB,GAAKA,EAAL,CAIA,IAAMrC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACO,GAA6B,aAAKrB,EAAuB,QAAV,EAACqB,EAAGC,cAAM,aAAT,EAAWrE,OAAkB,EAC9F2D,EAAOG,cAAckC,EAJrB,CAKF,CA6CsEC,CAA6B,QAAf,EAAC9C,EAAEkB,OAAO6B,aAAK,aAAd,EAAiB,GAAG,EACzFb,GAAG,mBACHC,MAAO,CAAEhF,QAAS,UAEpB,2BAAO6F,QAAQ,oBACb,kBAACC,EAAA,EAAM,CAACC,QAAQ,YAAYC,UAAU,OAAOR,MAAM,WACjD,kBAAC,IAAe,SAKvBhD,GACC,kBAAC,IAAS,CAACwC,MAAOlF,EAAcmG,YAAa,CAAEnF,MAAO,IAAKQ,OAAQ,SACjE,yBAAK4E,IAAK1D,EAAY2D,IAAI,oBAAoB9B,UAAWvC,EAAQjB,UAItE2B,GACC,kBAAC8C,EAAA,EAAG,CAACtF,QAAQ,OAAOC,WAAW,SAASC,eAAe,UACrD,kBAAC4F,EAAA,EAAM,CAACM,QAAS,kBAAC,IAAU,MAAKL,QAAQ,YAAYP,MAAM,UAAUa,QA9GjF,SAAqBC,GACnBA,EAAMC,iBACNhE,EAAgBhB,GAChBkB,EAAc,IACdE,EAAoB,GACtB,GAyGsG,UAK9F,kBAAC6D,EAAA,EAAW,KACV,kBAACC,EAAA,EAAO,CAACC,OAAQhE,EAAiBU,WAAW,eAC3C,kBAACwB,EAAA,EAAS,CACRE,MAAM,iBACN6B,WAAS,EACT1B,MAAOvC,EACPlC,OAAO,SACPuF,QAAQ,WACRa,WAAS,EACTC,QAAQ,OAGZ,kBAACC,EAAA,EAAc,CAACf,QAAQ,cAAcd,MAA+B,IAAxB3C,EAAaX,WAC1D,kBAACoF,EAAA,EAAO,CAAC1C,UAAWvC,EAAQb,SAC1B,kBAACqE,EAAA,EAAG,CAACtF,QAAQ,OAAOgH,SAAU,IAC9B,kBAACC,EAAA,EAAU,CAACtH,KAAM+C,EAAkBwE,GAAI,CAAEC,GAAI,KAC9C,kBAACrB,EAAA,EAAM,CACLC,QAAQ,YACRlE,MAAM,4DACN2D,MAAM,UACNa,QAhId,SAAuBC,GAErB,GADAA,EAAMC,iBACD/D,EAAL,CAUAG,EAAoB,2CAEpB,IAAM1D,EAAcmI,SAAOC,KAAK7E,EAAW8E,MAAM,KAAK,GAAI,WFvDvD,SAA0B,EAAD,uCEwD5B5D,CAAoB1E,EAAUC,EAAaC,EAAQyD,GAAqB4E,MALxE,MAPEtF,EAAgB,CACduF,MAAM,EACNC,QAAS,+BACTtE,KAAM,QACNuE,iBAAkB,KASxB,EAiHcC,UAAWnF,EACX4D,QAAS,kBAAC,IAAO,OAAI,WASrC,C,mCCxMA,qCAKMhG,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCuB,MAAO,CACL+F,UAAW,cAEbC,cAAe,CACb7H,QAAS,OACTC,WAAY,UAEd6H,eAAgB,CACd9H,QAAS,OACTE,eAAgB,UAElB6H,KAAM,CACJzG,OAAQ,OACRR,MAAO,OACPkH,YAAa1H,EAAMG,QAAQ,IAE9B,IAsBc6D,IAfuB,SAAH,GAA0C,IAApCzC,EAAK,EAALA,MAAiBoG,EAAW,EAArB1D,SACxCzC,EAAU1B,IAEhB,OACE,yBAAKiE,UAAWvC,EAAQgG,gBACtB,yBAAKzD,UAAWvC,EAAQ+F,eACtB,kBAACI,EAAW,CAAC5D,UAAWvC,EAAQiG,OAChC,kBAAC,IAAU,CAAChC,QAAQ,KAAK1B,UAAWvC,EAAQD,OACzCA,IAKX,C,sLCSeoF,IAlCqB,SAAH,GAOnB,IANZtH,EAAI,EAAJA,KACAuI,EAAU,EAAVA,WACAC,EAAY,EAAZA,aACAC,EAAe,EAAfA,gBAAgB,EAAD,EACfC,YAAI,MAAGC,IAAkB,EACtBC,EAAM,iBAEDtG,EAAoBC,cAApBD,gBAaR,OACE,kBAAC,IAAM,iBACDsG,EAAM,CACVlC,QAde,WACjB,GAAK1G,EAAL,CAIA,IAAM8H,EAAyB,OAAfW,QAAe,IAAfA,IAAe,yCAAsCzI,EAAK6I,UAAU,EAAG,IAAG,WAE1FC,IAAa9I,EAAM,CAAE+I,OAAQ,eAC7BzG,EAAgB,CAAEuF,MAAM,EAAMC,UAAStE,KAAM,UAAWuE,iBAAkB,KAL1E,CAMF,EAMIC,UAAWhI,GAAQuI,EACnBrG,MAAmB,OAAZsG,QAAY,IAAZA,IAAgB,oBACvBpC,QAAQ,YACRP,MAAM,YACN,kBAAC6C,EAAI,MAGX,C,mCCjDA,mGAMMjI,EAAYC,aAAW,iBAAO,CAClCE,KAAM,CACJ,qBAAsB,CACpBoI,WAAY,uBAGjB,IAOYlC,EAA2B,SAACmC,GACvC,IAAM9G,EAAU1B,IAEhB,OACE,kBAAC,IAAc,CACbyI,gBAAgB,WAChBxE,UAAWvC,EAAQvB,KACnBmG,OAAQkC,EAAMlC,OACdoC,QAAS,kBAAC,IAAW,CAACtD,MAAM,aAC3BoD,EAAMG,SAGb,C","file":"static/js/34.3ae38d4a.chunk.js","sourcesContent":["import { Buffer } from 'buffer';\n\nimport { createWorker } from 'tesseract.js';\n\nexport function clipboardToDataURL(items: DataTransferItemList, onLoad: (ev: ProgressEvent<FileReader>) => void): void {\n  if (!items) {\n    return;\n  }\n\n  for (let i = 0; i < items.length; i++) {\n    const item: DataTransferItem = items[i];\n    if (item.type.startsWith('image')) {\n      const reader = new FileReader();\n      reader.onload = onLoad;\n      reader.readAsDataURL(item.getAsFile() as Blob);\n      break;\n    }\n  }\n}\n\nexport async function processOCR(\n  language: string,\n  imageBuffer: Buffer,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  logger: (log: any) => void,\n  onCompleted: (text: string) => void,\n) {\n  const worker = createWorker({ logger });\n  await worker.load();\n  await worker.loadLanguage(language);\n  await worker.initialize(language);\n\n  const result = await worker.recognize(imageBuffer);\n  onCompleted(result.data.text);\n\n  await worker.terminate();\n}\n","import { makeStyles } from '@mui/styles';\n\nexport const imageResizer = {\n  marginTop: 10,\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  border: 'solid 1px blue',\n};\n\nexport const useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing(1),\n  },\n  form: {\n    marginTop: theme.spacing(2),\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  image: {\n    width: '100%',\n  },\n  imageSelector: {\n    margin: theme.spacing(2),\n    textAlign: 'center',\n  },\n  toolbar: {\n    margin: 0,\n    padding: 0,\n    '& > *': {\n      marginLeft: theme.spacing(1),\n    },\n  },\n  formatted: {\n    padding: theme.spacing(1),\n    border: '1px solid grey',\n    wordWrap: 'break-word',\n    height: 116,\n  },\n}));\n","import { Buffer } from 'buffer';\n\nimport React from 'react';\n\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport PhotoCameraIcon from '@mui/icons-material/PhotoCamera';\nimport OCRIcon from '@mui/icons-material/Scanner';\nimport {\n  Box,\n  Card,\n  CardContent,\n  FormControl,\n  LinearProgress,\n  MenuItem,\n  TextField,\n  Toolbar,\n  Typography,\n} from '@mui/material';\nimport Button from '@mui/material/Button';\nimport { Resizable } from 're-resizable';\nimport { Helmet } from 'react-helmet';\n\nimport CopyButton from '../../components/CopyButton';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport { Spinner } from '../../components/Spinner/Spinner';\nimport { useToasterUpdate } from '../../components/Toaster/ToasterProvider';\nimport { useIsWidthUp } from '../../theme';\nimport * as services from './services';\nimport { imageResizer, useStyles } from './styled';\n\ninterface WorkerStatus {\n  workerId: string;\n  jobId: string;\n  status: string;\n  progress: number;\n}\n\nconst INITIAL_WORKER_STATUS: WorkerStatus = {\n  workerId: '',\n  jobId: '',\n  status: '',\n  progress: 0,\n};\n\nconst ImageOCR: React.FC = () => {\n  const title = 'Image OCR (text extraction)';\n  const classes = useStyles();\n  const isMdUp = useIsWidthUp('md');\n  const { setToasterState } = useToasterUpdate();\n  const [language, setLanguage] = React.useState('eng');\n  const [workerStatus, setWorkerStatus] = React.useState<WorkerStatus>(INITIAL_WORKER_STATUS);\n  const [imgDataURL, setImgDataURL] = React.useState('');\n  const [imgExtractedText, setImgExtractedText] = React.useState('');\n\n  function handleClear(event: React.MouseEvent<HTMLButtonElement>) {\n    event.preventDefault();\n    setWorkerStatus(INITIAL_WORKER_STATUS);\n    setImgDataURL('');\n    setImgExtractedText('');\n  }\n\n  function handleProcess(event: React.MouseEvent<HTMLButtonElement>) {\n    event.preventDefault();\n    if (!imgDataURL) {\n      setToasterState({\n        open: true,\n        message: 'There is no image to process',\n        type: 'error',\n        autoHideDuration: 2000,\n      });\n      return;\n    }\n\n    setImgExtractedText('Processing the image, please wait…');\n\n    const imageBuffer = Buffer.from(imgDataURL.split(',')[1], 'base64');\n    services.processOCR(language, imageBuffer, logger, setImgExtractedText).then();\n  }\n\n  function logger(workerStatus: WorkerStatus) {\n    setWorkerStatus(workerStatus);\n    setImgExtractedText(`Processing the image\\n\\t → ${workerStatus.status}…`);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function onPasteFromClipboard(e: any) {\n    const clipboardData = e.clipboardData || e.originalEvent.clipboardData || e.originalEvent.clipboard;\n    services.clipboardToDataURL(clipboardData.items, (ev: ProgressEvent<FileReader>) =>\n      setImgDataURL(ev.target?.result as string),\n    );\n  }\n\n  function onFileSelected(file?: File) {\n    if (!file) {\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = (ev: ProgressEvent<FileReader>) => setImgDataURL(ev.target?.result as string);\n    reader.readAsDataURL(file);\n  }\n\n  React.useEffect(() => {\n    document.onpaste = onPasteFromClipboard;\n    return () => {\n      document.removeEventListener('onpaste', onPasteFromClipboard);\n    };\n  }, []);\n\n  return (\n    <>\n      <Helmet title={title} />\n      <div className={classes.root}>\n        <FeatureTitle iconType={OCRIcon} title={title} />\n\n        <form noValidate autoComplete=\"off\" className={classes.form}>\n          <FormControl className={classes.formControl}>\n            <TextField\n              select={true}\n              label=\"Image language\"\n              id=\"language\"\n              style={{ width: 160 }}\n              value={language}\n              autoFocus={isMdUp}\n              onChange={e => setLanguage(e.target.value)}>\n              {/**\n               * TODO: Add all Tesseract.js supported languages:\n               * https://tesseract-ocr.github.io/tessdoc/Data-Files#data-files-for-version-400-november-29-2016\n               */}\n              <MenuItem value=\"eng\">English</MenuItem>\n              <MenuItem value=\"fra\">French</MenuItem>\n            </TextField>\n          </FormControl>\n        </form>\n\n        <Card>\n          <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" className={classes.imageSelector}>\n            {!imgDataURL && (\n              <div>\n                <Typography>paste image from clipboard</Typography>\n                <Typography>or select a file</Typography>\n                <input\n                  type=\"file\"\n                  color=\"primary\"\n                  accept=\"image/*\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => onFileSelected(e.target.files?.[0])}\n                  id=\"icon-button-file\"\n                  style={{ display: 'none' }}\n                />\n                <label htmlFor=\"icon-button-file\">\n                  <Button variant=\"contained\" component=\"span\" color=\"primary\">\n                    <PhotoCameraIcon />\n                  </Button>\n                </label>\n              </div>\n            )}\n            {imgDataURL && (\n              <Resizable style={imageResizer} defaultSize={{ width: 300, height: '100%' }}>\n                <img src={imgDataURL} alt=\"Clipboard content\" className={classes.image} />\n              </Resizable>\n            )}\n          </Box>\n          {imgDataURL && (\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n              <Button endIcon={<DeleteIcon />} variant=\"contained\" color=\"primary\" onClick={handleClear}>\n                Clear\n              </Button>\n            </Box>\n          )}\n          <CardContent>\n            <Spinner active={imgExtractedText.startsWith('Processing')}>\n              <TextField\n                label=\"Extracted text\"\n                fullWidth\n                value={imgExtractedText}\n                margin=\"normal\"\n                variant=\"outlined\"\n                multiline\n                minRows=\"8\"\n              />\n            </Spinner>\n            <LinearProgress variant=\"determinate\" value={workerStatus.progress * 100} />\n            <Toolbar className={classes.toolbar}>\n              <Box display=\"flex\" flexGrow={1}></Box>\n              <CopyButton data={imgExtractedText} sx={{ mr: 1 }} />\n              <Button\n                variant=\"contained\"\n                title=\"Run optical caracters recognition process to extract text\"\n                color=\"primary\"\n                onClick={handleProcess}\n                disabled={!imgDataURL}\n                endIcon={<OCRIcon />}>\n                Run\n              </Button>\n            </Toolbar>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n};\n\nexport default ImageOCR;\n","import React, { ElementType } from 'react';\n\nimport { Typography } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles(theme => ({\n  title: {\n    wordBreak: 'break-word',\n  },\n  titleWithIcon: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  titleContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  icon: {\n    height: '40px',\n    width: '40px',\n    marginRight: theme.spacing(1),\n  },\n}));\n\ninterface Props {\n  title: string;\n  iconType: ElementType;\n}\n\nconst FeatureTitle: React.FC<Props> = ({ title, iconType: FeatureIcon }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.titleContainer}>\n      <div className={classes.titleWithIcon}>\n        <FeatureIcon className={classes.icon} />\n        <Typography variant=\"h5\" className={classes.title}>\n          {title}\n        </Typography>\n      </div>\n    </div>\n  );\n};\n\nexport default FeatureTitle;\n","import React from 'react';\n\nimport AssignmentTurnedIn from '@mui/icons-material/AssignmentTurnedIn';\nimport { Button, ButtonProps, SvgIconTypeMap } from '@mui/material';\nimport { OverridableComponent } from '@mui/material/OverridableComponent';\nimport * as copy from 'copy-to-clipboard';\n\nimport { useToasterUpdate } from '../Toaster/ToasterProvider';\n\ntype Props = {\n  data?: string;\n  isDisabled?: boolean;\n  hoverMessage?: string;\n  feedbackMessage?: string;\n  Icon?: OverridableComponent<SvgIconTypeMap<unknown, 'svg'>>;\n} & ButtonProps;\n\nconst CopyButton: React.FC<Props> = ({\n  data,\n  isDisabled,\n  hoverMessage,\n  feedbackMessage,\n  Icon = AssignmentTurnedIn,\n  ...others\n}: Props) => {\n  const { setToasterState } = useToasterUpdate();\n\n  const handleCopy = () => {\n    if (!data) {\n      return;\n    }\n\n    const message = feedbackMessage ?? `Content copied into clipboard: ${data.substring(0, 25)} …`;\n\n    copy.default(data, { format: 'text/plain' });\n    setToasterState({ open: true, message, type: 'success', autoHideDuration: 2000 });\n  };\n\n  return (\n    <Button\n      {...others}\n      onClick={handleCopy}\n      disabled={!data || isDisabled}\n      title={hoverMessage ?? 'Copy to clipboard'}\n      variant=\"contained\"\n      color=\"primary\">\n      <Icon />\n    </Button>\n  );\n};\n\nexport default CopyButton;\n","import React from 'react';\n\nimport { makeStyles } from '@mui/styles';\nimport LoadingOverlay from 'react-loading-overlay';\nimport ScaleLoader from 'react-spinners/ScaleLoader';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    '& .spinner_overlay': {\n      background: 'rgba(0, 0, 0, 0.3)',\n    },\n  },\n}));\n\ninterface Props {\n  active: boolean;\n  children: React.ReactNode;\n}\n\nexport const Spinner: React.FC<Props> = (props: Props) => {\n  const classes = useStyles();\n\n  return (\n    <LoadingOverlay\n      classNamePrefix=\"spinner_\"\n      className={classes.root}\n      active={props.active}\n      spinner={<ScaleLoader color=\"#bf3a2b\" />}>\n      {props.children}\n    </LoadingOverlay>\n  );\n};\n"],"sourceRoot":""}