{"version":3,"sources":["containers/ColorPicker/services.ts","containers/ColorPicker/styled.ts","containers/ColorPicker/index.tsx","components/FeatureTitle/index.tsx"],"names":["getOpacityHexValue","opacity","Error","Math","round","toString","retrieveClickedColor","event","image","coordinates","target","bounds","getBoundingClientRect","left","top","x","pageX","y","pageY","cw","clientWidth","ch","clientHeight","iw","naturalWidth","ih","naturalHeight","px","py","width","height","computeImageClickCoordinates","canvas","document","createElement","context","getContext","drawImage","p","getImageData","data","r","g","b","a","rgbColorToHex","color","rgbToHex","slice","imageResizer","marginTop","display","alignItems","justifyContent","border","useStyles","makeStyles","theme","root","margin","spacing","imageSelector","textAlign","toolbar","sample","cursor","marginBottom","borderColor","palette","text","disabled","borderStyle","borderWidth","borderRadius","shape","fontSize","fontFamily","textShadow","colorPicker","DEFAULT_BACKGROUND","ColorPicker","title","classes","setToasterState","useToasterUpdate","React","useState","imgDataURL","setImgDataURL","rgb","setRgb","background","setBackground","backgroundWithAlpha","setBackgroundWithAlpha","backgroundRgb","setBackgroundRgb","backgroundRgbWithAlpha","setBackgroundRgbWithAlpha","onPasteFromClipboard","e","items","onLoad","i","length","item","type","startsWith","reader","FileReader","onload","readAsDataURL","getAsFile","services","clipboardData","originalEvent","clipboard","ev","result","onImageClick","getElementById","useEffect","onpaste","removeEventListener","addEventListener","handleCopy","feedback","substr","message","copy","format","open","autoHideDuration","Helmet","className","FeatureTitle","iconType","PaletteIcon","Box","Typography","variant","accept","onChange","file","onFileSelected","files","id","style","htmlFor","Button","component","defaultSize","src","alt","flexDirection","onChangeComplete","endIcon","onClick","preventDefault","undefined","backgroundColor","wordBreak","titleWithIcon","titleContainer","icon","marginRight","props","FeatureIcon"],"mappings":"qSASO,SAASA,EAAmBC,GAC/B,GAAIA,EAAU,GAAKA,EAAU,EACzB,MAAM,IAAIC,MAAM,yBAGpB,OAAOC,KAAKC,MAAgB,IAAVH,GAAeI,SAAS,GAC7C,CAkBM,SAASC,EAAqBC,EAAmBC,GAAoC,IAAD,MACjFC,EAuCH,SAAsCF,GACzC,IAAMC,EAAQD,EAAMG,OACdC,EAASH,EAAMI,wBAEfC,EAAOF,EAAOE,KACdC,EAAMH,EAAOG,IACbC,EAAIR,EAAMS,MAAQH,EAClBI,EAAIV,EAAMW,MAAQJ,EAClBK,EAAKX,EAAMY,YACXC,EAAKb,EAAMc,aACXC,EAAKf,EAAMgB,aACXC,EAAKjB,EAAMkB,cAEXC,EAAKxB,KAAKC,MAAOW,EAAII,EAAMI,GAC3BK,EAAKzB,KAAKC,MAAOa,EAAII,EAAMI,GAEjC,MAAO,CACHE,KACAC,KACAC,MAAON,EACPO,OAAQL,EAEf,CA7DuBM,CAA6BxB,GAG3CyB,EAASC,SAASC,cAAc,UACtCF,EAAOH,MAAQpB,EAAYoB,MAC3BG,EAAOF,OAASrB,EAAYqB,OAC5B,IAAMK,EAAoCH,EAAOI,WAAW,MAC5DD,EAAQE,UAAU7B,EAAO,EAAG,GAG5B,IAAM8B,EAAIH,EAAQI,aAAa9B,EAAYkB,GAAIlB,EAAYmB,GAAI,EAAG,GAAGY,KAErE,MAAO,CACHC,EAAC,WAAGH,EAAE,UAAL,QAAW,EACZI,EAAC,WAAGJ,EAAE,UAAL,QAAW,EACZK,EAAC,WAAGL,EAAE,UAAL,QAAW,EACZM,EAAG,EAEV,CAEM,IAAMC,EAAgB,SAACC,GAAD,MACzB,KAAO,SAEX,SAAkBL,EAAWC,EAAWC,GACpC,GAAIF,EAAI,KAAOC,EAAI,KAAOC,EAAI,IAC1B,MAAM,IAAIzC,MAAM,2BAGpB,OAASuC,GAAK,GAAOC,GAAK,EAAKC,GAAGtC,SAAS,GAC9C,CARqB0C,CAASD,EAAML,EAAGK,EAAMJ,EAAGI,EAAMH,IAAIK,OAAO,EADrC,E,aCpDhBC,EAAe,CACxBC,UAAW,GACXC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,OAAQ,kBAGCC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CAC1CC,KAAM,CACFC,OAAQF,EAAMG,QAAQ,IAE1BpD,MAAO,CACHqB,MAAO,OACP8B,OAAQ,EACRL,OAAQ,mBAEZO,cAAe,CACXF,OAAQF,EAAMG,QAAQ,GACtBE,UAAW,UAEfC,QAAS,CACLJ,OAAQF,EAAMG,QAAQ,IAE1BI,OAAQ,CACJC,OAAQ,UACRpC,MAAO,OACPC,OAAQ,GACRoC,aAAcT,EAAMG,QAAQ,GAC5BO,YAAaV,EAAMW,QAAQC,KAAKC,SAChCC,YAAa,QACbC,YAAa,EACbC,aAAchB,EAAMiB,MAAMD,aAC1BX,UAAW,SACXa,SAAU,GACVC,WAAY,YACZC,WAAY,qBAEhBC,YAAa,CACT5B,UAAWO,EAAMG,QAAQ,IA/BQ,I,OCKnCmB,EAAqB,GAqKZC,UAnKe,WAAO,IAAD,MAC1BC,EAAQ,eACRC,EAAU3B,IACR4B,EAAoBC,cAApBD,gBACR,EAAoCE,IAAMC,SAAS,IAAnD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAsBH,IAAMC,WAA5B,mBAAOG,EAAP,KAAYC,EAAZ,KAGA,EAAoCL,IAAMC,SAASP,GAAnD,mBAAOY,EAAP,KAAmBC,EAAnB,KACA,EAAsDP,IAAMC,SAASP,GAArE,mBAAOc,EAAP,KAA4BC,EAA5B,KACA,EAA0CT,IAAMC,SAASP,GAAzD,mBAAOgB,EAAP,KAAsBC,EAAtB,KACA,EAA4DX,IAAMC,SAASP,GAA3E,mBAAOkB,EAAP,KAA+BC,EAA/B,KAsBA,SAASC,EAAqBC,IFjC3B,SAA4BC,EAA6BC,GAC5D,GAAKD,EAIL,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAAK,CACnC,IAAME,EAAyBJ,EAAME,GACrC,GAAIE,EAAKC,KAAKC,WAAW,SAAU,CAC/B,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAASR,EAChBM,EAAOG,cAAcN,EAAKO,aAC1B,KACH,CACJ,CACJ,CEqBOC,EADsBb,EAAEc,eAAiBd,EAAEe,cAAcD,eAAiBd,EAAEe,cAAcC,WAChDf,OAAO,SAACgB,GAAD,OAC7C7B,EAAc6B,EAAG3G,OAAQ4G,OADoB,GAGpD,CAuBD,SAASC,EAAahH,GAClB,IACMuC,EAAQmE,EAA8B1G,EAD9B0B,SAASuF,eAAe,UAEtC9B,EAAO5C,EACV,CApDD2E,qBAAU,WACI,IAAD,IAALhC,GACAG,EAAcqB,EAAuBxB,IACrCK,EAAuBmB,EAAuBxB,GAAOwB,EAAA,UAA4BxB,EAAI7C,SAAhC,QAAqC,IAC1FoD,EAAiB,OAAD,OAAQP,EAAIhD,EAAZ,aAAkBgD,EAAI/C,EAAtB,aAA4B+C,EAAI9C,EAAhC,MAChBuD,EAA0B,QAAD,OAAST,EAAIhD,EAAb,aAAmBgD,EAAI/C,EAAvB,aAA6B+C,EAAI9C,EAAjC,uBAAuC8C,EAAI7C,SAA3C,QAAgD,EAAhD,QAEzBgD,EAAcb,GACde,EAAuBf,GACvBiB,EAAiBjB,GACjBmB,EAA0BnB,GAEjC,GAAE,CAACU,IAqBJJ,IAAMoC,WAAU,WAIZ,OAHAxF,SAASyF,QAAUvB,EAGZ,WACHlE,SAAS0F,oBAAoB,UAAWxB,EAC3C,CACJ,GAAE,IAEHd,IAAMoC,WAAU,WACRlC,GACAtD,SAASuF,eAAe,SAAUI,iBAAiB,QAASL,EAEnE,GAAE,CAAChC,IAQJ,IAAMsC,GAAa,SAACrF,GAChB,IAAMsF,EAAWtF,EAAKuF,OAAO,EAAG,IAC1BC,EAAO,yCAAqCF,EAArC,WAEbG,IAAazF,EAAM,CAAE0F,OAAQ,eAC7B/C,EAAgB,CAAEgD,MAAM,EAAMH,UAAStB,KAAM,UAAW0B,iBAAkB,KAC7E,EAED,OACI,qCACI,cAACC,EAAA,EAAD,CAAQpD,MAAOA,IACf,sBAAKqD,UAAWpD,EAAQxB,KAAxB,UACI,cAAC6E,EAAA,EAAD,CAAcC,SAAUC,IAAaxD,MAAOA,IAE5C,eAACyD,EAAA,EAAD,CAAKvF,QAAQ,OAAOC,WAAW,SAASC,eAAe,SAASiF,UAAWpD,EAAQrB,cAAnF,WACM0B,GACE,8BACI,eAACoD,EAAA,EAAD,CAAYC,QAAQ,QAApB,0CACkC,IAC9B,uBACIlC,KAAK,OACL5D,MAAM,UACN+F,OAAO,UACPC,SAAU,SAAC1C,GAAD,OAlD1C,SAAwB2C,GACpB,IAAMnC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACO,GAAD,OAAmC7B,EAAc6B,EAAG3G,OAAQ4G,OAA5D,EAChBV,EAAOG,cAAcgC,EACxB,CA8CqDC,CAAe5C,EAAE1F,OAAOuI,MAAM,GAA1C,EACVC,GAAG,mBACHC,MAAO,CAAEhG,QAAS,UAEtB,uBAAOiG,QAAQ,mBAAf,SACI,cAACC,EAAA,EAAD,CAAQT,QAAQ,YAAYU,UAAU,OAAOxG,MAAM,UAAnD,SACI,cAAC,IAAD,aAMnByC,GACG,cAAC,IAAD,CAAW4D,MAAOlG,EAAcsG,YAAa,CAAE1H,MAAO,IAAKC,OAAQ,QAAnE,SACI,qBAAKoH,GAAG,QAAQM,IAAKjE,EAAYkE,IAAI,oBAAoBnB,UAAWpD,EAAQ1E,aAKxF,eAACkI,EAAA,EAAD,CACIvF,QAAQ,OACRuG,cAAc,SACdtG,WAAW,SACXC,eAAe,SACfiF,UAAWpD,EAAQJ,YALvB,UAMI,cAAC6D,EAAA,EAAD,CAAYC,QAAQ,QAApB,mCACA,cAAC,IAAD,CAAc9F,MAAO2C,EAAKkE,iBAAkB,SAAC7G,GAAD,OAAwB4C,EAAO5C,EAAM2C,IAArC,IAE5C,oDACsC,KAAhB,iBAACA,QAAD,IAACA,OAAD,EAACA,EAAK7C,SAAN,QAAW,GADjC,wBAC+C6C,QAD/C,IAC+CA,OAD/C,EAC+CA,EAAK7C,SADpD,QACyD,EADzD,KAC8D,IACzDqE,EAAA,iBAA4BxB,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAK7C,SAAjC,QAAsC,SAI9C2C,GACG,cAACmD,EAAA,EAAD,CAAKvF,QAAQ,OAAOC,WAAW,SAASC,eAAe,SAAvD,SACI,cAACgG,EAAA,EAAD,CAAQO,QAAS,cAAC,IAAD,IAAgBhB,QAAQ,YAAY9F,MAAM,UAAU+G,QAnGzF,SAAqBtJ,GACjBA,EAAMuJ,iBACNtE,EAAc,IACdE,OAAOqE,EACV,EA+FmB,qBAMR,eAACrB,EAAA,EAAD,CAAKvF,QAAQ,OAAOuG,cAAc,SAAStG,WAAW,SAASC,eAAe,SAA9E,UACI,qBACIiF,UAAWpD,EAAQlB,OACnBmF,MAAO,CAAEa,gBAAiBrE,GAC1BkE,QAAS,kBAAMhC,GAAWlC,EAAjB,EAHb,SAIKA,IAEL,qBACI2C,UAAWpD,EAAQlB,OACnBmF,MAAO,CAAEa,gBAAiBnE,GAC1BgE,QAAS,kBAAMhC,GAAWhC,EAAjB,EAHb,SAIKA,IAEL,qBACIyC,UAAWpD,EAAQlB,OACnBmF,MAAO,CAAEa,gBAAiBjE,GAC1B8D,QAAS,kBAAMhC,GAAW9B,EAAjB,EAHb,SAIKA,IAEL,qBACIuC,UAAWpD,EAAQlB,OACnBmF,MAAO,CAAEa,gBAAiB/D,GAC1B4D,QAAS,kBAAMhC,GAAW5B,EAAjB,EAHb,SAIKA,YAMxB,C,mCClLD,mCAIM1C,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCwB,MAAO,CACHgF,UAAW,cAEfC,cAAe,CACX/G,QAAS,OACTC,WAAY,UAEhB+G,eAAgB,CACZhH,QAAS,OACTE,eAAgB,UAEpB+G,KAAM,CACFtI,OAAQ,OACRD,MAAO,OACPwI,YAAa5G,EAAMG,QAAQ,IAfD,IAwCnB2E,IAhBuB,SAAC+B,GACnC,IAAMpF,EAAU3B,IACVgH,EAAcD,EAAM9B,SAE1B,OACI,qBAAKF,UAAWpD,EAAQiF,eAAxB,SACI,sBAAK7B,UAAWpD,EAAQgF,cAAxB,UACI,cAACK,EAAD,CAAajC,UAAWpD,EAAQkF,OAChC,cAAC,IAAD,CAAYxB,QAAQ,KAAKN,UAAWpD,EAAQD,MAA5C,SACKqF,EAAMrF,YAK1B,C","file":"static/js/41.75cae344.chunk.js","sourcesContent":["import { RGBColor } from 'react-color';\n\ninterface ClickCoordinates {\n    px: number;\n    py: number;\n    width: number;\n    height: number;\n}\n\nexport function getOpacityHexValue(opacity: number): string {\n    if (opacity < 0 || opacity > 1) {\n        throw new Error('Invalid opacity value');\n    }\n\n    return Math.round(opacity * 255).toString(16);\n}\n\nexport function clipboardToDataURL(items: DataTransferItemList, onLoad: (ev: ProgressEvent<FileReader>) => void): void {\n    if (!items) {\n        return;\n    }\n\n    for (let i = 0; i < items.length; i++) {\n        const item: DataTransferItem = items[i];\n        if (item.type.startsWith('image')) {\n            const reader = new FileReader();\n            reader.onload = onLoad;\n            reader.readAsDataURL(item.getAsFile() as Blob);\n            break;\n        }\n    }\n}\n\nexport function retrieveClickedColor(event: MouseEvent, image: HTMLImageElement): RGBColor {\n    const coordinates = computeImageClickCoordinates(event);\n\n    // Create a canvas with same image dimension and draw the image on it\n    const canvas = document.createElement('canvas') as HTMLCanvasElement;\n    canvas.width = coordinates.width;\n    canvas.height = coordinates.height;\n    const context: CanvasRenderingContext2D = canvas.getContext('2d')!;\n    context.drawImage(image, 0, 0);\n\n    // Get the clicked pixel info\n    const p = context.getImageData(coordinates.px, coordinates.py, 1, 1).data;\n\n    return {\n        r: +p[0] ?? 0,\n        g: +p[1] ?? 0,\n        b: +p[2] ?? 0,\n        a: 1,\n    };\n}\n\nexport const rgbColorToHex = (color: RGBColor): string =>\n    '#' + ('000000' + rgbToHex(color.r, color.g, color.b)).slice(-6);\n\nfunction rgbToHex(r: number, g: number, b: number): string {\n    if (r > 255 || g > 255 || b > 255) {\n        throw new Error('Invalid color component');\n    }\n\n    return ((r << 16) | (g << 8) | b).toString(16);\n}\n\n/**\n * Compute clicked pixel coordinates based on natural image size\n *\n * @see https://stackoverflow.com/questions/34867066/javascript-mouse-click-coordinates-for-image\n * @see https://stackoverflow.com/a/288731/1497139\n *\n * @param event {MouseEvent}\n */\nexport function computeImageClickCoordinates(event: MouseEvent): ClickCoordinates {\n    const image = event.target as HTMLImageElement;\n    const bounds = image.getBoundingClientRect();\n\n    const left = bounds.left;\n    const top = bounds.top;\n    const x = event.pageX - left;\n    const y = event.pageY - top;\n    const cw = image.clientWidth;\n    const ch = image.clientHeight;\n    const iw = image.naturalWidth;\n    const ih = image.naturalHeight;\n\n    const px = Math.round((x / cw) * iw);\n    const py = Math.round((y / ch) * ih);\n\n    return {\n        px,\n        py,\n        width: iw,\n        height: ih,\n    };\n}\n","import { makeStyles } from '@material-ui/core';\n\nexport const imageResizer = {\n    marginTop: 10,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    border: 'solid 1px blue',\n};\n\nexport const useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    image: {\n        width: '100%',\n        margin: 5,\n        border: 'dashed 1px grey',\n    },\n    imageSelector: {\n        margin: theme.spacing(2),\n        textAlign: 'center',\n    },\n    toolbar: {\n        margin: theme.spacing(2),\n    },\n    sample: {\n        cursor: 'pointer',\n        width: '100%',\n        height: 50,\n        marginBottom: theme.spacing(1),\n        borderColor: theme.palette.text.disabled,\n        borderStyle: 'solid',\n        borderWidth: 1,\n        borderRadius: theme.shape.borderRadius,\n        textAlign: 'center',\n        fontSize: 16,\n        fontFamily: 'monospace',\n        textShadow: '1px 1px lightgrey',\n    },\n    colorPicker: {\n        marginTop: theme.spacing(2),\n    },\n}));\n","import { Box, Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport PaletteIcon from '@material-ui/icons/Palette';\nimport PhotoCameraIcon from '@material-ui/icons/PhotoCamera';\nimport * as copy from 'copy-to-clipboard';\nimport { Resizable } from 're-resizable';\nimport React, { useEffect } from 'react';\nimport { ColorResult, RGBColor, SketchPicker } from 'react-color';\nimport { Helmet } from 'react-helmet';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport { useToasterUpdate } from '../../components/Toaster/ToasterProvider';\nimport * as services from './services';\nimport { imageResizer, useStyles } from './styled';\n\nconst DEFAULT_BACKGROUND = '';\n\nconst ColorPicker: React.FC = () => {\n    const title = 'Color picker';\n    const classes = useStyles();\n    const { setToasterState } = useToasterUpdate();\n    const [imgDataURL, setImgDataURL] = React.useState('');\n    const [rgb, setRgb] = React.useState<RGBColor>();\n\n    // Derived values (recomputed on rgb change)\n    const [background, setBackground] = React.useState(DEFAULT_BACKGROUND);\n    const [backgroundWithAlpha, setBackgroundWithAlpha] = React.useState(DEFAULT_BACKGROUND);\n    const [backgroundRgb, setBackgroundRgb] = React.useState(DEFAULT_BACKGROUND);\n    const [backgroundRgbWithAlpha, setBackgroundRgbWithAlpha] = React.useState(DEFAULT_BACKGROUND);\n\n    useEffect(() => {\n        if (rgb) {\n            setBackground(services.rgbColorToHex(rgb));\n            setBackgroundWithAlpha(services.rgbColorToHex(rgb) + services.getOpacityHexValue(rgb.a ?? 1));\n            setBackgroundRgb(`rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`);\n            setBackgroundRgbWithAlpha(`rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${rgb.a ?? 1})`);\n        } else {\n            setBackground(DEFAULT_BACKGROUND);\n            setBackgroundWithAlpha(DEFAULT_BACKGROUND);\n            setBackgroundRgb(DEFAULT_BACKGROUND);\n            setBackgroundRgbWithAlpha(DEFAULT_BACKGROUND);\n        }\n    }, [rgb]);\n\n    function handleClear(event: any) {\n        event.preventDefault();\n        setImgDataURL('');\n        setRgb(undefined);\n    }\n\n    function onPasteFromClipboard(e: any) {\n        const clipboardData = e.clipboardData || e.originalEvent.clipboardData || e.originalEvent.clipboard;\n        services.clipboardToDataURL(clipboardData.items, (ev: ProgressEvent<FileReader>) =>\n            setImgDataURL(ev.target!.result as string),\n        );\n    }\n\n    function onFileSelected(file: File) {\n        const reader = new FileReader();\n        reader.onload = (ev: ProgressEvent<FileReader>) => setImgDataURL(ev.target!.result as string);\n        reader.readAsDataURL(file);\n    }\n\n    React.useEffect(() => {\n        document.onpaste = onPasteFromClipboard;\n\n        // Unmount cleanup\n        return () => {\n            document.removeEventListener('onpaste', onPasteFromClipboard);\n        };\n    }, []);\n\n    React.useEffect(() => {\n        if (imgDataURL) {\n            document.getElementById('image')!.addEventListener('click', onImageClick);\n        }\n    }, [imgDataURL]);\n\n    function onImageClick(event: MouseEvent) {\n        const image = document.getElementById('image')! as HTMLImageElement;\n        const color = services.retrieveClickedColor(event, image);\n        setRgb(color);\n    }\n\n    const handleCopy = (data: string) => {\n        const feedback = data.substr(0, 20);\n        const message = `Content copied into clipboard: ${feedback} …`;\n\n        copy.default(data, { format: 'text/plain' });\n        setToasterState({ open: true, message, type: 'success', autoHideDuration: 2000 });\n    };\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={PaletteIcon} title={title} />\n\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" className={classes.imageSelector}>\n                    {!imgDataURL && (\n                        <div>\n                            <Typography variant=\"body2\">\n                                paste image or select a file:{' '}\n                                <input\n                                    type=\"file\"\n                                    color=\"primary\"\n                                    accept=\"image/*\"\n                                    onChange={(e: any) => onFileSelected(e.target.files[0])}\n                                    id=\"icon-button-file\"\n                                    style={{ display: 'none' }}\n                                />\n                                <label htmlFor=\"icon-button-file\">\n                                    <Button variant=\"contained\" component=\"span\" color=\"primary\">\n                                        <PhotoCameraIcon />\n                                    </Button>\n                                </label>\n                            </Typography>\n                        </div>\n                    )}\n                    {imgDataURL && (\n                        <Resizable style={imageResizer} defaultSize={{ width: 300, height: '100%' }}>\n                            <img id=\"image\" src={imgDataURL} alt=\"Clipboard content\" className={classes.image} />\n                        </Resizable>\n                    )}\n                </Box>\n\n                <Box\n                    display=\"flex\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                    justifyContent=\"center\"\n                    className={classes.colorPicker}>\n                    <Typography variant=\"body2\">or just pick a color:</Typography>\n                    <SketchPicker color={rgb} onChangeComplete={(color: ColorResult) => setRgb(color.rgb)} />\n\n                    <pre>\n                        Opacity to hexa: {(rgb?.a ?? 1) * 100}% = {rgb?.a ?? 1} ={' '}\n                        {services.getOpacityHexValue(rgb?.a ?? 1)}\n                    </pre>\n                </Box>\n\n                {imgDataURL && (\n                    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                        <Button endIcon={<DeleteIcon />} variant=\"contained\" color=\"primary\" onClick={handleClear}>\n                            Clear\n                        </Button>\n                    </Box>\n                )}\n\n                <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\n                    <div\n                        className={classes.sample}\n                        style={{ backgroundColor: background }}\n                        onClick={() => handleCopy(background)}>\n                        {background}\n                    </div>\n                    <div\n                        className={classes.sample}\n                        style={{ backgroundColor: backgroundWithAlpha }}\n                        onClick={() => handleCopy(backgroundWithAlpha)}>\n                        {backgroundWithAlpha}\n                    </div>\n                    <div\n                        className={classes.sample}\n                        style={{ backgroundColor: backgroundRgb }}\n                        onClick={() => handleCopy(backgroundRgb)}>\n                        {backgroundRgb}\n                    </div>\n                    <div\n                        className={classes.sample}\n                        style={{ backgroundColor: backgroundRgbWithAlpha }}\n                        onClick={() => handleCopy(backgroundRgbWithAlpha)}>\n                        {backgroundRgbWithAlpha}\n                    </div>\n                </Box>\n            </div>\n        </>\n    );\n};\n\nexport default ColorPicker;\n","import { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        wordBreak: 'break-word',\n    },\n    titleWithIcon: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    titleContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    icon: {\n        height: '40px',\n        width: '40px',\n        marginRight: theme.spacing(1),\n    },\n}));\n\ninterface Props {\n    title: string;\n    iconType: any;\n}\n\nconst FeatureTitle: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const FeatureIcon = props.iconType;\n\n    return (\n        <div className={classes.titleContainer}>\n            <div className={classes.titleWithIcon}>\n                <FeatureIcon className={classes.icon} />\n                <Typography variant=\"h5\" className={classes.title}>\n                    {props.title}\n                </Typography>\n            </div>\n        </div>\n    );\n};\n\nexport default FeatureTitle;\n"],"sourceRoot":""}