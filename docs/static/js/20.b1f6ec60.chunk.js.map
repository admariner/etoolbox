{"version":3,"sources":["containers/RegExTester/services.ts","containers/RegExTester/index.tsx"],"names":["replacer","match","capture","useStyles","makeStyles","theme","root","margin","spacing","matches","padding","borderColor","palette","text","disabled","borderStyle","borderWidth","borderRadius","shape","backgroundColor","fontWeight","color","toolbar","marginLeft","mapStateToProps","state","regularExpression","textInputs","inputText","mapDispatchToProps","dispatch","storeInputText","name","value","setTextAction","connect","withWidth","props","title","classes","React","useState","highlithedMatches","setHighlithedMatches","extracted","setExtracted","debounced","useDebouncedCallback","replaceAll","regex","regexParser","global","replace","e","JSON","stringify","services","extratedItemsList","result","exec","push","set","Set","console","log","size","sort","join","useEffect","Helmet","className","FeatureTitle","iconType","TextRotationNoneIcon","TextField","autoFocus","isWidthUp","width","id","label","placeholder","variant","fullWidth","onChange","target","Toolbar","Box","display","flexGrow","CopyButton","data","multiline","minRows","maxRows","ReactHtmlParser","ResultMonospace"],"mappings":"+XAiDA,SAASA,EAASC,EAAeC,GAE7B,MAAM,SAAN,OAAgBD,EAAhB,W,4CC9BEE,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,OAAQF,EAAMG,QAAQ,IAE1BC,QAAS,CACLC,QAASL,EAAMG,QAAQ,GACvBG,YAAaN,EAAMO,QAAQC,KAAKC,SAChCC,YAAa,QACbC,YAAa,EACbC,aAAcZ,EAAMa,MAAMD,aAC1B,SAAU,CACNE,gBAAiB,SACjBC,WAAY,OACZC,MAAO,UAGfC,QAAS,CACLf,OAAQ,EACRG,QAAS,EACT,QAAS,CACLa,WAAYlB,EAAMG,QAAQ,SA4F/B,SAASgB,EAAgBC,GAC5B,MAAO,CACHC,kBAAmBD,EAAME,WAAN,UACnBC,UAAWH,EAAME,WAAN,qBAIZ,SAASE,EAAmBC,GAC/B,MAAO,CACHC,eAAgB,SAACC,EAAcC,GAAf,OAAiCH,EAASI,YAAcF,EAAMC,MAIvEE,sBAAQX,EAAiBK,EAAzBM,CAA6CC,eA7FvB,SAACC,GAClC,IAAMC,EAAQ,6BACRC,EAAUpC,IACRuB,EAAiDW,EAAjDX,kBAAmBE,EAA8BS,EAA9BT,UAAWG,EAAmBM,EAAnBN,eAHa,EAIDS,IAAMC,SAAS,IAJd,mBAI5CC,EAJ4C,KAIzBC,EAJyB,OAKjBH,IAAMC,SAAS,IALE,mBAK5CG,EAL4C,KAKjCC,EALiC,KAQ7CC,EAAYC,aACd,SAACrB,EAAmBE,GAChBe,ED7DL,SAAmBjB,EAAuCE,GAC7D,IAAKF,IAAsBE,EACvB,MAAO,GAGX,IAAMf,EAAOe,EAAUoB,WAAW,KAAM,UAExC,IACI,IAAMC,EAAQC,IAAYxB,GAC1B,OAAIuB,EAAME,OACCtC,EAAKmC,WAAWC,EAAOjD,GAEvBa,EAAKuC,QAAQH,EAAOjD,GAEjC,MAAOqD,GACL,OAAOC,KAAKC,UAAUF,IC8CGG,CAAmB9B,EAAmBE,IAC3DiB,ED3CL,SAAiBnB,EAAuCE,GAC3D,IAAM6B,EAAoB,GAE1B,IAAK/B,IAAsBE,EACvB,MAAO,GAGX,IACI,IAKI8B,EALET,EAAQC,IAAYxB,GAC1B,IAAKuB,EAAME,OACP,MAAO,GAIX,KAA4C,QAApCO,EAAST,EAAMU,KAAK/B,KACxB6B,EAAkBG,KAAKF,EAAO,IAIlC,IAAMG,EAAM,IAAIC,IAAIL,GAGpB,OAFAM,QAAQC,IAAR,+BAAoCH,EAAII,KAAxC,aAAyD,YAAIJ,GAAKK,OAAOC,KAAK,OAEvEV,EAAkBU,KAAK,MAChC,MAAOd,GACL,OAAOC,KAAKC,UAAUF,ICmBLG,CAAiB9B,EAAmBE,MAErD,KASJ,OANAY,IAAM4B,WAEF,kBAAMtB,EAAUpB,EAAmBE,KACnC,CAACF,EAAmBE,EAAWkB,IAI/B,qCACI,cAACuB,EAAA,EAAD,CAAQ/B,MAAOA,IACf,sBAAKgC,UAAW/B,EAAQjC,KAAxB,UACI,cAACiE,EAAA,EAAD,CAAcC,SAAUC,IAAsBnC,MAAOA,IAErD,cAACoC,EAAA,EAAD,CACIC,UAAWC,YAAU,KAAMvC,EAAMwC,OACjCC,GAAG,QACHC,MAAM,qBACNC,YAAY,mDACZC,QAAQ,WACR1E,OAAO,SACP2E,WAAW,EACXjD,MAAOP,EACPyD,SAAU,SAAC9B,GAAD,OAAOtB,EAAe,YAAasB,EAAE+B,OAAOnD,UAG1D,eAACoD,EAAA,EAAD,CAASf,UAAW/B,EAAQjB,QAA5B,UACI,cAACgE,EAAA,EAAD,CAAKC,QAAQ,OAAOC,SAAU,IAC9B,cAACC,EAAA,EAAD,CAAYC,KAAMhE,OAGtB,cAACgD,EAAA,EAAD,CACII,GAAG,UACHC,MAAM,iDACNC,YAAY,iCACZW,WAAS,EACTC,QAAS,EACTC,QAASjB,YAAU,KAAMvC,EAAMwC,OAAS,GAAK,EAC7CI,QAAQ,WACR1E,OAAO,SACP2E,WAAW,EACXjD,MAAOL,EACPuD,SAAU,SAAC9B,GAAD,OAAOtB,EAAe,sBAAuBsB,EAAE+B,OAAOnD,UAGpE,qBAAKqC,UAAW/B,EAAQ9B,QAAxB,SACKqF,IAAgBpD,KAGrB,uHAC0F,uBACtF,gFAGJ,cAACqD,EAAA,EAAD,CAAiBrC,OAAQd,IAEzB,eAACyC,EAAA,EAAD,CAASf,UAAW/B,EAAQjB,QAA5B,UACI,cAACgE,EAAA,EAAD,CAAKC,QAAQ,OAAOC,SAAU,IAC9B,cAACC,EAAA,EAAD,CAAYC,KAAM9C,kB","file":"static/js/20.b1f6ec60.chunk.js","sourcesContent":["import regexParser from 'regex-parser';\n\nexport function transform(regularExpression: string | undefined, inputText: string | undefined): string {\n    if (!regularExpression || !inputText) {\n        return '';\n    }\n\n    const text = inputText.replaceAll('\\n', '<br />')\n\n    try {\n        const regex = regexParser(regularExpression);\n        if (regex.global) {\n            return text.replaceAll(regex, replacer);\n        } else {\n            return text.replace(regex, replacer);\n        }\n    } catch (e) {\n        return JSON.stringify(e);\n    }\n}\n\nexport function extract(regularExpression: string | undefined, inputText: string | undefined): string {\n    const extratedItemsList = [];\n\n    if (!regularExpression || !inputText) {\n        return '';\n    }\n\n    try {\n        const regex = regexParser(regularExpression);\n        if (!regex.global) {\n            return '';\n        }\n\n        let result;\n        while ((result = regex.exec(inputText)) !== null) {\n            extratedItemsList.push(result[0]);\n        }\n\n        // Log some stats\n        const set = new Set(extratedItemsList);\n        console.log(`Sorted set of unique ${set.size} entries:`, [...set].sort().join(', '));\n\n        return extratedItemsList.join(', ');\n    } catch (e) {\n        return JSON.stringify(e);\n    }\n}\n\nfunction replacer(match: string, capture: string): string {\n    // console.log(`match: ${match}, at position ${capture}`);\n    return `<span>${match}</span>`;\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport { Box, Toolbar } from '@material-ui/core';\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextRotationNoneIcon from '@material-ui/icons/TextRotationNone';\nimport TextField from '@material-ui/core/TextField';\nimport ReactHtmlParser from 'react-html-parser';\nimport { useDebouncedCallback } from 'use-debounce';\n\nimport { setTextAction } from '../../actions/text-actions';\nimport { AppState } from '../../reducers';\nimport * as services from './services';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport CopyButton from '../../components/CopyButton';\nimport { Helmet } from 'react-helmet';\nimport ResultMonospace from '../../components/ResultMonospace';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    matches: {\n        padding: theme.spacing(1),\n        borderColor: theme.palette.text.disabled,\n        borderStyle: 'solid',\n        borderWidth: 1,\n        borderRadius: theme.shape.borderRadius,\n        '& span': {\n            backgroundColor: 'yellow',\n            fontWeight: 'bold',\n            color: 'black',\n        }\n    },\n    toolbar: {\n        margin: 0,\n        padding: 0,\n        '& > *': {\n            marginLeft: theme.spacing(1),\n        },\n    },\n}));\n\ninterface Props {\n    width: Breakpoint;\n    inputText?: string;\n    regularExpression?: string;\n    storeInputText: (name: string, value: string) => void;\n}\n\nconst RegExTester: React.FC<Props> = (props: Props) => {\n    const title = 'Regular expressions tester';\n    const classes = useStyles();\n    const { regularExpression, inputText, storeInputText } = props;\n    const [highlithedMatches, setHighlithedMatches] = React.useState('');\n    const [extracted, setExtracted] = React.useState('');\n\n    // https://www.npmjs.com/package/use-debounce\n    const debounced = useDebouncedCallback(\n        (regularExpression, inputText) => {\n            setHighlithedMatches(services.transform(regularExpression, inputText));\n            setExtracted(services.extract(regularExpression, inputText));\n        },\n        300\n    );\n\n    React.useEffect(\n        // https://www.npmjs.com/package/use-debounce\n        () => debounced(regularExpression, inputText),\n        [regularExpression, inputText, debounced]\n    );\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={TextRotationNoneIcon} title={title} />\n\n                <TextField\n                    autoFocus={isWidthUp('md', props.width)}\n                    id=\"regex\"\n                    label=\"Regular expression\"\n                    placeholder=\"Type the regular expression. Example: /example/g\"\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    fullWidth={true}\n                    value={regularExpression}\n                    onChange={(e) => storeInputText('lastRegEx', e.target.value)}\n                />\n\n                <Toolbar className={classes.toolbar}>\n                    <Box display='flex' flexGrow={1}></Box>\n                    <CopyButton data={regularExpression} />\n                </Toolbar>\n\n                <TextField\n                    id=\"content\"\n                    label=\"Content to test the regular expression against\"\n                    placeholder=\"Paste or type the content here\"\n                    multiline\n                    minRows={6}\n                    maxRows={isWidthUp('md', props.width) ? 20 : 6}\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    fullWidth={true}\n                    value={inputText}\n                    onChange={(e) => storeInputText('lastRegExTextSample', e.target.value)}\n                />\n\n                <div className={classes.matches}>\n                    {ReactHtmlParser(highlithedMatches)}\n                </div>\n\n                <p>\n                    Collection of values. Could be usefull for Jira tickets numbers with expressions like:<br />\n                    <strong>issueKey in (FS-3456, WS-3213, FS-9988)</strong>\n                </p>\n\n                <ResultMonospace result={extracted} />\n\n                <Toolbar className={classes.toolbar}>\n                    <Box display='flex' flexGrow={1}></Box>\n                    <CopyButton data={extracted} />\n                </Toolbar>\n\n            </div>\n        </>\n    );\n}\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        regularExpression: state.textInputs['lastRegEx'],\n        inputText: state.textInputs['lastRegExTextSample'],\n    }\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withWidth()(RegExTester));\n"],"sourceRoot":""}