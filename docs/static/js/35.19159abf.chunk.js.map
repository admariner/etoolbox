{"version":3,"sources":["containers/PokerPlanning/message.factory.ts","containers/PokerPlanning/model.ts","containers/PokerPlanning/PokerCard.tsx","containers/PokerPlanning/services.ts","containers/PokerPlanning/styles.ts","containers/PokerPlanning/index.tsx","components/FeatureTitle/index.tsx","components/CopyButton/index.tsx","services/string-utils.ts"],"names":["buildVoteMessage","username","value","type","payload","estimate","estimatedAt","Date","undefined","POKER_PLANNING_RATINGS_FIBONNACI_ENHANCED","POKER_PLANNING_RATINGS_FIBONNACI","POKER_PLANNING_RATINGS_T_SHIRT_SIZES","POKER_PLANNING_RATINGS_T_SHIRT_SIZES_ENHENCED","CARDS_LISTING_CATEGORIES","fibonnacy","values","displayValue","slice","join","sorter","a","b","indexOf","map","v","replace","DEFAULT_HOSTNAME","SOCKET_STATES","Map","WebSocket","CLOSED","OPEN","CLOSING","CONNECTING","withWidth","width","isDisabled","isSelected","onClick","theme","useTheme","size","isWidthUp","Button","style","maxWidth","maxHeight","minWidth","minHeight","margin","spacing","variant","disabled","title","color","Typography","getSocketState","state","get","buildRouteURL","hostname","roomName","roomUUID","v4","buildFullRouteURL","params","document","location","href","split","StyledTableCell","withStyles","body","fontSize","whiteSpace","wordBreak","TableCell","StyledTableRow","root","backgroundColor","palette","action","hover","TableRow","useStyles","makeStyles","toolbar","height","padding","marginLeft","formControl","marginRight","submitEstimate","marginTop","display","justifyContent","flexWrap","teamEstimates","tableHeader","primary","main","mapStateToProps","lastPokerPlanningHostName","textInputs","lastPokerPlanningRoomUUID","lastPokerPlanningRoomName","lastPokerPlanningUsername","lastPokerCardsListingCategoryName","mapDispatchToProps","dispatch","storeInputText","name","setTextAction","connect","props","classes","navigate","useNavigate","showConfirmationDialog","useConfirmDialogContext","useParams","hostName","socketRef","useRef","useState","socketState","setSocketState","myEstimate","setMyEstimate","postponedMessage","setPostponedMessage","isEstimatesVisible","setIsEstimatesVisible","pokerSession","setPokerSession","trim","estimates","cardsListingCategoryName","pokerCards","e","filter","isNumeric","Number","estimatesSum","reduce","acc","val","average","length","estimatesAverage","Math","round","EPSILON","isEstimatesCleared","every","isUserMemberOfRoom","some","parseEstimates","isReadyToStartSession","isNotBlank","isReadyToVote","useEffect","current","onSocketStateUpdate","onSessionUpdate","protocol","url","socket","ReconnectingWebSocket","onopen","readyState","onerror","onclose","onmessage","ev","session","JSON","parse","data","createSocket","close","sendOrPostpone","message","send","stringify","Helmet","className","FeatureTitle","iconType","PockerPlanningIcon","noValidate","autoComplete","Grid","container","item","md","xs","FormControl","fullWidth","TextField","label","placeholder","onChange","target","Select","Object","entries","category","MenuItem","alignItems","CopyButton","Icon","ShareLink","hoverMessage","feedbackMessage","updateMyEstimate","TableContainer","component","Paper","Table","TableHead","scope","align","IconButton","description","onConfirm","TableBody","sort","localeCompare","estimateWhenDisplayON","estimateWhenDisplayOFF","buildRemoveUserMessage","titleWithIcon","titleContainer","icon","FeatureIcon","AssignmentTurnedIn","setToasterState","useToasterUpdate","substring","copy","format","open","autoHideDuration","isBlank","str","isNaN"],"mappings":"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","file":"static/js/35.19159abf.chunk.js","sourcesContent":["import { UserEstimate, UserMessage } from './model';\n\nexport const buildVoteMessage = (username = '', value?: string): UserMessage<UserEstimate> => ({\n    type: 'vote',\n    payload: {\n        username,\n        estimate: value,\n        estimatedAt: value ? new Date() : undefined,\n    },\n});\n\nexport const buildResetMessage = (): UserMessage => ({ type: 'reset' });\n\nexport const buildRemoveUserMessage = (username = ''): UserMessage<string> => ({ type: 'remove', payload: username });\n","export const POKER_PLANNING_RATINGS_FIBONNACI_ENHANCED: string[] = [\n    '?',\n    '0',\n    '0.5',\n    '1',\n    '1.5',\n    '2',\n    '2.5',\n    '3',\n    '3.5',\n    '4',\n    '4.5',\n    '5',\n    '8',\n    '13',\n    '20',\n    '40',\n    '100',\n];\n\nexport const POKER_PLANNING_RATINGS_FIBONNACI: string[] = ['?', '0', '1', '2', '3', '5', '8', '13', '20', '40', '100'];\n\nexport const POKER_PLANNING_RATINGS_T_SHIRT_SIZES: string[] = ['?', 'S', 'M', 'L', 'XL'];\n\nexport const POKER_PLANNING_RATINGS_T_SHIRT_SIZES_ENHENCED: string[] = ['?', 'XS', 'S', 'M', 'L', 'XL', 'XXL'];\n\nexport type CardsListingCategoryName = 'fibonnacy' | 'fibonnacy-variant-1' | 't-shirt' | 't-shirt-variant-1';\n\nexport type CardsListingCategory = {\n    values: string[];\n    displayValue: string;\n    sorter: (a: string, b: string) => number;\n};\n\nexport const CARDS_LISTING_CATEGORIES: Record<CardsListingCategoryName, CardsListingCategory> = {\n    fibonnacy: {\n        values: POKER_PLANNING_RATINGS_FIBONNACI,\n        displayValue: POKER_PLANNING_RATINGS_FIBONNACI.slice(2).join(' '),\n        sorter: (a: string, b: string) =>\n            POKER_PLANNING_RATINGS_FIBONNACI.indexOf(a) - POKER_PLANNING_RATINGS_FIBONNACI.indexOf(b),\n    },\n    'fibonnacy-variant-1': {\n        values: POKER_PLANNING_RATINGS_FIBONNACI_ENHANCED,\n        displayValue: POKER_PLANNING_RATINGS_FIBONNACI_ENHANCED.slice(2)\n            .map(v => v.replace('0.5', '½'))\n            .map(v => v.replace('.5', '½'))\n            .join(' '),\n        sorter: (a: string, b: string) =>\n            POKER_PLANNING_RATINGS_FIBONNACI_ENHANCED.indexOf(a) - POKER_PLANNING_RATINGS_FIBONNACI_ENHANCED.indexOf(b),\n    },\n    't-shirt': {\n        values: POKER_PLANNING_RATINGS_T_SHIRT_SIZES,\n        displayValue: POKER_PLANNING_RATINGS_T_SHIRT_SIZES.slice(1).join(' '),\n        sorter: (a: string, b: string) =>\n            POKER_PLANNING_RATINGS_T_SHIRT_SIZES.indexOf(a) - POKER_PLANNING_RATINGS_T_SHIRT_SIZES.indexOf(b),\n    },\n    't-shirt-variant-1': {\n        values: POKER_PLANNING_RATINGS_T_SHIRT_SIZES_ENHENCED,\n        displayValue: POKER_PLANNING_RATINGS_T_SHIRT_SIZES_ENHENCED.slice(1).join(' '),\n        sorter: (a: string, b: string) =>\n            POKER_PLANNING_RATINGS_T_SHIRT_SIZES_ENHENCED.indexOf(a) -\n            POKER_PLANNING_RATINGS_T_SHIRT_SIZES_ENHENCED.indexOf(b),\n    },\n};\n\nexport const DEFAULT_CARDS_LISTING_CATEGORY: CardsListingCategoryName = 'fibonnacy';\nexport const DEFAULT_ROOM_UUID = 'default';\nexport const DEFAULT_ROOM_NAME = 'default';\nexport const DEFAULT_HOSTNAME = 'localhost';\n\nexport type UserEstimate = {\n    username: string;\n    estimate?: string;\n    estimatedAt?: Date;\n};\n\nexport type PokerPlanningSession = {\n    lastUpdate: Date;\n    estimates: UserEstimate[];\n};\n\nexport type MessageType = 'reset' | 'vote' | 'remove';\n\nexport type UserMessage<TPayload = unknown> = {\n    type: MessageType;\n    payload?: TPayload;\n};\n\nexport type SocketState = 'open' | 'closed' | 'closing' | 'connecting';\n\nexport const SOCKET_STATES: Map<number, SocketState> = new Map([\n    [WebSocket.CLOSED, 'closed'],\n    [WebSocket.OPEN, 'open'],\n    [WebSocket.CLOSING, 'closing'],\n    [WebSocket.CONNECTING, 'connecting'],\n]);\n\nexport type EstimatesStats = {\n    values: number[];\n    estimatesSum: number;\n    estimatesAverage: number;\n    isEstimatesCleared: boolean;\n    isUserMemberOfRoom: boolean;\n};\n","import { Button, isWidthUp, Typography, useTheme, withWidth } from '@material-ui/core';\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\nimport React from 'react';\n\ntype PokerCardType = {\n    width: Breakpoint;\n    value: string;\n    isDisabled: boolean;\n    isSelected: boolean;\n    onClick: (value: string) => void;\n};\n\nconst PokerCard: React.FC<PokerCardType> = ({ width, value, isDisabled, isSelected, onClick }) => {\n    const theme = useTheme();\n    const size = isWidthUp('md', width) ? '70px' : '48px';\n\n    return (\n        <Button\n            style={{\n                maxWidth: size,\n                maxHeight: size,\n                minWidth: size,\n                minHeight: size,\n                margin: theme.spacing(1),\n            }}\n            variant={isSelected ? 'contained' : 'outlined'}\n            disabled={isDisabled}\n            title={`Estimate the current story point as: [${value}]`}\n            color=\"primary\"\n            onClick={() => onClick(value)}>\n            <Typography variant=\"h5\">{value}</Typography>\n        </Button>\n    );\n};\n\nexport default withWidth()(PokerCard);\n","import ReconnectingWebSocket from 'reconnecting-websocket';\nimport { v4 } from 'uuid';\nimport { isNumeric } from '../../services/string-utils';\nimport {\n    DEFAULT_HOSTNAME,\n    DEFAULT_ROOM_NAME,\n    EstimatesStats,\n    PokerPlanningSession,\n    SocketState,\n    SOCKET_STATES,\n    UserEstimate,\n} from './model';\n\ntype CreateSocketParams = {\n    hostname?: string;\n    roomUUID?: string;\n    onSocketStateUpdate: (socketState: SocketState) => void;\n    onSessionUpdate: (session: PokerPlanningSession) => void;\n};\n\nexport const createSocket = ({\n    hostname = DEFAULT_HOSTNAME,\n    roomUUID = v4(),\n    onSocketStateUpdate,\n    onSessionUpdate,\n}: CreateSocketParams): ReconnectingWebSocket => {\n    const protocol = document.location.protocol === 'https:' ? 'wss' : 'ws';\n    const url = `${protocol}://${hostname}/ws?roomUUID=${roomUUID}`;\n\n    const socket = new ReconnectingWebSocket(url);\n    socket.onopen = () => onSocketStateUpdate(getSocketState(socket.readyState));\n    socket.onerror = () => onSocketStateUpdate(getSocketState(socket.readyState));\n    socket.onclose = () => onSocketStateUpdate(getSocketState(socket.readyState));\n    socket.onmessage = (ev: MessageEvent<string>) => {\n        const session = JSON.parse(ev.data) as PokerPlanningSession;\n        onSessionUpdate(session);\n    };\n\n    return socket;\n};\n\nexport const parseEstimates = (estimates: UserEstimate[], username?: string): EstimatesStats => {\n    const values = estimates\n        .map(e => e.estimate)\n        .filter(e => !!e)\n        .filter(e => isNumeric(e))\n        .map(e => Number(e));\n    const estimatesSum = values.reduce((acc, val) => acc + Number(val), 0);\n    const average = values.length > 0 ? estimatesSum / values.length : 0;\n    const estimatesAverage = Math.round(average * 10 + Number.EPSILON) / 10;\n    const isEstimatesCleared = estimates.length > 0 && estimates.every(e => e.estimate === undefined);\n    const isUsernameProvided = !!username?.trim();\n    const isUserMemberOfRoom = isUsernameProvided && estimates.some(e => e.username === username);\n\n    return {\n        values,\n        estimatesSum,\n        estimatesAverage,\n        isEstimatesCleared,\n        isUserMemberOfRoom,\n    };\n};\n\nexport const getSocketState = (state: number): SocketState => SOCKET_STATES.get(state) ?? 'closed';\n\ntype BuildRouteURLParams = {\n    hostname?: string;\n    roomUUID?: string;\n    roomName?: string;\n};\n\nexport const buildRouteURL = ({\n    hostname = DEFAULT_HOSTNAME,\n    roomName = DEFAULT_ROOM_NAME,\n    roomUUID = v4(),\n}: BuildRouteURLParams) => `/PokerPlanning/${hostname}/${roomUUID}/${roomName}`;\n\nexport const extractSinglePageAppHostnameAndPath = () => document.location.href.split('/#/')[0];\n\nexport const buildFullRouteURL = (params: BuildRouteURLParams) =>\n    extractSinglePageAppHostnameAndPath() + '/#' + buildRouteURL(params);\n","import { makeStyles, TableCell, TableRow, withStyles } from '@material-ui/core';\n\nexport const StyledTableCell = withStyles(() => ({\n    body: {\n        fontSize: 14,\n        whiteSpace: 'normal',\n        wordBreak: 'break-word',\n    },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles(theme => ({\n    root: {\n        '&:nth-of-type(even)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\nexport const useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    toolbar: {\n        height: '100%',\n        margin: 0,\n        padding: 0,\n        '& > *': {\n            marginLeft: theme.spacing(1),\n        },\n    },\n    formControl: {\n        marginRight: theme.spacing(1),\n    },\n    submitEstimate: {\n        marginTop: theme.spacing(2),\n        display: 'flex',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n    },\n    teamEstimates: {\n        marginTop: theme.spacing(4),\n    },\n    tableHeader: {\n        backgroundColor: theme.palette.primary.main,\n    },\n}));\n","import {\n    FormControl,\n    Grid,\n    IconButton,\n    MenuItem,\n    Paper,\n    Select,\n    Table,\n    TableBody,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Typography,\n    useTheme,\n    withWidth,\n} from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\nimport TextField from '@material-ui/core/TextField';\nimport { default as RemoveEstimates, default as RemoveUser } from '@material-ui/icons/DeleteOutline';\nimport PockerPlanningIcon from '@material-ui/icons/Filter3';\nimport ShareLink from '@material-ui/icons/Share';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport ReconnectingWebSocket from 'reconnecting-websocket';\nimport { Dispatch } from 'redux';\nimport { setTextAction } from '../../actions/text-actions';\nimport { useConfirmDialogContext } from '../../components/ConfirmDialog/ConfirmDialogProvider';\nimport CopyButton from '../../components/CopyButton';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport { AppState } from '../../reducers';\nimport { isNotBlank } from '../../services/string-utils';\nimport { buildRemoveUserMessage, buildResetMessage, buildVoteMessage } from './message.factory';\nimport {\n    CardsListingCategory,\n    CardsListingCategoryName,\n    CARDS_LISTING_CATEGORIES,\n    DEFAULT_CARDS_LISTING_CATEGORY,\n    PokerPlanningSession,\n    SocketState,\n    UserMessage,\n} from './model';\nimport PokerCard from './PokerCard';\nimport { buildFullRouteURL, buildRouteURL, createSocket, parseEstimates } from './services';\nimport { StyledTableCell, StyledTableRow, useStyles } from './styles';\n\ninterface Props {\n    width: Breakpoint;\n    lastPokerPlanningRoomName?: string;\n    lastPokerPlanningUsername?: string;\n    lastPokerPlanningRoomUUID?: string;\n    lastPokerPlanningHostName?: string;\n    lastPokerCardsListingCategoryName?: CardsListingCategoryName;\n    storeInputText: (name: string, value: string) => void;\n}\n\nconst PokerPlanning: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const navigate = useNavigate();\n    const { showConfirmationDialog } = useConfirmDialogContext();\n\n    // component inputs\n    const { hostName, roomUUID, roomName } = useParams();\n    const {\n        lastPokerPlanningRoomUUID,\n        lastPokerPlanningRoomName,\n        lastPokerPlanningUsername,\n        lastPokerPlanningHostName,\n        lastPokerCardsListingCategoryName,\n        storeInputText,\n    } = props;\n\n    // component state\n    const socketRef = useRef<ReconnectingWebSocket>();\n    const [socketState, setSocketState] = useState<SocketState>('closed');\n    const [myEstimate, setMyEstimate] = useState<string>();\n    const [postponedMessage, setPostponedMessage] = useState<UserMessage>();\n    const [isEstimatesVisible, setIsEstimatesVisible] = useState<boolean>(false);\n    const [pokerSession, setPokerSession] = useState<PokerPlanningSession>();\n\n    // computing\n    const title = `Poker planning ${lastPokerPlanningRoomName ?? ''}`.trim();\n    const estimates = pokerSession?.estimates ?? [];\n    const cardsListingCategoryName: CardsListingCategoryName = lastPokerCardsListingCategoryName\n        ? lastPokerCardsListingCategoryName\n        : DEFAULT_CARDS_LISTING_CATEGORY;\n    const pokerCards: CardsListingCategory = CARDS_LISTING_CATEGORIES[cardsListingCategoryName];\n    const { estimatesAverage, isEstimatesCleared, isUserMemberOfRoom } = parseEstimates(\n        estimates,\n        lastPokerPlanningUsername,\n    );\n    const isReadyToStartSession =\n        isNotBlank(lastPokerPlanningHostName) &&\n        isNotBlank(lastPokerPlanningRoomUUID) &&\n        isNotBlank(hostName) &&\n        isNotBlank(roomUUID);\n    const isReadyToVote =\n        isNotBlank(lastPokerPlanningHostName) &&\n        isNotBlank(lastPokerPlanningRoomUUID) &&\n        isNotBlank(lastPokerPlanningRoomName) &&\n        isNotBlank(lastPokerPlanningUsername);\n\n    // keep the store in sync whenever route params are updated\n    useEffect(() => {\n        if (roomName && roomUUID && hostName) {\n            storeInputText('lastPokerPlanningRoomName', roomName);\n            storeInputText('lastPokerPlanningRoomUUID', roomUUID);\n            storeInputText('lastPokerPlanningHostName', hostName);\n        }\n    }, [roomUUID, roomName, hostName, storeInputText]);\n\n    useEffect(() => {\n        if (!isReadyToStartSession) {\n            return;\n        }\n\n        socketRef.current = createSocket({\n            hostname: lastPokerPlanningHostName,\n            roomUUID: lastPokerPlanningRoomUUID,\n            onSessionUpdate: setPokerSession,\n            onSocketStateUpdate: setSocketState,\n        });\n    }, [socketRef, isReadyToStartSession, lastPokerPlanningHostName, lastPokerPlanningRoomUUID]);\n\n    useEffect(() => {\n        // socket cleanup whenever component unmount\n        return () => socketRef.current?.close();\n    }, []);\n\n    const handleCreateNewRoom = () => {\n        const url = buildRouteURL({ hostname: lastPokerPlanningHostName, roomName: lastPokerPlanningRoomName });\n        navigate(url, { replace: true });\n    };\n\n    useEffect(() => {\n        if (isEstimatesCleared) {\n            setIsEstimatesVisible(false);\n            setMyEstimate(undefined);\n        }\n    }, [isEstimatesCleared]);\n\n    const updateMyEstimate = (value?: string) => {\n        if (value !== myEstimate) {\n            setMyEstimate(value);\n            sendOrPostpone(buildVoteMessage(lastPokerPlanningUsername, value));\n        } else {\n            setMyEstimate(undefined); // user is un-voting\n            sendOrPostpone(buildVoteMessage(lastPokerPlanningUsername));\n        }\n    };\n\n    const sendOrPostpone = (message: UserMessage) => {\n        if (socketRef.current && socketState === 'open') {\n            socketRef.current.send(JSON.stringify(message));\n        } else {\n            setPostponedMessage(message);\n        }\n    };\n\n    const handleClearAllVotes = () =>\n        showConfirmationDialog({\n            title: 'Confirmation',\n            description: 'Are you sure you want to delete all votes?',\n            onConfirm: () => sendOrPostpone(buildResetMessage()),\n        });\n\n    // send delayed message (if any)\n    useEffect(() => {\n        if (socketRef.current && socketState === 'open' && postponedMessage) {\n            socketRef.current.send(JSON.stringify(postponedMessage));\n            setPostponedMessage(undefined);\n        }\n    }, [postponedMessage, socketState]);\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={PockerPlanningIcon} title={title} />\n\n                <form noValidate autoComplete=\"off\">\n                    <Grid container spacing={1}>\n                        <Grid item md={2} xs={6}>\n                            <FormControl className={classes.formControl} fullWidth={true}>\n                                <TextField\n                                    label={`Serveur (channel ${socketState})`}\n                                    placeholder=\"Type the poker plannind hostname here\"\n                                    variant=\"outlined\"\n                                    fullWidth={true}\n                                    margin=\"normal\"\n                                    value={lastPokerPlanningHostName}\n                                    onChange={e => storeInputText('lastPokerPlanningHostName', e.target.value)}\n                                />\n                            </FormControl>\n                        </Grid>\n                        <Grid item md={2} xs={6}>\n                            <FormControl className={classes.formControl} fullWidth={true}>\n                                <TextField\n                                    label=\"Team name\"\n                                    placeholder=\"Type the team name here\"\n                                    variant=\"outlined\"\n                                    fullWidth={true}\n                                    margin=\"normal\"\n                                    value={lastPokerPlanningRoomName}\n                                    onChange={e => storeInputText('lastPokerPlanningRoomName', e.target.value)}\n                                />\n                            </FormControl>\n                        </Grid>\n                        <Grid item md={2} xs={6}>\n                            <FormControl className={classes.formControl} fullWidth={true}>\n                                <TextField\n                                    label=\"Your name\"\n                                    placeholder=\"Type your name here\"\n                                    variant=\"outlined\"\n                                    fullWidth={true}\n                                    margin=\"normal\"\n                                    value={lastPokerPlanningUsername}\n                                    onChange={e => storeInputText('lastPokerPlanningUsername', e.target.value)}\n                                />\n                            </FormControl>\n                        </Grid>\n                        <Grid item md={3} xs={6}>\n                            <FormControl className={classes.formControl} fullWidth={true}>\n                                <Select\n                                    style={{ marginTop: theme.spacing(2) }}\n                                    variant=\"outlined\"\n                                    fullWidth={true}\n                                    value={cardsListingCategoryName}\n                                    onChange={(e: any) =>\n                                        storeInputText('lastPokerCardsListingCategoryName', e.target.value)\n                                    }>\n                                    {Object.entries(CARDS_LISTING_CATEGORIES).map(([name, category]) => (\n                                        <MenuItem key={name} value={name}>\n                                            {category.displayValue}\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </Grid>{' '}\n                        <Grid item md={3} xs={12}>\n                            <Grid container justifyContent=\"flex-end\" alignItems=\"center\" className={classes.toolbar}>\n                                <Button\n                                    variant=\"contained\"\n                                    title=\"Register the team and start planning in a new room\"\n                                    color=\"primary\"\n                                    onClick={handleCreateNewRoom}>\n                                    New\n                                </Button>\n                                <Button\n                                    variant=\"contained\"\n                                    title=\"Enter existing room\"\n                                    color=\"primary\"\n                                    disabled={isUserMemberOfRoom || !isReadyToVote}\n                                    onClick={() => sendOrPostpone(buildVoteMessage(lastPokerPlanningUsername))}>\n                                    Join\n                                </Button>\n                                <CopyButton\n                                    data={buildFullRouteURL({\n                                        hostname: lastPokerPlanningHostName,\n                                        roomUUID: lastPokerPlanningRoomUUID,\n                                        roomName: lastPokerPlanningRoomName,\n                                    })}\n                                    Icon={ShareLink}\n                                    hoverMessage=\"Copy link to clipboard for sharing\"\n                                    feedbackMessage=\"Link copied to clipboard, you can now share to all members\"\n                                />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </form>\n\n                <div className={classes.submitEstimate}>\n                    {pokerCards.values.map(value => (\n                        <PokerCard\n                            key={value}\n                            isDisabled={!isReadyToVote}\n                            isSelected={myEstimate === value}\n                            value={value}\n                            onClick={() => updateMyEstimate(value)}\n                        />\n                    ))}\n                </div>\n\n                <div className={classes.teamEstimates}>\n                    <TableContainer component={Paper}>\n                        <Table size=\"small\">\n                            <TableHead className={classes.tableHeader}>\n                                <TableRow>\n                                    <StyledTableCell component=\"th\" scope=\"row\" width={30}></StyledTableCell>\n                                    <StyledTableCell component=\"th\" scope=\"row\">\n                                        Team member\n                                    </StyledTableCell>\n                                    <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                        Points\n                                        <IconButton\n                                            title=\"Toggle story points visibility\"\n                                            onClick={() => setIsEstimatesVisible(v => !v)}>\n                                            {isEstimatesVisible ? <VisibilityOff /> : <Visibility />}\n                                        </IconButton>\n                                        <IconButton onClick={handleClearAllVotes} title=\"Clear all votes\">\n                                            <RemoveEstimates />\n                                        </IconButton>\n                                    </StyledTableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {estimates\n                                    .sort((a, b) => a.username.localeCompare(b.username))\n                                    .map(({ username, estimate }) => {\n                                        const estimateWhenDisplayON = estimate ?? '…';\n                                        const estimateWhenDisplayOFF = estimate ? '✔' : '…';\n                                        return (\n                                            <StyledTableRow key={username}>\n                                                <StyledTableCell width={30}>\n                                                    <IconButton\n                                                        onClick={() => sendOrPostpone(buildRemoveUserMessage(username))}\n                                                        title={`Remove user \"${username}\"`}>\n                                                        <RemoveUser />\n                                                    </IconButton>\n                                                </StyledTableCell>\n                                                <StyledTableCell>{username}</StyledTableCell>\n                                                <StyledTableCell align=\"center\">\n                                                    {isEstimatesVisible\n                                                        ? estimateWhenDisplayON\n                                                        : estimateWhenDisplayOFF}\n                                                </StyledTableCell>\n                                            </StyledTableRow>\n                                        );\n                                    })}\n                                <StyledTableRow key=\"average\">\n                                    <StyledTableCell width={30}></StyledTableCell>\n                                    <StyledTableCell>\n                                        <Typography>Story points average</Typography>\n                                    </StyledTableCell>\n                                    <StyledTableCell align=\"center\">\n                                        <Typography>{isEstimatesVisible ? estimatesAverage : ''}</Typography>\n                                    </StyledTableCell>\n                                </StyledTableRow>\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        lastPokerPlanningHostName: state.textInputs['lastPokerPlanningHostName'],\n        lastPokerPlanningRoomUUID: state.textInputs['lastPokerPlanningRoomUUID'],\n        lastPokerPlanningRoomName: state.textInputs['lastPokerPlanningRoomName'],\n        lastPokerPlanningUsername: state.textInputs['lastPokerPlanningUsername'],\n        lastPokerCardsListingCategoryName: state.textInputs[\n            'lastPokerCardsListingCategoryName'\n        ] as CardsListingCategoryName,\n    };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withWidth()(PokerPlanning));\n","import { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        wordBreak: 'break-word',\n    },\n    titleWithIcon: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    titleContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    icon: {\n        height: '40px',\n        width: '40px',\n        marginRight: theme.spacing(1),\n    },\n}));\n\ninterface Props {\n    title: string;\n    iconType: any;\n}\n\nconst FeatureTitle: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const FeatureIcon = props.iconType;\n\n    return (\n        <div className={classes.titleContainer}>\n            <div className={classes.titleWithIcon}>\n                <FeatureIcon className={classes.icon} />\n                <Typography variant=\"h5\" className={classes.title}>\n                    {props.title}\n                </Typography>\n            </div>\n        </div>\n    );\n};\n\nexport default FeatureTitle;\n","import { Button, SvgIconTypeMap } from '@material-ui/core';\nimport { OverridableComponent } from '@material-ui/core/OverridableComponent';\nimport AssignmentTurnedIn from '@material-ui/icons/AssignmentTurnedIn';\nimport * as copy from 'copy-to-clipboard';\nimport React from 'react';\nimport { useToasterUpdate } from '../Toaster/ToasterProvider';\n\ninterface Props {\n    data?: string;\n    hoverMessage?: string;\n    feedbackMessage?: string;\n    Icon?: OverridableComponent<SvgIconTypeMap<unknown, 'svg'>>;\n}\n\nconst CopyButton: React.FC<Props> = ({ data, hoverMessage, feedbackMessage, Icon = AssignmentTurnedIn }: Props) => {\n    const { setToasterState } = useToasterUpdate();\n\n    const handleCopy = () => {\n        if (!data) {\n            return;\n        }\n\n        const message = feedbackMessage ?? `Content copied into clipboard: ${data.substring(0, 25)} …`;\n\n        copy.default(data, { format: 'text/plain' });\n        setToasterState({ open: true, message, type: 'success', autoHideDuration: 2000 });\n    };\n\n    return (\n        <Button\n            onClick={handleCopy}\n            disabled={!data}\n            title={hoverMessage ?? 'Copy to clipboard'}\n            variant=\"contained\"\n            color=\"primary\">\n            <Icon />\n        </Button>\n    );\n};\n\nexport default CopyButton;\n","export function isBlank(str: string | undefined | null) {\n    if (!str || str.trim().length === 0) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function isNotBlank(str: string | undefined | null) {\n    return !isBlank(str);\n}\n\nexport const isNumeric = (val?: string): boolean => !isNaN(Number(val));\n"],"sourceRoot":""}