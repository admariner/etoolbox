{"version":3,"sources":["components/ConfirmDialog/index.tsx","containers/PokerPlanning/model.ts","containers/PokerPlanning/PokerCard.tsx","containers/PokerPlanning/services.ts","containers/PokerPlanning/styles.ts","containers/PokerPlanning/index.tsx","components/FeatureTitle/index.tsx","components/CopyButton/index.tsx","services/string-utils.ts"],"names":["ConfirmDialog","title","children","isOpen","setIsOpen","onConfirm","Dialog","open","onClose","DialogTitle","id","DialogContent","DialogActions","Button","variant","onClick","color","POKER_PLANNING_RATINGS_ENHANCED","SOCKET_STATES","Map","WebSocket","CLOSED","OPEN","CLOSING","CONNECTING","withWidth","width","value","isDisabled","isSelected","theme","useTheme","size","isWidthUp","style","maxWidth","maxHeight","minWidth","minHeight","margin","spacing","disabled","Typography","getSocketState","state","get","StyledTableCell","withStyles","body","fontSize","whiteSpace","wordBreak","TableCell","StyledTableRow","root","backgroundColor","palette","action","hover","TableRow","useStyles","makeStyles","toolbar","height","padding","marginLeft","formControl","marginRight","submitEstimate","marginTop","display","justifyContent","flexWrap","estimatesVisibility","alignItems","teamEstimates","tableHeader","primary","main","mapStateToProps","lastPockerPlanningHostName","textInputs","lastPockerPlanningRoomUUID","lastPockerPlanningRoomName","lastPockerPlanningUsername","mapDispatchToProps","dispatch","storeInputText","name","setTextAction","connect","props","classes","navigate","useNavigate","useParams","hostName","roomUUID","roomName","socketRef","useRef","useState","myEstimate","setMyEstimate","socketState","setSocketState","postponedMessage","setPostponedMessage","isConfirmClearVotesOpen","setIsConfirmClearVotesOpen","isEstimatesVisible","setIsEstimatesVisible","estimates","setEstimates","username","values","map","e","estimate","filter","undefined","Number","estimatesSum","reduce","acc","val","average","length","estimatesAverage","Math","round","EPSILON","isEstimatesCleared","every","isUserMemberOfRoom","trim","some","parseEstimates","isReadyToStartSession","isNotBlank","isReadyToVote","useEffect","protocol","window","location","url","socket","ReconnectingWebSocket","onopen","readyState","onerror","onclose","onmessage","ev","session","JSON","parse","data","current","close","send","stringify","Helmet","className","FeatureTitle","iconType","PockerPlanningIcon","noValidate","autoComplete","Grid","container","item","md","sm","xs","FormControl","fullWidth","TextField","label","placeholder","onChange","target","newRoomUUID","v4","replace","type","payload","CopyButton","href","Icon","ShareLink","hoverMessage","feedbackMessage","message","estimatedAt","Date","updateMyEstimate","TableContainer","component","Paper","Table","TableHead","scope","align","IconButton","v","TableBody","sort","a","b","localeCompare","estimateWhenDisplayON","estimateWhenDisplayOFF","handleRemoveUser","titleWithIcon","titleContainer","icon","FeatureIcon","AssignmentTurnedIn","setToasterState","useToasterUpdate","substring","copy","format","autoHideDuration","isBlank","str"],"mappings":"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","file":"static/js/35.d61ed87b.chunk.js","sourcesContent":["import React, { PropsWithChildren } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\ntype ConfirmDialogProps = PropsWithChildren<{\n    title: string;\n    isOpen: boolean;\n    setIsOpen: (value: boolean) => void;\n    onConfirm: () => void;\n}>;\n\nconst ConfirmDialog: React.FC<ConfirmDialogProps> = ({ title, children, isOpen, setIsOpen, onConfirm }) => {\n    return (\n        <Dialog open={isOpen} onClose={() => setIsOpen(false)} aria-labelledby=\"confirm-dialog\">\n            <DialogTitle id=\"confirm-dialog\">{title}</DialogTitle>\n            <DialogContent>{children}</DialogContent>\n            <DialogActions>\n                <Button variant=\"contained\" onClick={() => setIsOpen(false)} color=\"secondary\">\n                    No\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => {\n                        setIsOpen(false);\n                        onConfirm();\n                    }}\n                    color=\"default\">\n                    Yes\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default ConfirmDialog;\n","export const POKER_PLANNING_RATINGS_ENHANCED: string[] = [\n    '?',\n    '0',\n    '0.5',\n    '1',\n    '1.5',\n    '2',\n    '2.5',\n    '3',\n    '3.5',\n    '4',\n    '4.5',\n    '5',\n    '8',\n    '13',\n    '20',\n    '40',\n    '100',\n];\n\nexport type UserEstimate = {\n    username: string;\n    estimate?: string;\n    estimatedAt?: Date;\n};\n\nexport type PokerPlanningSession = {\n    lastUpdate: Date;\n    estimates: UserEstimate[];\n};\n\nexport type MessageType = 'reset' | 'vote' | 'remove';\n\nexport type UserMessage = {\n    type: MessageType;\n    payload?: unknown;\n};\n\nexport type SocketState = 'open' | 'closed' | 'closing' | 'connecting';\n\nexport const SOCKET_STATES: Map<number, SocketState> = new Map([\n    [WebSocket.CLOSED, 'closed'],\n    [WebSocket.OPEN, 'open'],\n    [WebSocket.CLOSING, 'closing'],\n    [WebSocket.CONNECTING, 'connecting'],\n]);\n\nexport type EstimatesStats = {\n    values: number[];\n    estimatesSum: number;\n    estimatesAverage: number;\n    isEstimatesCleared: boolean;\n    isUserMemberOfRoom: boolean;\n};\n","import { Button, isWidthUp, Typography, useTheme, withWidth } from '@material-ui/core';\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\nimport React from 'react';\n\ntype PokerCardType = {\n    width: Breakpoint;\n    value: string;\n    isDisabled: boolean;\n    isSelected: boolean;\n    onClick: (value: string) => void;\n};\n\nconst PokerCard: React.FC<PokerCardType> = ({ width, value, isDisabled, isSelected, onClick }) => {\n    const theme = useTheme();\n    const size = isWidthUp('md', width) ? '70px' : '48px';\n\n    return (\n        <Button\n            style={{\n                maxWidth: size,\n                maxHeight: size,\n                minWidth: size,\n                minHeight: size,\n                margin: theme.spacing(1),\n            }}\n            variant={isSelected ? 'contained' : 'outlined'}\n            disabled={isDisabled}\n            title={`Estimate the current story point as: [${value}]`}\n            color=\"primary\"\n            onClick={() => onClick(value)}>\n            <Typography variant=\"h5\">{value}</Typography>\n        </Button>\n    );\n};\n\nexport default withWidth()(PokerCard);\n","import { EstimatesStats, SocketState, SOCKET_STATES, UserEstimate } from './model';\n\nexport const parseEstimates = (estimates: UserEstimate[], username?: string): EstimatesStats => {\n    const values = estimates\n        .map(e => e.estimate)\n        .filter(e => e !== null && e !== undefined && e !== '?')\n        .map(e => Number(e));\n    const estimatesSum = values.reduce((acc, val) => acc + Number(val), 0);\n    const average = values.length > 0 ? estimatesSum / values.length : 0;\n    const estimatesAverage = Math.round(average * 10 + Number.EPSILON) / 10;\n    const isEstimatesCleared = estimates.length > 0 && estimates.every(e => e.estimate === undefined);\n    const isUsernameProvided = !!username?.trim();\n    const isUserMemberOfRoom = isUsernameProvided && estimates.some(e => e.username === username);\n\n    return {\n        values,\n        estimatesSum,\n        estimatesAverage,\n        isEstimatesCleared,\n        isUserMemberOfRoom,\n    };\n};\n\nexport const getSocketState = (state: number): SocketState => SOCKET_STATES.get(state) ?? 'closed';\n","import { makeStyles, TableCell, TableRow, withStyles } from '@material-ui/core';\n\nexport const StyledTableCell = withStyles(() => ({\n    body: {\n        fontSize: 14,\n        whiteSpace: 'normal',\n        wordBreak: 'break-word',\n    },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles(theme => ({\n    root: {\n        '&:nth-of-type(even)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\nexport const useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    toolbar: {\n        height: '100%',\n        margin: 0,\n        padding: 0,\n        '& > *': {\n            marginLeft: theme.spacing(1),\n        },\n    },\n    formControl: {\n        marginRight: theme.spacing(1),\n    },\n    submitEstimate: {\n        marginTop: theme.spacing(2),\n        display: 'flex',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n    },\n    estimatesVisibility: {\n        alignItems: 'center',\n    },\n    teamEstimates: {\n        marginTop: theme.spacing(4),\n    },\n    tableHeader: {\n        backgroundColor: theme.palette.primary.main,\n    },\n}));\n","import {\n    FormControl,\n    Grid,\n    isWidthUp,\n    IconButton,\n    Paper,\n    Table,\n    TableBody,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Typography,\n    withWidth,\n} from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\nimport TextField from '@material-ui/core/TextField';\nimport RemoveEstimates from '@material-ui/icons/DeleteOutline';\nimport PockerPlanningIcon from '@material-ui/icons/Filter3';\nimport ShareLink from '@material-ui/icons/Share';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport RemoveUser from '@material-ui/icons/DeleteOutline';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport ReconnectingWebSocket from 'reconnecting-websocket';\nimport { Dispatch } from 'redux';\nimport { v4 } from 'uuid';\nimport { setTextAction } from '../../actions/text-actions';\nimport ConfirmDialog from '../../components/ConfirmDialog';\nimport CopyButton from '../../components/CopyButton';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport { AppState } from '../../reducers';\nimport { isNotBlank } from '../../services/string-utils';\nimport { PokerPlanningSession, POKER_PLANNING_RATINGS_ENHANCED, SocketState, UserEstimate, UserMessage } from './model';\nimport PokerCard from './PokerCard';\nimport { getSocketState, parseEstimates } from './services';\nimport { StyledTableCell, StyledTableRow, useStyles } from './styles';\n\ninterface Props {\n    width: Breakpoint;\n    lastPockerPlanningRoomName?: string;\n    lastPockerPlanningUsername?: string;\n    lastPockerPlanningRoomUUID?: string;\n    lastPockerPlanningHostName?: string;\n    storeInputText: (name: string, value: string) => void;\n}\n\nconst PokerPlanning: React.FC<Props> = (props: Props) => {\n    const title = 'Porker planning';\n    const classes = useStyles();\n    const navigate = useNavigate();\n\n    // component inputs\n    const { hostName, roomUUID, roomName } = useParams();\n    const {\n        lastPockerPlanningRoomUUID,\n        lastPockerPlanningRoomName,\n        lastPockerPlanningUsername,\n        lastPockerPlanningHostName,\n        storeInputText,\n    } = props;\n\n    // component state\n    const socketRef = useRef<ReconnectingWebSocket>();\n    const [myEstimate, setMyEstimate] = useState<string>();\n    const [socketState, setSocketState] = useState<SocketState>('closed');\n    const [postponedMessage, setPostponedMessage] = useState<UserMessage>();\n    const [isConfirmClearVotesOpen, setIsConfirmClearVotesOpen] = useState<boolean>(false);\n    const [isEstimatesVisible, setIsEstimatesVisible] = useState<boolean>(false);\n    const [estimates, setEstimates] = useState<UserEstimate[]>([]);\n\n    // computing\n    const { estimatesAverage, isEstimatesCleared, isUserMemberOfRoom } = parseEstimates(\n        estimates,\n        lastPockerPlanningUsername,\n    );\n    const isReadyToStartSession =\n        isNotBlank(lastPockerPlanningHostName) &&\n        isNotBlank(lastPockerPlanningRoomUUID) &&\n        isNotBlank(hostName) &&\n        isNotBlank(roomUUID);\n    const isReadyToVote =\n        isNotBlank(lastPockerPlanningHostName) &&\n        isNotBlank(lastPockerPlanningRoomUUID) &&\n        isNotBlank(lastPockerPlanningRoomName) &&\n        isNotBlank(lastPockerPlanningUsername);\n\n    // keep the store in sync whenever route params are updated\n    useEffect(() => {\n        if (roomName && roomUUID && hostName) {\n            storeInputText('lastPockerPlanningRoomName', roomName);\n            storeInputText('lastPockerPlanningRoomUUID', roomUUID);\n            storeInputText('lastPockerPlanningHostName', hostName);\n        }\n    }, [roomUUID, roomName, hostName, storeInputText]);\n\n    useEffect(() => {\n        if (!isReadyToStartSession) {\n            return;\n        }\n\n        // socket creation on component unmount\n        const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\n        const url = `${protocol}://${lastPockerPlanningHostName}/ws?roomUUID=${lastPockerPlanningRoomUUID}`;\n        const socket = new ReconnectingWebSocket(url);\n        socket.onopen = () => setSocketState(getSocketState(socket.readyState));\n        socket.onerror = () => setSocketState(getSocketState(socket.readyState));\n        socket.onclose = () => setSocketState(getSocketState(socket.readyState));\n        socket.onmessage = (ev: MessageEvent<string>) => {\n            const session = JSON.parse(ev.data) as PokerPlanningSession;\n            setEstimates(session.estimates);\n        };\n\n        socketRef.current = socket;\n    }, [socketRef, isReadyToStartSession, lastPockerPlanningHostName, lastPockerPlanningRoomUUID]);\n\n    useEffect(() => {\n        // socket cleanup whenever component unmount\n        return () => socketRef.current?.close();\n    }, []);\n\n    // send delayed message (if any)\n    useEffect(() => {\n        if (socketState === 'open' && postponedMessage) {\n            socketRef.current?.send(JSON.stringify(postponedMessage));\n            setPostponedMessage(undefined);\n        }\n    }, [postponedMessage, socketState]);\n\n    const handleCreateNewRoom = () => {\n        const newRoomUUID = v4();\n        const url = `/PokerPlanning/${lastPockerPlanningHostName}/${newRoomUUID}/${lastPockerPlanningRoomName}`;\n        navigate(url, { replace: true });\n    };\n\n    const handleClearEstimates = () => socketRef.current?.send(JSON.stringify({ type: 'reset' }));\n\n    useEffect(() => {\n        if (isEstimatesCleared) {\n            setIsEstimatesVisible(false);\n            setMyEstimate(undefined);\n        }\n    }, [isEstimatesCleared]);\n\n    const handleRemoveUser = (username: string) =>\n        socketRef.current?.send(JSON.stringify({ type: 'remove', payload: username }));\n\n    const handleEnterRoom = () => {\n        if (!lastPockerPlanningUsername) {\n            return;\n        }\n\n        socketRef.current?.send(\n            JSON.stringify({\n                type: 'vote',\n                payload: {\n                    username: lastPockerPlanningUsername ?? '',\n                },\n            }),\n        );\n    };\n\n    const updateMyEstimate = (value: string) => {\n        setMyEstimate(value);\n        const message: UserMessage = {\n            type: 'vote',\n            payload: {\n                username: lastPockerPlanningUsername ?? '',\n                estimate: value,\n                estimatedAt: value ? new Date() : undefined,\n            },\n        };\n\n        if (socketRef.current?.readyState === WebSocket.OPEN) {\n            socketRef.current.send(JSON.stringify(message));\n        } else {\n            setPostponedMessage(message);\n        }\n    };\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={PockerPlanningIcon} title={title} />\n\n                <form noValidate autoComplete=\"off\">\n                    <Grid container spacing={1}>\n                        <Grid item md={3} sm={6} xs={12}>\n                            <FormControl className={classes.formControl} fullWidth={true}>\n                                <TextField\n                                    label={`Serveur (channel ${socketState})`}\n                                    placeholder=\"Type the poker plannind hostname here\"\n                                    variant=\"outlined\"\n                                    fullWidth={true}\n                                    margin=\"normal\"\n                                    value={lastPockerPlanningHostName}\n                                    onChange={e => storeInputText('lastPockerPlanningHostName', e.target.value)}\n                                />\n                            </FormControl>\n                        </Grid>\n                        <Grid item md={3} sm={6} xs={12}>\n                            <FormControl className={classes.formControl} fullWidth={true}>\n                                <TextField\n                                    label=\"Team name\"\n                                    placeholder=\"Type the team name here\"\n                                    variant=\"outlined\"\n                                    fullWidth={true}\n                                    margin=\"normal\"\n                                    value={lastPockerPlanningRoomName}\n                                    onChange={e => storeInputText('lastPockerPlanningRoomName', e.target.value)}\n                                />\n                            </FormControl>\n                        </Grid>\n                        <Grid item md={3} sm={6} xs={12}>\n                            <FormControl className={classes.formControl} fullWidth={true}>\n                                <TextField\n                                    label=\"Your name\"\n                                    placeholder=\"Type your name here\"\n                                    variant=\"outlined\"\n                                    fullWidth={true}\n                                    margin=\"normal\"\n                                    value={lastPockerPlanningUsername}\n                                    onChange={e => storeInputText('lastPockerPlanningUsername', e.target.value)}\n                                />\n                            </FormControl>\n                        </Grid>\n                        <Grid item md={3} sm={6} xs={12}>\n                            <Grid container justifyContent=\"flex-end\" alignItems=\"center\" className={classes.toolbar}>\n                                <Button\n                                    variant=\"contained\"\n                                    title=\"Register the team and start planning in a new room\"\n                                    color=\"primary\"\n                                    onClick={handleCreateNewRoom}>\n                                    New room\n                                </Button>\n                                <Button\n                                    variant=\"contained\"\n                                    title=\"Enter existing room\"\n                                    color=\"primary\"\n                                    disabled={isUserMemberOfRoom || !isReadyToVote}\n                                    onClick={handleEnterRoom}>\n                                    Join\n                                </Button>\n                                <CopyButton\n                                    data={window.location.href}\n                                    Icon={ShareLink}\n                                    hoverMessage=\"Copy link to clipboard for sharing\"\n                                    feedbackMessage=\"Link copied to clipboard, you can now share to all members\"\n                                />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </form>\n\n                <div className={classes.submitEstimate}>\n                    {POKER_PLANNING_RATINGS_ENHANCED.map(value => (\n                        <PokerCard\n                            key={value}\n                            isDisabled={!isReadyToVote}\n                            isSelected={myEstimate === value}\n                            value={value}\n                            onClick={() => updateMyEstimate(value)}\n                        />\n                    ))}\n                </div>\n\n                <div className={classes.teamEstimates}>\n                    <TableContainer component={Paper}>\n                        <Table size={isWidthUp('md', props.width) ? 'medium' : 'small'}>\n                            <TableHead className={classes.tableHeader}>\n                                <TableRow>\n                                    <StyledTableCell component=\"th\" scope=\"row\" width={30}></StyledTableCell>\n                                    <StyledTableCell component=\"th\" scope=\"row\">\n                                        Team member\n                                    </StyledTableCell>\n                                    <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                        Points\n                                        <IconButton\n                                            title=\"Toggle story points visibility\"\n                                            onClick={() => setIsEstimatesVisible(v => !v)}>\n                                            {isEstimatesVisible ? <Visibility /> : <VisibilityOff />}\n                                        </IconButton>\n                                        <IconButton\n                                            onClick={() => setIsConfirmClearVotesOpen(true)}\n                                            title=\"Clear all votes\">\n                                            <RemoveEstimates />\n                                        </IconButton>\n                                    </StyledTableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {estimates\n                                    .sort((a, b) => a.username.localeCompare(b.username))\n                                    .map(({ username, estimate }) => {\n                                        const estimateWhenDisplayON = estimate ?? '…';\n                                        const estimateWhenDisplayOFF = estimate ? '✔' : '…';\n                                        return (\n                                            <StyledTableRow key={username}>\n                                                <StyledTableCell width={30}>\n                                                    <IconButton\n                                                        onClick={() => handleRemoveUser(username)}\n                                                        title={`Remove user \"${username}\"`}>\n                                                        <RemoveUser />\n                                                    </IconButton>\n                                                </StyledTableCell>\n                                                <StyledTableCell>{username}</StyledTableCell>\n                                                <StyledTableCell align=\"center\">\n                                                    {isEstimatesVisible\n                                                        ? estimateWhenDisplayON\n                                                        : estimateWhenDisplayOFF}\n                                                </StyledTableCell>\n                                            </StyledTableRow>\n                                        );\n                                    })}\n                                <StyledTableRow key=\"average\">\n                                    <StyledTableCell width={30}></StyledTableCell>\n                                    <StyledTableCell>\n                                        <Typography>Story points average</Typography>\n                                    </StyledTableCell>\n                                    <StyledTableCell align=\"center\">\n                                        <Typography>\n                                            {isEstimatesVisible ? estimatesAverage : <VisibilityOff />}\n                                        </Typography>\n                                    </StyledTableCell>\n                                </StyledTableRow>\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </div>\n            </div>\n\n            <ConfirmDialog\n                title=\"Confirmation\"\n                isOpen={isConfirmClearVotesOpen}\n                setIsOpen={setIsConfirmClearVotesOpen}\n                onConfirm={handleClearEstimates}>\n                Are you sure you want to delete all votes?\n            </ConfirmDialog>\n        </>\n    );\n};\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        lastPockerPlanningHostName: state.textInputs['lastPockerPlanningHostName'],\n        lastPockerPlanningRoomUUID: state.textInputs['lastPockerPlanningRoomUUID'],\n        lastPockerPlanningRoomName: state.textInputs['lastPockerPlanningRoomName'],\n        lastPockerPlanningUsername: state.textInputs['lastPockerPlanningUsername'],\n    };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withWidth()(PokerPlanning));\n","import { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        wordBreak: 'break-word',\n    },\n    titleWithIcon: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    titleContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    icon: {\n        height: '40px',\n        width: '40px',\n        marginRight: theme.spacing(1),\n    },\n}));\n\ninterface Props {\n    title: string;\n    iconType: any;\n}\n\nconst FeatureTitle: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const FeatureIcon = props.iconType;\n\n    return (\n        <div className={classes.titleContainer}>\n            <div className={classes.titleWithIcon}>\n                <FeatureIcon className={classes.icon} />\n                <Typography variant=\"h5\" className={classes.title}>\n                    {props.title}\n                </Typography>\n            </div>\n        </div>\n    );\n};\n\nexport default FeatureTitle;\n","import { Button, SvgIconTypeMap } from '@material-ui/core';\nimport { OverridableComponent } from '@material-ui/core/OverridableComponent';\nimport AssignmentTurnedIn from '@material-ui/icons/AssignmentTurnedIn';\nimport * as copy from 'copy-to-clipboard';\nimport React from 'react';\nimport { useToasterUpdate } from '../Toaster/ToasterProvider';\n\ninterface Props {\n    data?: string;\n    hoverMessage?: string;\n    feedbackMessage?: string;\n    Icon?: OverridableComponent<SvgIconTypeMap<unknown, 'svg'>>;\n}\n\nconst CopyButton: React.FC<Props> = ({ data, hoverMessage, feedbackMessage, Icon = AssignmentTurnedIn }: Props) => {\n    const { setToasterState } = useToasterUpdate();\n\n    const handleCopy = () => {\n        if (!data) {\n            return;\n        }\n\n        const message = feedbackMessage ?? `Content copied into clipboard: ${data.substring(0, 25)} …`;\n\n        copy.default(data, { format: 'text/plain' });\n        setToasterState({ open: true, message, type: 'success', autoHideDuration: 2000 });\n    };\n\n    return (\n        <Button\n            onClick={handleCopy}\n            disabled={!data}\n            title={hoverMessage ?? 'Copy to clipboard'}\n            variant=\"contained\"\n            color=\"primary\">\n            <Icon />\n        </Button>\n    );\n};\n\nexport default CopyButton;\n","export function isBlank(str: string | undefined | null) {\n    if (!str || str.trim().length === 0) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function isNotBlank(str: string | undefined | null) {\n    return !isBlank(str);\n}\n"],"sourceRoot":""}