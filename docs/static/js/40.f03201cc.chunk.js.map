{"version":3,"sources":["containers/ColorPicker/services.ts","containers/ColorPicker/styled.ts","containers/ColorPicker/index.tsx","components/FeatureTitle/index.tsx"],"names":["getOpacityHexValue","opacity","Error","Math","round","toString","retrieveClickedColor","event","image","coordinates","target","bounds","getBoundingClientRect","left","top","x","pageX","y","pageY","cw","clientWidth","ch","clientHeight","iw","naturalWidth","ih","naturalHeight","px","py","width","height","computeImageClickCoordinates","canvas","document","createElement","context","getContext","r","g","b","a","drawImage","p","getImageData","data","rgbColorToHex","color","rgbToHex","slice","imageResizer","marginTop","display","alignItems","justifyContent","border","useStyles","makeStyles","theme","root","margin","spacing","imageSelector","textAlign","toolbar","sample","cursor","marginBottom","borderColor","palette","text","disabled","borderStyle","borderWidth","borderRadius","shape","fontSize","fontFamily","textShadow","colorPicker","DEFAULT_BACKGROUND","ColorPicker","title","classes","setToasterState","useToasterUpdate","React","useState","imgDataURL","setImgDataURL","rgb","setRgb","background","setBackground","backgroundWithAlpha","setBackgroundWithAlpha","backgroundRgb","setBackgroundRgb","backgroundRgbWithAlpha","setBackgroundRgbWithAlpha","onPasteFromClipboard","e","items","onLoad","i","length","item","type","startsWith","reader","FileReader","onload","readAsDataURL","getAsFile","services","clipboardData","originalEvent","clipboard","ev","result","onImageClick","img","getElementById","useEffect","onpaste","removeEventListener","addEventListener","handleCopy","feedback","substring","message","copy","format","open","autoHideDuration","Helmet","className","FeatureTitle","iconType","PaletteIcon","Box","Typography","variant","accept","onChange","file","onFileSelected","files","id","style","htmlFor","Button","component","defaultSize","src","alt","flexDirection","onChangeComplete","endIcon","onClick","preventDefault","undefined","backgroundColor","wordBreak","titleWithIcon","titleContainer","icon","marginRight","FeatureIcon"],"mappings":"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","file":"static/js/40.f03201cc.chunk.js","sourcesContent":["import { RGBColor } from 'react-color';\n\ninterface ClickCoordinates {\n  px: number;\n  py: number;\n  width: number;\n  height: number;\n}\n\nexport function getOpacityHexValue(opacity: number): string {\n  if (opacity < 0 || opacity > 1) {\n    throw new Error('Invalid opacity value');\n  }\n\n  return Math.round(opacity * 255).toString(16);\n}\n\nexport function clipboardToDataURL(items: DataTransferItemList, onLoad: (ev: ProgressEvent<FileReader>) => void): void {\n  if (!items) {\n    return;\n  }\n\n  for (let i = 0; i < items.length; i++) {\n    const item: DataTransferItem = items[i];\n    if (item.type.startsWith('image')) {\n      const reader = new FileReader();\n      reader.onload = onLoad;\n      reader.readAsDataURL(item.getAsFile() as Blob);\n      break;\n    }\n  }\n}\n\nexport function retrieveClickedColor(event: MouseEvent, image: HTMLImageElement): RGBColor {\n  const coordinates = computeImageClickCoordinates(event);\n\n  // Create a canvas with same image dimension and draw the image on it\n  const canvas = document.createElement('canvas') as HTMLCanvasElement;\n  const context: CanvasRenderingContext2D | null = canvas.getContext('2d');\n  if (!context) {\n    return { r: 0, g: 0, b: 0, a: 1 };\n  }\n\n  canvas.width = coordinates.width;\n  canvas.height = coordinates.height;\n  context.drawImage(image, 0, 0);\n\n  // Get the clicked pixel info\n  const p = context.getImageData(coordinates.px, coordinates.py, 1, 1).data;\n\n  return {\n    r: +p[0] ?? 0,\n    g: +p[1] ?? 0,\n    b: +p[2] ?? 0,\n    a: 1,\n  };\n}\n\nexport const rgbColorToHex = (color: RGBColor): string =>\n  '#' + ('000000' + rgbToHex(color.r, color.g, color.b)).slice(-6);\n\nfunction rgbToHex(r: number, g: number, b: number): string {\n  if (r > 255 || g > 255 || b > 255) {\n    throw new Error('Invalid color component');\n  }\n\n  return ((r << 16) | (g << 8) | b).toString(16);\n}\n\n/**\n * Compute clicked pixel coordinates based on natural image size\n *\n * @see https://stackoverflow.com/questions/34867066/javascript-mouse-click-coordinates-for-image\n * @see https://stackoverflow.com/a/288731/1497139\n *\n * @param event {MouseEvent}\n */\nexport function computeImageClickCoordinates(event: MouseEvent): ClickCoordinates {\n  const image = event.target as HTMLImageElement;\n  const bounds = image.getBoundingClientRect();\n\n  const left = bounds.left;\n  const top = bounds.top;\n  const x = event.pageX - left;\n  const y = event.pageY - top;\n  const cw = image.clientWidth;\n  const ch = image.clientHeight;\n  const iw = image.naturalWidth;\n  const ih = image.naturalHeight;\n\n  const px = Math.round((x / cw) * iw);\n  const py = Math.round((y / ch) * ih);\n\n  return {\n    px,\n    py,\n    width: iw,\n    height: ih,\n  };\n}\n","import { makeStyles } from '@mui/styles';\n\nexport const imageResizer = {\n  marginTop: 10,\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  border: 'solid 1px blue',\n};\n\nexport const useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing(1),\n  },\n  image: {\n    width: '100%',\n    margin: 5,\n    border: 'dashed 1px grey',\n  },\n  imageSelector: {\n    margin: theme.spacing(2),\n    textAlign: 'center',\n  },\n  toolbar: {\n    margin: theme.spacing(2),\n  },\n  sample: {\n    cursor: 'pointer',\n    width: '100%',\n    height: 50,\n    marginBottom: theme.spacing(1),\n    borderColor: theme.palette.text.disabled,\n    borderStyle: 'solid',\n    borderWidth: 1,\n    borderRadius: theme.shape.borderRadius,\n    textAlign: 'center',\n    fontSize: 16,\n    fontFamily: 'monospace',\n    textShadow: '1px 1px lightgrey',\n  },\n  colorPicker: {\n    marginTop: theme.spacing(2),\n  },\n}));\n","import React, { useEffect } from 'react';\n\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport PaletteIcon from '@mui/icons-material/Palette';\nimport PhotoCameraIcon from '@mui/icons-material/PhotoCamera';\nimport { Box, Typography } from '@mui/material';\nimport Button from '@mui/material/Button';\nimport * as copy from 'copy-to-clipboard';\nimport { Resizable } from 're-resizable';\nimport { ColorResult, RGBColor, SketchPicker } from 'react-color';\nimport { Helmet } from 'react-helmet';\n\nimport FeatureTitle from '../../components/FeatureTitle';\nimport { useToasterUpdate } from '../../components/Toaster/ToasterProvider';\nimport * as services from './services';\nimport { imageResizer, useStyles } from './styled';\n\nconst DEFAULT_BACKGROUND = '';\n\nconst ColorPicker: React.FC = () => {\n  const title = 'Color picker';\n  const classes = useStyles();\n  const { setToasterState } = useToasterUpdate();\n  const [imgDataURL, setImgDataURL] = React.useState('');\n  const [rgb, setRgb] = React.useState<RGBColor>();\n\n  // Derived values (recomputed on rgb change)\n  const [background, setBackground] = React.useState(DEFAULT_BACKGROUND);\n  const [backgroundWithAlpha, setBackgroundWithAlpha] = React.useState(DEFAULT_BACKGROUND);\n  const [backgroundRgb, setBackgroundRgb] = React.useState(DEFAULT_BACKGROUND);\n  const [backgroundRgbWithAlpha, setBackgroundRgbWithAlpha] = React.useState(DEFAULT_BACKGROUND);\n\n  useEffect(() => {\n    if (rgb) {\n      setBackground(services.rgbColorToHex(rgb));\n      setBackgroundWithAlpha(services.rgbColorToHex(rgb) + services.getOpacityHexValue(rgb.a ?? 1));\n      setBackgroundRgb(`rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`);\n      setBackgroundRgbWithAlpha(`rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${rgb.a ?? 1})`);\n    } else {\n      setBackground(DEFAULT_BACKGROUND);\n      setBackgroundWithAlpha(DEFAULT_BACKGROUND);\n      setBackgroundRgb(DEFAULT_BACKGROUND);\n      setBackgroundRgbWithAlpha(DEFAULT_BACKGROUND);\n    }\n  }, [rgb]);\n\n  function handleClear(event: React.MouseEvent<HTMLButtonElement>) {\n    event.preventDefault();\n    setImgDataURL('');\n    setRgb(undefined);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function onPasteFromClipboard(e: any) {\n    const clipboardData = e.clipboardData || e.originalEvent.clipboardData || e.originalEvent.clipboard;\n    services.clipboardToDataURL(clipboardData.items, (ev: ProgressEvent<FileReader>) =>\n      setImgDataURL(ev.target?.result as string),\n    );\n  }\n\n  function onFileSelected(file?: File) {\n    if (!file) {\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = (ev: ProgressEvent<FileReader>) => setImgDataURL(ev.target?.result as string);\n    reader.readAsDataURL(file);\n  }\n\n  React.useEffect(() => {\n    document.onpaste = onPasteFromClipboard;\n\n    // Unmount cleanup\n    return () => {\n      document.removeEventListener('onpaste', onPasteFromClipboard);\n    };\n  }, []);\n\n  React.useEffect(() => {\n    if (imgDataURL) {\n      const img: HTMLElement | null = document.getElementById('image');\n      if (img) {\n        img.addEventListener('click', onImageClick);\n      }\n    }\n  }, [imgDataURL]);\n\n  function onImageClick(event: MouseEvent) {\n    const img: HTMLElement | null = document.getElementById('image');\n    if (img) {\n      const color = services.retrieveClickedColor(event, img as HTMLImageElement);\n      setRgb(color);\n    }\n  }\n\n  const handleCopy = (data: string) => {\n    const feedback = data.substring(0, 20);\n    const message = `Content copied into clipboard: ${feedback} …`;\n\n    copy.default(data, { format: 'text/plain' });\n    setToasterState({ open: true, message, type: 'success', autoHideDuration: 2000 });\n  };\n\n  return (\n    <>\n      <Helmet title={title} />\n      <div className={classes.root}>\n        <FeatureTitle iconType={PaletteIcon} title={title} />\n\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" className={classes.imageSelector}>\n          {!imgDataURL && (\n            <div>\n              <Typography variant=\"body2\">\n                paste image or select a file:{' '}\n                <input\n                  type=\"file\"\n                  color=\"primary\"\n                  accept=\"image/*\"\n                  onChange={e => onFileSelected(e.target?.files?.[0])}\n                  id=\"files-selector-action\"\n                  style={{ display: 'none' }}\n                />\n                <label htmlFor=\"files-selector-action\">\n                  <Button variant=\"contained\" component=\"span\" color=\"primary\">\n                    <PhotoCameraIcon />\n                  </Button>\n                </label>\n              </Typography>\n            </div>\n          )}\n          {imgDataURL && (\n            <Resizable style={imageResizer} defaultSize={{ width: 300, height: '100%' }}>\n              <img id=\"image\" src={imgDataURL} alt=\"Clipboard content\" className={classes.image} />\n            </Resizable>\n          )}\n        </Box>\n\n        <Box\n          display=\"flex\"\n          flexDirection=\"column\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          className={classes.colorPicker}>\n          <Typography variant=\"body2\">or just pick a color:</Typography>\n          <SketchPicker color={rgb} onChangeComplete={(color: ColorResult) => setRgb(color.rgb)} />\n\n          <pre>\n            Opacity to hexa: {(rgb?.a ?? 1) * 100}% = {rgb?.a ?? 1} = {services.getOpacityHexValue(rgb?.a ?? 1)}\n          </pre>\n        </Box>\n\n        {imgDataURL && (\n          <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n            <Button endIcon={<DeleteIcon />} variant=\"contained\" color=\"primary\" onClick={handleClear}>\n              Clear\n            </Button>\n          </Box>\n        )}\n\n        <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\n          <div\n            className={classes.sample}\n            style={{ backgroundColor: background }}\n            onClick={() => handleCopy(background)}>\n            {background}\n          </div>\n          <div\n            className={classes.sample}\n            style={{ backgroundColor: backgroundWithAlpha }}\n            onClick={() => handleCopy(backgroundWithAlpha)}>\n            {backgroundWithAlpha}\n          </div>\n          <div\n            className={classes.sample}\n            style={{ backgroundColor: backgroundRgb }}\n            onClick={() => handleCopy(backgroundRgb)}>\n            {backgroundRgb}\n          </div>\n          <div\n            className={classes.sample}\n            style={{ backgroundColor: backgroundRgbWithAlpha }}\n            onClick={() => handleCopy(backgroundRgbWithAlpha)}>\n            {backgroundRgbWithAlpha}\n          </div>\n        </Box>\n      </div>\n    </>\n  );\n};\n\nexport default ColorPicker;\n","import React, { ElementType } from 'react';\n\nimport { Typography } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles(theme => ({\n  title: {\n    wordBreak: 'break-word',\n  },\n  titleWithIcon: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  titleContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  icon: {\n    height: '40px',\n    width: '40px',\n    marginRight: theme.spacing(1),\n  },\n}));\n\ninterface Props {\n  title: string;\n  iconType: ElementType;\n}\n\nconst FeatureTitle: React.FC<Props> = ({ title, iconType: FeatureIcon }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.titleContainer}>\n      <div className={classes.titleWithIcon}>\n        <FeatureIcon className={classes.icon} />\n        <Typography variant=\"h5\" className={classes.title}>\n          {title}\n        </Typography>\n      </div>\n    </div>\n  );\n};\n\nexport default FeatureTitle;\n"],"sourceRoot":""}