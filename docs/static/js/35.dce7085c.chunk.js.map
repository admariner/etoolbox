{"version":3,"sources":["containers/DateConverter/constants.ts","containers/DateConverter/styles.ts","containers/DateConverter/CardLayout.tsx","containers/DateConverter/TableLayout.tsx","containers/DateConverter/index.tsx","components/FeatureTitle/index.tsx","components/CopyButton/index.tsx","hooks/useSyntaxHighlightTheme.ts"],"names":["SAMPLE_DATEFNS_TZ_CONVERT","SAMPLE_DATEFNS_FORMAT","StyledTableCell","withStyles","theme","body","fontSize","spacing","whiteSpace","wordBreak","TableCell","StyledTableRow","root","backgroundColor","palette","action","hover","TableRow","useStyles","makeStyles","margin","panel","marginTop","marginBottom","form","display","flexWrap","formControl","marginRight","value","fontFamily","marginLeft","tableHeader","primary","main","timePickerField","width","formatted","overflow","padding","card","otherSubtitle","CardLayout","date","epochString","classes","syntaxTheme","useSyntaxHighlightTheme","Card","className","CardContent","Typography","variant","toISOString","CardActions","CopyButton","data","toLocaleDateString","toLocaleTimeString","getTimezoneOffset","style","language","replace","TableLayout","isMdUp","useIsWidthUp","TableContainer","component","Paper","Table","size","TableHead","TableBody","scope","toUTCString","mapStateToProps","state","inputText","textInputs","mapDispatchToProps","dispatch","storeInputText","name","setTextAction","connect","props","title","useState","setDate","isSmDown","useIsWidthDown","handleDateChange","getTime","useEffect","Date","Helmet","FeatureTitle","iconType","EventIcon","noValidate","Grid","container","justifyContent","Box","alignItems","FormControl","TextField","autoFocus","label","placeholder","type","onChange","e","target","Button","color","onClick","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","inputFormat","renderInput","TimePicker","titleWithIcon","titleContainer","icon","height","FeatureIcon","isDisabled","hoverMessage","feedbackMessage","Icon","AssignmentTurnedIn","others","setToasterState","useToasterUpdate","message","substring","copy","format","open","autoHideDuration","disabled","usePreferenceTheme","isDark","dark","docco"],"mappings":"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","file":"static/js/35.dce7085c.chunk.js","sourcesContent":["export const SAMPLE_DATEFNS_TZ_CONVERT = `import { utcToZonedTime } from 'date-fns-tz';\n\n// Obtain a Date instance that will render the\n// equivalent Berlin time for the UTC date\nconst utcValue = '#utc_value#';\nconst date = new Date(utcValue);\nconst timezone = 'Europe/Berlin';\nconst result = utcToZonedTime(date, timezone);`;\n\nexport const SAMPLE_DATEFNS_FORMAT = `import { format } from \"date-fns\";\n\nconst utcValue = '#utc_value#';\nconst date = new Date(utcValue);\nconst format = 'yyyy-MM-dd-HH-mm-ss';\nconst formattedDate = format(date, format);`;\n","import { TableCell, TableRow } from '@mui/material';\nimport { makeStyles, withStyles } from '@mui/styles';\n\nexport const StyledTableCell = withStyles(theme => ({\n  body: {\n    fontSize: theme.spacing(1.75),\n    whiteSpace: 'normal',\n    wordBreak: 'break-word',\n  },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles(theme => ({\n  root: {\n    '&:nth-of-type(even)': {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}))(TableRow);\n\nexport const useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing(1),\n  },\n  panel: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n  },\n  form: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    marginTop: theme.spacing(3),\n  },\n  formControl: {\n    marginRight: theme.spacing(1),\n  },\n  value: {\n    fontFamily: 'monospace',\n    marginTop: theme.spacing(1),\n    marginLeft: theme.spacing(1),\n  },\n  tableHeader: {\n    backgroundColor: theme.palette.primary.main,\n  },\n  timePickerField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 260,\n  },\n  formatted: {\n    width: '100%',\n    overflow: 'auto',\n    padding: 0,\n    margin: 0,\n  },\n  card: {\n    marginBottom: theme.spacing(1),\n  },\n  otherSubtitle: {\n    marginTop: theme.spacing(1),\n  },\n}));\n","import React from 'react';\n\nimport { Card, CardActions, CardContent, Typography } from '@mui/material';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\n\nimport CopyButton from '../../components/CopyButton';\nimport { useSyntaxHighlightTheme } from '../../hooks/useSyntaxHighlightTheme';\nimport { SAMPLE_DATEFNS_FORMAT, SAMPLE_DATEFNS_TZ_CONVERT } from './constants';\nimport { useStyles } from './styles';\n\ninterface Props {\n  date: Date | null;\n  epochString?: string;\n}\n\nexport const CardLayout: React.FC<Props> = ({ date, epochString }: Props) => {\n  const classes = useStyles();\n  const syntaxTheme = useSyntaxHighlightTheme();\n\n  return (\n    <>\n      <Card className={classes.card}>\n        <CardContent>\n          <Typography variant=\"subtitle1\">ISO string / JSON</Typography>\n          <span className={classes.value}>{date?.toISOString()}</span>\n        </CardContent>\n        <CardActions>\n          <CopyButton data={date?.toISOString()} />\n        </CardActions>\n      </Card>\n\n      <Card className={classes.card}>\n        <CardContent>\n          <Typography variant=\"subtitle1\">Locale date string</Typography>\n          <div className={classes.value}>\n            {date?.toLocaleDateString()} {date?.toLocaleTimeString()}\n          </div>\n          <Typography variant=\"subtitle1\" className={classes.otherSubtitle}>\n            Timezone offset:{' '}\n          </Typography>\n          <div className={classes.value}>\n            {date?.getTimezoneOffset()} min ({(date?.getTimezoneOffset() ?? 0) / 60} hrs)\n          </div>\n        </CardContent>\n        <CardActions>\n          <CopyButton data={date?.toLocaleDateString() + ' ' + date?.toLocaleTimeString()} />\n        </CardActions>\n      </Card>\n\n      <Card className={classes.card}>\n        <CardContent>\n          <Typography variant=\"subtitle1\">Js code using epoch:</Typography>\n          <SyntaxHighlighter style={syntaxTheme} language=\"javascript\" className={classes.formatted}>\n            {`const date = new Date(${epochString});`}\n          </SyntaxHighlighter>\n        </CardContent>\n        <CardActions>\n          <CopyButton data={`const date = new Date(${epochString});`} />\n        </CardActions>\n      </Card>\n\n      <Card className={classes.card}>\n        <CardContent>\n          <Typography variant=\"subtitle1\">Js code using ISO 8601:</Typography>\n          <SyntaxHighlighter style={syntaxTheme} language=\"javascript\" className={classes.formatted}>\n            {`const date = new Date('${date?.toISOString()}');`}\n          </SyntaxHighlighter>\n        </CardContent>\n        <CardActions>\n          <CopyButton data={`const date = new Date(${epochString});`} />\n        </CardActions>\n      </Card>\n\n      <Card className={classes.card}>\n        <CardContent>\n          <Typography variant=\"subtitle1\">date-fns timezone convertion example:</Typography>\n          <SyntaxHighlighter style={syntaxTheme} language=\"javascript\" className={classes.formatted}>\n            {SAMPLE_DATEFNS_TZ_CONVERT.replace('#utc_value#', date?.toISOString() ?? '')}\n          </SyntaxHighlighter>\n        </CardContent>\n        <CardActions>\n          <CopyButton data={SAMPLE_DATEFNS_TZ_CONVERT.replace('#utc_value#', date?.toISOString() ?? '')} />\n        </CardActions>\n      </Card>\n\n      <Card className={classes.card}>\n        <CardContent>\n          <Typography variant=\"subtitle1\">date-fns format example:</Typography>\n          <SyntaxHighlighter style={syntaxTheme} language=\"javascript\" className={classes.formatted}>\n            {SAMPLE_DATEFNS_FORMAT.replace('#utc_value#', date?.toISOString() ?? '')}\n          </SyntaxHighlighter>\n        </CardContent>\n        <CardActions>\n          <CopyButton data={SAMPLE_DATEFNS_FORMAT.replace('#utc_value#', date?.toISOString() ?? '')} />\n        </CardActions>\n      </Card>\n    </>\n  );\n};\n","import React from 'react';\n\nimport { Paper, Table, TableBody, TableContainer, TableHead, TableRow } from '@mui/material';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\n\nimport CopyButton from '../../components/CopyButton';\nimport { useSyntaxHighlightTheme } from '../../hooks/useSyntaxHighlightTheme';\nimport { useIsWidthUp } from '../../theme';\nimport { SAMPLE_DATEFNS_FORMAT, SAMPLE_DATEFNS_TZ_CONVERT } from './constants';\nimport { StyledTableCell, StyledTableRow, useStyles } from './styles';\n\ninterface Props {\n  date: Date | null;\n  epochString?: string;\n}\n\nexport const TableLayout: React.FC<Props> = ({ date, epochString }: Props) => {\n  const classes = useStyles();\n  const syntaxTheme = useSyntaxHighlightTheme();\n  const isMdUp = useIsWidthUp('md');\n\n  return (\n    <TableContainer component={Paper} className={classes.panel}>\n      <Table size={isMdUp ? 'medium' : 'small'}>\n        <TableHead className={classes.tableHeader}>\n          <TableRow>\n            <StyledTableCell>Description</StyledTableCell>\n            <StyledTableCell>Value and js code examples using date-fns library</StyledTableCell>\n            <StyledTableCell></StyledTableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <StyledTableRow>\n            <StyledTableCell component=\"th\" scope=\"row\">\n              ISO string / JSON\n            </StyledTableCell>\n            <StyledTableCell>\n              <span className={classes.value}>{date?.toISOString()}</span>\n            </StyledTableCell>\n            <StyledTableCell>\n              <CopyButton data={date?.toISOString()} />\n            </StyledTableCell>\n          </StyledTableRow>\n          <StyledTableRow>\n            <StyledTableCell component=\"th\" scope=\"row\">\n              Locale date string\n            </StyledTableCell>\n            <StyledTableCell>\n              <span className={classes.value}>\n                {date?.toLocaleDateString()} {date?.toLocaleTimeString()}\n              </span>\n            </StyledTableCell>\n            <StyledTableCell>\n              <CopyButton data={date?.toLocaleDateString() + ' ' + date?.toLocaleTimeString()} />\n            </StyledTableCell>\n          </StyledTableRow>\n          <StyledTableRow>\n            <StyledTableCell component=\"th\" scope=\"row\">\n              Js code using epoch\n            </StyledTableCell>\n            <StyledTableCell>\n              <span className={classes.value}>const dt = new Date({epochString});</span>\n            </StyledTableCell>\n            <StyledTableCell>\n              <CopyButton data={`const dt = new Date(${epochString});`} />\n            </StyledTableCell>\n          </StyledTableRow>\n          <StyledTableRow>\n            <StyledTableCell component=\"th\" scope=\"row\">\n              Js code using ISO 8601\n            </StyledTableCell>\n            <StyledTableCell>\n              <span className={classes.value}>const dt = new Date('{date?.toISOString()}');</span>\n            </StyledTableCell>\n            <StyledTableCell>\n              <CopyButton data={`const dt = new Date(${epochString});`} />\n            </StyledTableCell>\n          </StyledTableRow>\n          <StyledTableRow>\n            <StyledTableCell component=\"th\" scope=\"row\">\n              date-fns timezone convertion example\n            </StyledTableCell>\n            <StyledTableCell>\n              <SyntaxHighlighter style={syntaxTheme} language=\"javascript\" className={classes.formatted}>\n                {SAMPLE_DATEFNS_TZ_CONVERT.replace('#utc_value#', date?.toISOString() ?? '')}\n              </SyntaxHighlighter>\n            </StyledTableCell>\n            <StyledTableCell>\n              <CopyButton data={SAMPLE_DATEFNS_TZ_CONVERT.replace('#utc_value#', date?.toISOString() ?? '')} />\n            </StyledTableCell>\n          </StyledTableRow>\n          <StyledTableRow>\n            <StyledTableCell component=\"th\" scope=\"row\">\n              Timezone offset\n            </StyledTableCell>\n            <StyledTableCell>\n              {date?.getTimezoneOffset()} min ({(date?.getTimezoneOffset() ?? 0) / 60} hrs)\n            </StyledTableCell>\n            <StyledTableCell></StyledTableCell>\n          </StyledTableRow>\n          <StyledTableRow>\n            <StyledTableCell component=\"th\" scope=\"row\">\n              date-fns format example\n            </StyledTableCell>\n            <StyledTableCell>\n              <SyntaxHighlighter style={syntaxTheme} language=\"javascript\" className={classes.formatted}>\n                {SAMPLE_DATEFNS_FORMAT.replace('#utc_value#', date?.toISOString() ?? '')}\n              </SyntaxHighlighter>\n            </StyledTableCell>\n            <StyledTableCell>\n              <CopyButton data={SAMPLE_DATEFNS_FORMAT.replace('#utc_value#', date?.toISOString() ?? '')} />\n            </StyledTableCell>\n          </StyledTableRow>\n          <StyledTableRow>\n            <StyledTableCell component=\"th\" scope=\"row\">\n              UTC string\n            </StyledTableCell>\n            <StyledTableCell>{date?.toUTCString()}</StyledTableCell>\n            <StyledTableCell></StyledTableCell>\n          </StyledTableRow>\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport EventIcon from '@mui/icons-material/Event';\nimport TimerIcon from '@mui/icons-material/Timer';\nimport { Box, Button, FormControl } from '@mui/material';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport { DatePicker, LocalizationProvider, TimePicker } from '@mui/x-date-pickers';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport { setTextAction } from '../../actions/text-actions';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport { AppState } from '../../reducers';\nimport { useIsWidthDown, useIsWidthUp } from '../../theme';\nimport { CardLayout } from './CardLayout';\nimport { useStyles } from './styles';\nimport { TableLayout } from './TableLayout';\n\ninterface Props {\n  inputText?: string;\n  storeInputText: (name: string, value: string) => void;\n}\n\nconst DateConverter: React.FC<Props> = (props: Props) => {\n  const title = 'Date & Epoch';\n  const classes = useStyles();\n  const { inputText, storeInputText } = props;\n  const [date, setDate] = useState<Date | null>(null);\n  const isMdUp = useIsWidthUp('md');\n  const isSmDown = useIsWidthDown('md');\n\n  const handleDateChange = (date: Date | null) => {\n    setDate(date);\n    if (date) {\n      storeInputText('lastEpochValue', `${date.getTime()}`);\n    }\n  };\n\n  useEffect(() => {\n    if (inputText) {\n      setDate(new Date(+inputText));\n    }\n  }, [inputText]);\n\n  return (\n    <>\n      <Helmet title={title} />\n      <div className={classes.root}>\n        <FeatureTitle iconType={EventIcon} title={title} />\n\n        <form className={classes.form} noValidate>\n          <Grid container justifyContent=\"space-between\">\n            <Box display=\"flex\" alignItems=\"center\">\n              <FormControl className={classes.formControl}>\n                <TextField\n                  autoFocus={isMdUp}\n                  label=\"Epoch value\"\n                  placeholder=\"Epoch value\"\n                  type=\"number\"\n                  variant=\"outlined\"\n                  value={inputText}\n                  onChange={e => storeInputText('lastEpochValue', e.target.value)}\n                />\n              </FormControl>\n              <Button\n                variant=\"contained\"\n                title=\"Update value with 'Now' timestamp\"\n                color=\"primary\"\n                onClick={() => handleDateChange(new Date())}>\n                <TimerIcon />\n              </Button>\n            </Box>\n            <Box display=\"flex\" alignItems=\"center\">\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\n                <FormControl className={classes.formControl}>\n                  <DatePicker\n                    label=\"Date\"\n                    inputFormat=\"yyyy-MM-dd\"\n                    value={date}\n                    onChange={handleDateChange}\n                    renderInput={props => <TextField {...props} />}\n                  />\n                </FormControl>\n                <FormControl className={classes.formControl}>\n                  <TimePicker\n                    label=\"Time\"\n                    inputFormat=\"HH:mm:ss\"\n                    value={date}\n                    onChange={handleDateChange}\n                    renderInput={props => <TextField {...props} />}\n                  />\n                </FormControl>\n              </LocalizationProvider>\n            </Box>\n          </Grid>\n        </form>\n\n        {isSmDown && <CardLayout date={date} epochString={inputText} />}\n\n        {isMdUp && <TableLayout date={date} epochString={inputText} />}\n      </div>\n    </>\n  );\n};\n\nexport function mapStateToProps(state: AppState) {\n  return {\n    inputText: state.textInputs['lastEpochValue'],\n  };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DateConverter);\n","import React, { ElementType } from 'react';\n\nimport { Typography } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles(theme => ({\n  title: {\n    wordBreak: 'break-word',\n  },\n  titleWithIcon: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  titleContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  icon: {\n    height: '40px',\n    width: '40px',\n    marginRight: theme.spacing(1),\n  },\n}));\n\ninterface Props {\n  title: string;\n  iconType: ElementType;\n}\n\nconst FeatureTitle: React.FC<Props> = ({ title, iconType: FeatureIcon }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.titleContainer}>\n      <div className={classes.titleWithIcon}>\n        <FeatureIcon className={classes.icon} />\n        <Typography variant=\"h5\" className={classes.title}>\n          {title}\n        </Typography>\n      </div>\n    </div>\n  );\n};\n\nexport default FeatureTitle;\n","import React from 'react';\n\nimport AssignmentTurnedIn from '@mui/icons-material/AssignmentTurnedIn';\nimport { Button, ButtonProps, SvgIconTypeMap } from '@mui/material';\nimport { OverridableComponent } from '@mui/material/OverridableComponent';\nimport * as copy from 'copy-to-clipboard';\n\nimport { useToasterUpdate } from '../Toaster/ToasterProvider';\n\ntype Props = {\n  data?: string;\n  isDisabled?: boolean;\n  hoverMessage?: string;\n  feedbackMessage?: string;\n  Icon?: OverridableComponent<SvgIconTypeMap<unknown, 'svg'>>;\n} & ButtonProps;\n\nconst CopyButton: React.FC<Props> = ({\n  data,\n  isDisabled,\n  hoverMessage,\n  feedbackMessage,\n  Icon = AssignmentTurnedIn,\n  ...others\n}: Props) => {\n  const { setToasterState } = useToasterUpdate();\n\n  const handleCopy = () => {\n    if (!data) {\n      return;\n    }\n\n    const message = feedbackMessage ?? `Content copied into clipboard: ${data.substring(0, 25)} …`;\n\n    copy.default(data, { format: 'text/plain' });\n    setToasterState({ open: true, message, type: 'success', autoHideDuration: 2000 });\n  };\n\n  return (\n    <Button\n      {...others}\n      onClick={handleCopy}\n      disabled={!data || isDisabled}\n      title={hoverMessage ?? 'Copy to clipboard'}\n      variant=\"contained\"\n      color=\"primary\">\n      <Icon />\n    </Button>\n  );\n};\n\nexport default CopyButton;\n","import { dark, docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nimport { usePreferenceTheme } from '../components/Preferences/PreferencesProvider';\n\nexport const useSyntaxHighlightTheme = () => {\n  const { isDark } = usePreferenceTheme();\n\n  return isDark ? dark : docco;\n};\n"],"sourceRoot":""}