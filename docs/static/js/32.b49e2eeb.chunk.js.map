{"version":3,"sources":["containers/UUIDGenerator/services.ts","containers/UUIDGenerator/index.tsx","components/FeatureTitle/index.tsx","components/CopyButton/index.tsx","components/ResultMonospace/index.tsx"],"names":["generate","version","quantity","uuidGenerator","v1","v4","result","i","slice","useStyles","makeStyles","theme","root","margin","spacing","form","marginTop","formControl","toolbar","UUIDGenerator","title","classes","isMdUp","useIsWidthUp","useForm","defaultValues","handleSubmit","control","React","useState","services","generated","setGenerated","Helmet","className","FeatureTitle","iconType","SimCardIcon","Grid","container","item","md","sm","xs","FormControl","fullWidth","name","defaultValue","render","field","value","onChange","TextField","select","label","autoFocus","e","target","MenuItem","rules","required","min","max","FormHelperText","fieldState","error","type","helperText","justifyContent","CopyButton","data","sx","mr","Button","variant","color","onClick","endIcon","ResultMonospace","wordBreak","titleWithIcon","display","alignItems","titleContainer","icon","height","width","marginRight","FeatureIcon","isDisabled","hoverMessage","feedbackMessage","Icon","AssignmentTurnedIn","others","setToasterState","useToasterUpdate","message","substring","copy","format","open","autoHideDuration","disabled","fontFamily","rows","maxRows","multiline","minRows","InputProps","input"],"mappings":"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","file":"static/js/32.b49e2eeb.chunk.js","sourcesContent":["import { v1, v4 } from 'uuid';\n\nexport function generate(version: number, quantity: number): string {\n  const uuidGenerator = version === 1 ? v1 : v4;\n\n  let result = '';\n  for (let i = 0; i < quantity; i++) {\n    result += `${uuidGenerator()}\\n`;\n  }\n\n  // Return result without last line feed\n  return result.slice(0, -1);\n}\n","import React from 'react';\n\nimport SimCardIcon from '@mui/icons-material/SimCard';\nimport { FormControl, FormHelperText, Grid, MenuItem, TextField } from '@mui/material';\nimport Button from '@mui/material/Button';\nimport { makeStyles } from '@mui/styles';\nimport { Helmet } from 'react-helmet';\nimport { Controller, useForm } from 'react-hook-form';\n\nimport CopyButton from '../../components/CopyButton';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport ResultMonospace from '../../components/ResultMonospace';\nimport { useIsWidthUp } from '../../theme';\nimport * as services from './services';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing(1),\n  },\n  form: {\n    marginTop: theme.spacing(2),\n  },\n  formControl: {\n    margin: theme.spacing(1),\n  },\n  toolbar: {},\n}));\n\ninterface UUIDForm {\n  version: number;\n  quantity: number;\n}\n\nconst UUIDGenerator: React.FC = () => {\n  const title = 'UUID Generator';\n  const classes = useStyles();\n  const isMdUp = useIsWidthUp('md');\n  const defaultValues = {\n    version: 4,\n    quantity: 5,\n  };\n  const { handleSubmit, control } = useForm({ defaultValues });\n  const [generated, setGenerated] = React.useState(services.generate(4, 1));\n\n  const onSubmit = (data: UUIDForm) => {\n    setGenerated(services.generate(data.version, data.quantity));\n  };\n\n  return (\n    <>\n      <Helmet title={title} />\n      <div className={classes.root}>\n        <FeatureTitle iconType={SimCardIcon} title={title} />\n\n        <div className={classes.form}>\n          <Grid container spacing={1}>\n            <Grid item md={2} sm={3} xs={6}>\n              <FormControl className={classes.formControl} fullWidth={true}>\n                <Controller\n                  control={control}\n                  name=\"version\"\n                  defaultValue={4}\n                  render={({ field: { value, name, onChange } }) => (\n                    <TextField\n                      select={true}\n                      name={name}\n                      value={value}\n                      label=\"Version\"\n                      autoFocus={isMdUp}\n                      onChange={e => onChange(e.target.value)}>\n                      <MenuItem value={1}>1</MenuItem>\n                      <MenuItem value={4}>4</MenuItem>\n                    </TextField>\n                  )}\n                  rules={{\n                    required: true,\n                    min: 1,\n                    max: 5,\n                  }}\n                />\n                <FormHelperText>RFC4122 version</FormHelperText>\n              </FormControl>\n            </Grid>\n            <Grid item md={2} sm={3} xs={6}>\n              <FormControl className={classes.formControl} fullWidth={true}>\n                <Controller\n                  name=\"quantity\"\n                  render={({ field: { value, name, onChange }, fieldState }) => (\n                    <TextField\n                      name={name}\n                      value={value}\n                      label=\"Quantity\"\n                      error={!!fieldState.error}\n                      type=\"number\"\n                      onChange={e => onChange(e.target.value)}\n                      helperText={fieldState.error ? 'valid range: [1..9999]' : null}\n                    />\n                  )}\n                  control={control}\n                  defaultValue={5}\n                  rules={{\n                    required: true,\n                    min: 1,\n                    max: 9999,\n                  }}\n                />\n                <FormHelperText>Number of UUIDs</FormHelperText>\n              </FormControl>\n            </Grid>\n            <Grid item md={8} sm={6} xs={12}>\n              <Grid container justifyContent=\"flex-end\" className={classes.toolbar}>\n                <CopyButton data={generated} sx={{ mr: 1 }} />\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  title=\"Generate the UUID elements\"\n                  onClick={handleSubmit(onSubmit)}\n                  endIcon={<SimCardIcon />}>\n                  Generate\n                </Button>\n              </Grid>\n            </Grid>\n          </Grid>\n        </div>\n\n        <ResultMonospace label=\"Result\" result={generated} />\n      </div>\n    </>\n  );\n};\n\nexport default UUIDGenerator;\n","import React, { ElementType } from 'react';\n\nimport { Typography } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles(theme => ({\n  title: {\n    wordBreak: 'break-word',\n  },\n  titleWithIcon: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  titleContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  icon: {\n    height: '40px',\n    width: '40px',\n    marginRight: theme.spacing(1),\n  },\n}));\n\ninterface Props {\n  title: string;\n  iconType: ElementType;\n}\n\nconst FeatureTitle: React.FC<Props> = ({ title, iconType: FeatureIcon }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.titleContainer}>\n      <div className={classes.titleWithIcon}>\n        <FeatureIcon className={classes.icon} />\n        <Typography variant=\"h5\" className={classes.title}>\n          {title}\n        </Typography>\n      </div>\n    </div>\n  );\n};\n\nexport default FeatureTitle;\n","import React from 'react';\n\nimport AssignmentTurnedIn from '@mui/icons-material/AssignmentTurnedIn';\nimport { Button, ButtonProps, SvgIconTypeMap } from '@mui/material';\nimport { OverridableComponent } from '@mui/material/OverridableComponent';\nimport * as copy from 'copy-to-clipboard';\n\nimport { useToasterUpdate } from '../Toaster/ToasterProvider';\n\ntype Props = {\n  data?: string;\n  isDisabled?: boolean;\n  hoverMessage?: string;\n  feedbackMessage?: string;\n  Icon?: OverridableComponent<SvgIconTypeMap<unknown, 'svg'>>;\n} & ButtonProps;\n\nconst CopyButton: React.FC<Props> = ({\n  data,\n  isDisabled,\n  hoverMessage,\n  feedbackMessage,\n  Icon = AssignmentTurnedIn,\n  ...others\n}: Props) => {\n  const { setToasterState } = useToasterUpdate();\n\n  const handleCopy = () => {\n    if (!data) {\n      return;\n    }\n\n    const message = feedbackMessage ?? `Content copied into clipboard: ${data.substring(0, 25)} …`;\n\n    copy.default(data, { format: 'text/plain' });\n    setToasterState({ open: true, message, type: 'success', autoHideDuration: 2000 });\n  };\n\n  return (\n    <Button\n      {...others}\n      onClick={handleCopy}\n      disabled={!data || isDisabled}\n      title={hoverMessage ?? 'Copy to clipboard'}\n      variant=\"contained\"\n      color=\"primary\">\n      <Icon />\n    </Button>\n  );\n};\n\nexport default CopyButton;\n","import React from 'react';\n\nimport { TextField } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles(() => ({\n  result: {\n    fontFamily: 'monospace',\n    height: 'auto',\n  },\n}));\n\ninterface Props {\n  label?: string;\n  result?: string;\n  rows?: number;\n  maxRows?: number;\n}\n\nexport const ResultMonospace = ({ label, result, rows = 10, maxRows = 15 }: Props) => {\n  const classes = useStyles();\n\n  return (\n    <TextField\n      multiline\n      minRows={rows}\n      maxRows={maxRows}\n      label={label}\n      variant=\"outlined\"\n      margin=\"normal\"\n      fullWidth={true}\n      value={result}\n      InputProps={{\n        classes: {\n          input: classes.result,\n        },\n      }}\n    />\n  );\n};\n\nexport default ResultMonospace;\n"],"sourceRoot":""}