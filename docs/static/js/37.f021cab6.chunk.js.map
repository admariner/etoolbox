{"version":3,"sources":["containers/PokerPlanning/message.factory.ts","containers/PokerPlanning/model.ts","containers/PokerPlanning/PokerCard.tsx","containers/PokerPlanning/styles.ts","containers/PokerPlanning/PokerOptionsForm.tsx","containers/PokerPlanning/services.ts","containers/PokerPlanning/index.tsx","components/FeatureTitle/index.tsx","components/CopyButton/index.tsx","services/string-utils.ts"],"names":["buildVoteMessage","username","value","type","payload","estimate","estimatedAtISO8601","Date","toISOString","undefined","POKER_PLANNING_RATINGS_FIBONNACI_ENHANCED","POKER_PLANNING_RATINGS_FIBONNACI","POKER_PLANNING_RATINGS_T_SHIRT_SIZES","POKER_PLANNING_RATINGS_T_SHIRT_SIZES_ENHENCED","sorterFactory","valuesArray","a","b","indexOf","CARDS_LISTING_CATEGORIES","fibonnacy","values","displayValue","slice","join","sorter","map","v","replace","DEFAULT_CARDS_LISTING_CATEGORY","DEFAULT_HOSTNAME","SOCKET_STATES","Map","WebSocket","CLOSED","OPEN","CLOSING","CONNECTING","PokerCard","isDisabled","isSelected","onClick","theme","useTheme","size","useIsWidthUp","Button","style","maxWidth","maxHeight","minWidth","minHeight","margin","spacing","variant","disabled","title","color","Typography","StyledTableCell","withStyles","body","fontSize","whiteSpace","wordBreak","TableCell","StyledTableRow","root","backgroundColor","palette","action","hover","TableRow","useStyles","makeStyles","toolbar","height","padding","marginLeft","formControl","marginRight","submitEstimate","marginTop","display","justifyContent","flexWrap","teamEstimates","tableHeader","primary","main","connect","state","lastPokerPlanningHostName","textInputs","lastPokerPlanningRoomName","lastPokerPlanningUsername","lastPokerCardsListingCategoryName","dispatch","storeInputText","name","setTextAction","socketState","classes","useParams","hostName","roomUUID","roomName","isReadyToStartSession","isNotBlank","cardsListingCategoryName","Grid","container","item","md","xs","FormControl","className","fullWidth","TextField","label","placeholder","onChange","e","target","InputProps","endAdornment","InputAdornment","position","IconButton","href","select","Object","entries","category","MenuItem","getSocketState","get","buildRouteURL","v4","buildFullRouteURL","params","document","location","split","mapStateToProps","mapDispatchToProps","props","navigate","useNavigate","showConfirmationDialog","useConfirmDialogContext","setToasterState","useToasterUpdate","socketRef","useRef","useState","setSocketState","myEstimate","setMyEstimate","postponedMessage","setPostponedMessage","isEstimatesVisible","setIsEstimatesVisible","pokerSession","setPokerSession","trim","estimates","pokerCards","filter","isNumeric","Number","estimatesSum","reduce","acc","val","average","length","estimatesAverage","Math","round","EPSILON","isEstimatesCleared","every","isUserMemberOfRoom","some","parseEstimates","isReadyToVote","isReadyToCreateNewRoom","useEffect","IS_DEV_MODE","console","info","myUserSessionEstimate","find","current","onSocketStateUpdate","onSessionUpdate","protocol","url","socket","ReconnectingWebSocket","onopen","readyState","onerror","onclose","onmessage","ev","session","JSON","parse","data","createSocket","close","sendOrPostpone","message","send","stringify","shareAsQRCode","QRCode","toDataURL","width","imgDataURL","fetch","response","blob","navigator","clipboard","write","ClipboardItem","open","autoHideDuration","error","Helmet","FeatureTitle","iconType","PockerPlanningIcon","alignItems","sx","mr","CopyButton","Icon","ShareLink","hoverMessage","feedbackMessage","updateMyEstimate","TableContainer","component","Paper","Table","TableHead","scope","align","description","onConfirm","TableBody","sort","estimateWhenDisplayON","estimateWhenDisplayOFF","buildRemoveUserMessage","titleWithIcon","titleContainer","icon","FeatureIcon","AssignmentTurnedIn","others","substring","copy","format","isBlank","str","isNaN"],"mappings":"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","file":"static/js/37.f021cab6.chunk.js","sourcesContent":["import { UserEstimate, UserMessage } from './common.model';\n\nexport const buildVoteMessage = (username = '', value?: string): UserMessage<UserEstimate> => ({\n    type: 'vote',\n    payload: {\n        username,\n        estimate: value,\n        estimatedAtISO8601: value ? new Date().toISOString() : undefined,\n    },\n});\n\nexport const buildResetMessage = (): UserMessage => ({ type: 'reset' });\n\nexport const buildRemoveUserMessage = (username = ''): UserMessage<string> => ({ type: 'remove', payload: username });\n","import { UserEstimate } from './common.model';\n\nexport const POKER_PLANNING_RATINGS_FIBONNACI_ENHANCED: string[] = [\n    '?',\n    '0',\n    '0.5',\n    '1',\n    '1.5',\n    '2',\n    '2.5',\n    '3',\n    '3.5',\n    '4',\n    '4.5',\n    '5',\n    '8',\n    '13',\n    '20',\n    '40',\n    '100',\n];\n\nexport const POKER_PLANNING_RATINGS_FIBONNACI: string[] = ['?', '0', '1', '2', '3', '5', '8', '13', '20', '40', '100'];\n\nexport const POKER_PLANNING_RATINGS_T_SHIRT_SIZES: string[] = ['?', 'S', 'M', 'L', 'XL'];\n\nexport const POKER_PLANNING_RATINGS_T_SHIRT_SIZES_ENHENCED: string[] = ['?', 'XS', 'S', 'M', 'L', 'XL', 'XXL'];\n\nexport type CardsListingCategoryName = 'fibonnacy' | 'fibonnacy-variant-1' | 't-shirt' | 't-shirt-variant-1';\n\nexport type CardsListingCategory = {\n    values: string[];\n    displayValue: string;\n    sorter: (a: UserEstimate, b: UserEstimate) => number;\n};\n\ntype PokerVotesSorter = (a: UserEstimate, b: UserEstimate) => number;\nconst sorterFactory = (valuesArray: string[]): PokerVotesSorter => {\n    return (a: UserEstimate, b: UserEstimate) =>\n        valuesArray.indexOf(a.estimate ?? '?') - valuesArray.indexOf(b.estimate ?? '?');\n};\n\nexport const CARDS_LISTING_CATEGORIES: Record<CardsListingCategoryName, CardsListingCategory> = {\n    fibonnacy: {\n        values: POKER_PLANNING_RATINGS_FIBONNACI,\n        displayValue: POKER_PLANNING_RATINGS_FIBONNACI.slice(2).join(' '),\n        sorter: sorterFactory(POKER_PLANNING_RATINGS_FIBONNACI),\n    },\n    'fibonnacy-variant-1': {\n        values: POKER_PLANNING_RATINGS_FIBONNACI_ENHANCED,\n        displayValue: POKER_PLANNING_RATINGS_FIBONNACI_ENHANCED.slice(2)\n            .map(v => v.replace('0.5', '½'))\n            .map(v => v.replace('.5', '½'))\n            .join(' '),\n        sorter: sorterFactory(POKER_PLANNING_RATINGS_FIBONNACI_ENHANCED),\n    },\n    't-shirt': {\n        values: POKER_PLANNING_RATINGS_T_SHIRT_SIZES,\n        displayValue: POKER_PLANNING_RATINGS_T_SHIRT_SIZES.slice(1).join(' '),\n        sorter: sorterFactory(POKER_PLANNING_RATINGS_T_SHIRT_SIZES),\n    },\n    't-shirt-variant-1': {\n        values: POKER_PLANNING_RATINGS_T_SHIRT_SIZES_ENHENCED,\n        displayValue: POKER_PLANNING_RATINGS_T_SHIRT_SIZES_ENHENCED.slice(1).join(' '),\n        sorter: sorterFactory(POKER_PLANNING_RATINGS_T_SHIRT_SIZES_ENHENCED),\n    },\n};\n\nexport const DEFAULT_CARDS_LISTING_CATEGORY: CardsListingCategoryName = 'fibonnacy';\nexport const DEFAULT_ROOM_UUID = 'default';\nexport const DEFAULT_ROOM_NAME = 'default';\nexport const DEFAULT_HOSTNAME = 'localhost';\n\nexport type SocketState = 'open' | 'closed' | 'closing' | 'connecting';\n\nexport const SOCKET_STATES: Map<number, SocketState> = new Map([\n    [WebSocket.CLOSED, 'closed'],\n    [WebSocket.OPEN, 'open'],\n    [WebSocket.CLOSING, 'closing'],\n    [WebSocket.CONNECTING, 'connecting'],\n]);\n\nexport type EstimatesStats = {\n    values: number[];\n    estimatesSum: number;\n    estimatesAverage: number;\n    isEstimatesCleared: boolean;\n    isUserMemberOfRoom: boolean;\n};\n","import { Button, Typography, useTheme } from '@mui/material';\nimport React from 'react';\nimport { useIsWidthUp } from '../../theme';\n\ntype PokerCardType = {\n    value: string;\n    isDisabled: boolean;\n    isSelected: boolean;\n    onClick: (value: string) => void;\n};\n\nconst PokerCard: React.FC<PokerCardType> = ({ value, isDisabled, isSelected, onClick }) => {\n    const theme = useTheme();\n    const isMdUp = useIsWidthUp('md');\n    const size = isMdUp ? '70px' : '48px';\n\n    return (\n        <Button\n            style={{\n                maxWidth: size,\n                maxHeight: size,\n                minWidth: size,\n                minHeight: size,\n                margin: theme.spacing(1),\n            }}\n            variant={isSelected ? 'contained' : 'outlined'}\n            disabled={isDisabled}\n            title={`Estimate the current story point as: [${value}]`}\n            color=\"primary\"\n            onClick={() => onClick(value)}>\n            <Typography variant=\"h5\">{value}</Typography>\n        </Button>\n    );\n};\n\nexport default PokerCard;\n","import { TableCell, TableRow } from '@mui/material';\nimport { makeStyles, withStyles } from '@mui/styles';\n\nexport const StyledTableCell = withStyles(() => ({\n    body: {\n        fontSize: 14,\n        whiteSpace: 'normal',\n        wordBreak: 'break-word',\n    },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles(theme => ({\n    root: {\n        '&:nth-of-type(even)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\nexport const useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    toolbar: {\n        height: '100%',\n        margin: 0,\n        padding: 0,\n        '& > *': {\n            marginLeft: theme.spacing(1),\n        },\n    },\n    formControl: {\n        marginRight: theme.spacing(1),\n    },\n    submitEstimate: {\n        marginTop: theme.spacing(2),\n        display: 'flex',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n    },\n    teamEstimates: {\n        marginTop: theme.spacing(4),\n    },\n    tableHeader: {\n        backgroundColor: theme.palette.primary.main,\n    },\n}));\n","import { FormControl, Grid, IconButton, InputAdornment, MenuItem, Select, useTheme } from '@mui/material';\nimport TextField from '@mui/material/TextField';\nimport HelpIcon from '@mui/icons-material/Help';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { Dispatch } from 'redux';\nimport { setTextAction } from '../../actions/text-actions';\nimport { AppState } from '../../reducers';\nimport { isNotBlank } from '../../services/string-utils';\nimport {\n    CardsListingCategoryName,\n    CARDS_LISTING_CATEGORIES,\n    DEFAULT_CARDS_LISTING_CATEGORY,\n    SocketState,\n} from './model';\nimport { useStyles } from './styles';\n\ntype PokerSettingsProps = {\n    socketState: SocketState;\n    lastPokerPlanningRoomName?: string;\n    lastPokerPlanningUsername?: string;\n    lastPokerPlanningHostName?: string;\n    lastPokerCardsListingCategoryName?: CardsListingCategoryName;\n    storeInputText: (name: string, value: string) => void;\n};\n\nconst PokerOptionsForm: React.FC<PokerSettingsProps> = ({\n    lastPokerPlanningRoomName,\n    lastPokerPlanningUsername,\n    lastPokerPlanningHostName,\n    lastPokerCardsListingCategoryName,\n    storeInputText,\n    socketState,\n}) => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const { hostName, roomUUID, roomName } = useParams();\n\n    // computing\n    const isReadyToStartSession = isNotBlank(roomName) && isNotBlank(hostName) && isNotBlank(roomUUID);\n    const cardsListingCategoryName: CardsListingCategoryName = lastPokerCardsListingCategoryName\n        ? lastPokerCardsListingCategoryName\n        : DEFAULT_CARDS_LISTING_CATEGORY;\n\n    return (\n        <Grid container spacing={1}>\n            <Grid item md={4} xs={6}>\n                <FormControl className={classes.formControl} fullWidth={true}>\n                    <TextField\n                        label={`Serveur (channel ${socketState})`}\n                        placeholder=\"Type the poker plannind hostname here\"\n                        variant=\"outlined\"\n                        fullWidth={true}\n                        margin=\"normal\"\n                        value={lastPokerPlanningHostName}\n                        title={lastPokerPlanningHostName}\n                        disabled={isReadyToStartSession}\n                        onChange={e => storeInputText('lastPokerPlanningHostName', e.target.value)}\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <IconButton\n                                        title=\"Instruction to setup a poker planning server\"\n                                        target=\"_blank\"\n                                        href=\"https://github.com/amwebexpert/ws-poker-planning#wspokerplanning-server-production-deployment\">\n                                        <HelpIcon />\n                                    </IconButton>\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                </FormControl>\n            </Grid>\n            <Grid item md={2} xs={6}>\n                <FormControl className={classes.formControl} fullWidth={true}>\n                    <TextField\n                        label=\"Team name\"\n                        placeholder=\"Type the team name here\"\n                        variant=\"outlined\"\n                        fullWidth={true}\n                        margin=\"normal\"\n                        value={lastPokerPlanningRoomName}\n                        title={lastPokerPlanningRoomName}\n                        disabled={isReadyToStartSession}\n                        onChange={e => storeInputText('lastPokerPlanningRoomName', e.target.value)}\n                    />\n                </FormControl>\n            </Grid>\n            <Grid item md={2} xs={6}>\n                <FormControl className={classes.formControl} fullWidth={true}>\n                    <TextField\n                        label=\"Your name\"\n                        placeholder=\"Type your name here\"\n                        variant=\"outlined\"\n                        fullWidth={true}\n                        margin=\"normal\"\n                        value={lastPokerPlanningUsername}\n                        onChange={e => storeInputText('lastPokerPlanningUsername', e.target.value)}\n                    />\n                </FormControl>\n            </Grid>\n            <Grid item md={4} xs={6}>\n                <FormControl className={classes.formControl} fullWidth={true}>\n                    <TextField\n                        select={true}\n                        label=\"Poker card types\"\n                        style={{ marginTop: theme.spacing(2) }}\n                        variant=\"outlined\"\n                        fullWidth={true}\n                        title={cardsListingCategoryName}\n                        value={cardsListingCategoryName}\n                        onChange={(e: any) => storeInputText('lastPokerCardsListingCategoryName', e.target.value)}>\n                        {Object.entries(CARDS_LISTING_CATEGORIES).map(([name, category]) => (\n                            <MenuItem key={name} value={name} title={name}>\n                                {category.displayValue}\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                </FormControl>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        lastPokerPlanningHostName: state.textInputs['lastPokerPlanningHostName'],\n        lastPokerPlanningRoomName: state.textInputs['lastPokerPlanningRoomName'],\n        lastPokerPlanningUsername: state.textInputs['lastPokerPlanningUsername'],\n        lastPokerCardsListingCategoryName: state.textInputs[\n            'lastPokerCardsListingCategoryName'\n        ] as CardsListingCategoryName,\n    };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PokerOptionsForm);\n","import ReconnectingWebSocket from 'reconnecting-websocket';\nimport { v4 } from 'uuid';\nimport { isNumeric } from '../../services/string-utils';\nimport { PokerPlanningSession, UserEstimate } from './common.model';\nimport { DEFAULT_HOSTNAME, DEFAULT_ROOM_NAME, EstimatesStats, SocketState, SOCKET_STATES } from './model';\n\ntype CreateSocketParams = {\n    hostName?: string;\n    roomUUID?: string;\n    onSocketStateUpdate: (socketState: SocketState) => void;\n    onSessionUpdate: (session: PokerPlanningSession) => void;\n};\n\nexport const createSocket = ({\n    hostName = DEFAULT_HOSTNAME,\n    roomUUID = v4(),\n    onSocketStateUpdate,\n    onSessionUpdate,\n}: CreateSocketParams): ReconnectingWebSocket => {\n    const protocol = document.location.protocol === 'https:' ? 'wss' : 'ws';\n    const url = `${protocol}://${hostName}/ws?roomUUID=${roomUUID}`;\n\n    const socket = new ReconnectingWebSocket(url);\n    socket.onopen = () => onSocketStateUpdate(getSocketState(socket.readyState));\n    socket.onerror = () => onSocketStateUpdate(getSocketState(socket.readyState));\n    socket.onclose = () => onSocketStateUpdate(getSocketState(socket.readyState));\n    socket.onmessage = (ev: MessageEvent<string>) => {\n        const session = JSON.parse(ev.data) as PokerPlanningSession;\n        onSessionUpdate(session);\n    };\n\n    return socket;\n};\n\nexport const parseEstimates = (estimates: UserEstimate[], username?: string): EstimatesStats => {\n    const values = estimates\n        .map(e => e.estimate)\n        .filter(e => !!e)\n        .filter(e => isNumeric(e))\n        .map(e => Number(e));\n    const estimatesSum = values.reduce((acc, val) => acc + Number(val), 0);\n    const average = values.length > 0 ? estimatesSum / values.length : 0;\n    const estimatesAverage = Math.round(average * 10 + Number.EPSILON) / 10;\n    const isEstimatesCleared = estimates.length > 0 && estimates.every(e => e.estimate === undefined);\n    const isUsernameProvided = !!username?.trim();\n    const isUserMemberOfRoom = isUsernameProvided && estimates.some(e => e.username === username);\n\n    return {\n        values,\n        estimatesSum,\n        estimatesAverage,\n        isEstimatesCleared,\n        isUserMemberOfRoom,\n    };\n};\n\nexport const getSocketState = (state: number): SocketState => SOCKET_STATES.get(state) ?? 'closed';\n\ntype BuildRouteURLParams = {\n    hostName?: string;\n    roomUUID?: string;\n    roomName?: string;\n};\n\nexport const buildRouteURL = ({\n    hostName = DEFAULT_HOSTNAME,\n    roomName = DEFAULT_ROOM_NAME,\n    roomUUID = v4(),\n}: BuildRouteURLParams) => `/PokerPlanning/${hostName}/${roomUUID}/${roomName}`;\n\nexport const extractSinglePageAppHostnameAndPath = () => document.location.href.split('/#/')[0];\n\nexport const buildFullRouteURL = (params: BuildRouteURLParams) =>\n    extractSinglePageAppHostnameAndPath() + '/#' + buildRouteURL(params);\n","import {\n    Grid,\n    IconButton,\n    Paper,\n    Table,\n    TableBody,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Typography,\n} from '@mui/material';\nimport QRCode from 'qrcode';\nimport Button from '@mui/material/Button';\nimport { default as RemoveEstimates, default as RemoveUser } from '@mui/icons-material/DeleteOutline';\nimport PockerPlanningIcon from '@mui/icons-material/Filter3';\nimport ShareLink from '@mui/icons-material/Share';\nimport Visibility from '@mui/icons-material/Visibility';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\nimport QRCodeIcon from '@mui/icons-material/QrCode';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport ReconnectingWebSocket from 'reconnecting-websocket';\nimport { Dispatch } from 'redux';\nimport { setTextAction } from '../../actions/text-actions';\nimport { useConfirmDialogContext } from '../../components/ConfirmDialog/ConfirmDialogProvider';\nimport CopyButton from '../../components/CopyButton';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport { AppState } from '../../reducers';\nimport { isNotBlank } from '../../services/string-utils';\nimport { IS_DEV_MODE } from '../../services/utils';\nimport { buildRemoveUserMessage, buildResetMessage, buildVoteMessage } from './message.factory';\nimport {\n    CardsListingCategory,\n    CardsListingCategoryName,\n    CARDS_LISTING_CATEGORIES,\n    DEFAULT_CARDS_LISTING_CATEGORY,\n    SocketState,\n} from './model';\nimport { PokerPlanningSession, UserMessage } from './common.model';\nimport PokerCard from './PokerCard';\nimport PokerOptionsForm from './PokerOptionsForm';\nimport { buildFullRouteURL, buildRouteURL, createSocket, parseEstimates } from './services';\nimport { StyledTableCell, StyledTableRow, useStyles } from './styles';\nimport { useToasterUpdate } from '../../components/Toaster/ToasterProvider';\n\ninterface Props {\n    lastPokerPlanningRoomName?: string;\n    lastPokerPlanningUsername?: string;\n    lastPokerPlanningHostName?: string;\n    lastPokerCardsListingCategoryName?: CardsListingCategoryName;\n    storeInputText: (name: string, value: string) => void;\n}\n\nconst PokerPlanning: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const navigate = useNavigate();\n    const { showConfirmationDialog } = useConfirmDialogContext();\n    const { setToasterState } = useToasterUpdate();\n\n    // component inputs\n    const { hostName, roomUUID, roomName } = useParams();\n    const {\n        lastPokerPlanningRoomName,\n        lastPokerPlanningUsername,\n        lastPokerPlanningHostName,\n        lastPokerCardsListingCategoryName,\n        storeInputText,\n    } = props;\n\n    // component state\n    const socketRef = useRef<ReconnectingWebSocket>();\n    const [socketState, setSocketState] = useState<SocketState>('closed');\n    const [myEstimate, setMyEstimate] = useState<string>();\n    const [postponedMessage, setPostponedMessage] = useState<UserMessage>();\n    const [isEstimatesVisible, setIsEstimatesVisible] = useState<boolean>(false);\n    const [pokerSession, setPokerSession] = useState<PokerPlanningSession>();\n\n    // computing\n    const title = `Poker planning ${lastPokerPlanningRoomName ?? ''}`.trim();\n    const estimates = pokerSession?.estimates ?? [];\n    const cardsListingCategoryName: CardsListingCategoryName = lastPokerCardsListingCategoryName\n        ? lastPokerCardsListingCategoryName\n        : DEFAULT_CARDS_LISTING_CATEGORY;\n    const pokerCards: CardsListingCategory = CARDS_LISTING_CATEGORIES[cardsListingCategoryName];\n    const { estimatesAverage, isEstimatesCleared, isUserMemberOfRoom } = parseEstimates(\n        estimates,\n        lastPokerPlanningUsername,\n    );\n    const isReadyToStartSession = socketRef && isNotBlank(roomName) && isNotBlank(hostName) && isNotBlank(roomUUID);\n    const isReadyToVote = isReadyToStartSession && isNotBlank(lastPokerPlanningUsername);\n    const isReadyToCreateNewRoom = isNotBlank(lastPokerPlanningHostName) && isNotBlank(lastPokerPlanningRoomName);\n\n    // keep the store in sync whenever route params are updated\n    useEffect(() => {\n        if (isReadyToStartSession) {\n            storeInputText('lastPokerPlanningRoomName', roomName ?? '');\n            storeInputText('lastPokerPlanningHostName', hostName ?? '');\n        }\n    }, [roomName, hostName, storeInputText, isReadyToStartSession]);\n\n    // update current user vote\n    useEffect(() => {\n        if (!pokerSession || !lastPokerPlanningUsername) {\n            return;\n        }\n\n        if (IS_DEV_MODE) {\n            console.info('poker session', pokerSession);\n        }\n\n        const myUserSessionEstimate = pokerSession.estimates.find(e => e.username === lastPokerPlanningUsername);\n        if (myUserSessionEstimate) {\n            setMyEstimate(myUserSessionEstimate.estimate);\n        }\n    }, [lastPokerPlanningUsername, pokerSession]);\n\n    useEffect(() => {\n        if (!isReadyToStartSession) {\n            return;\n        }\n\n        socketRef.current = createSocket({\n            hostName,\n            roomUUID,\n            onSessionUpdate: setPokerSession,\n            onSocketStateUpdate: setSocketState,\n        });\n\n        // socket cleanup whenever component unmount\n        return () => socketRef.current?.close();\n    }, [socketRef, isReadyToStartSession, hostName, roomUUID]);\n\n    const handleCreateNewRoom = () => {\n        const url = buildRouteURL({ hostName: lastPokerPlanningHostName, roomName: lastPokerPlanningRoomName });\n        navigate(url, { replace: true });\n    };\n\n    useEffect(() => {\n        if (isEstimatesCleared) {\n            setIsEstimatesVisible(false);\n            setMyEstimate(undefined);\n        }\n    }, [isEstimatesCleared]);\n\n    const updateMyEstimate = (value?: string) => {\n        if (value !== myEstimate) {\n            setMyEstimate(value);\n            sendOrPostpone(buildVoteMessage(lastPokerPlanningUsername, value));\n        } else {\n            setMyEstimate(undefined); // user is un-voting\n            sendOrPostpone(buildVoteMessage(lastPokerPlanningUsername));\n        }\n    };\n\n    const sendOrPostpone = (message: UserMessage) => {\n        if (socketRef.current && socketState === 'open') {\n            socketRef.current.send(JSON.stringify(message));\n        } else {\n            setPostponedMessage(message);\n        }\n    };\n\n    const handleClearAllVotes = () =>\n        showConfirmationDialog({\n            title: 'Confirmation',\n            description: 'Are you sure you want to delete all votes?',\n            onConfirm: () => sendOrPostpone(buildResetMessage()),\n        });\n\n    // send delayed message (if any)\n    useEffect(() => {\n        if (socketRef.current && socketState === 'open' && postponedMessage) {\n            socketRef.current.send(JSON.stringify(postponedMessage));\n            setPostponedMessage(undefined);\n        }\n    }, [postponedMessage, socketState]);\n\n    const shareAsQRCode = async () => {\n        try {\n            const data = buildFullRouteURL({ hostName, roomUUID, roomName });\n            const imgDataURL = await QRCode.toDataURL(data, { type: 'image/png', width: 200 });\n            const response = await fetch(imgDataURL);\n            const blob = await response.blob();\n            // TODO We may have to do this workaround for Safari: https://stackoverflow.com/a/68241503/704681\n            await navigator.clipboard.write([new ClipboardItem({ 'image/png': blob })]);\n            setToasterState({ open: true, message: 'Image copied', type: 'success', autoHideDuration: 2000 });\n        } catch (e) {\n            console.error(e);\n            const errorMessage = `Unexpected copy error, see detail on console`;\n            setToasterState({ open: true, message: errorMessage, type: 'warning', autoHideDuration: 2000 });\n        }\n    };\n\n    return (\n        <>\n            <Helmet title={title} />\n\n            <div className={classes.root}>\n                <FeatureTitle iconType={PockerPlanningIcon} title={title} />\n\n                <Grid container>\n                    <Grid item md={9} xs={12}>\n                        <PokerOptionsForm socketState={socketState} />\n                    </Grid>\n                    <Grid item md={3} xs={12}>\n                        <Grid container justifyContent=\"flex-end\" alignItems=\"center\" className={classes.toolbar}>\n                            <Button\n                                sx={{ mr: 1 }}\n                                variant=\"contained\"\n                                title=\"Register the team and start planning in a new room\"\n                                color=\"primary\"\n                                disabled={!isReadyToCreateNewRoom}\n                                onClick={handleCreateNewRoom}>\n                                New\n                            </Button>\n                            <Button\n                                sx={{ mr: 1 }}\n                                variant=\"contained\"\n                                title=\"Enter existing room\"\n                                color=\"primary\"\n                                disabled={isUserMemberOfRoom || !isReadyToVote}\n                                onClick={() => sendOrPostpone(buildVoteMessage(lastPokerPlanningUsername))}>\n                                Join\n                            </Button>\n                            <CopyButton\n                                sx={{ mr: 1 }}\n                                isDisabled={!isReadyToStartSession}\n                                data={buildFullRouteURL({ hostName, roomUUID, roomName })}\n                                Icon={ShareLink}\n                                hoverMessage=\"Copy link to clipboard for sharing\"\n                                feedbackMessage=\"Link copied to clipboard, you can now share to all members\"\n                            />\n                            <Button\n                                variant=\"contained\"\n                                title=\"Copy QRCode for sharing\"\n                                disabled={!isReadyToStartSession}\n                                onClick={shareAsQRCode}\n                                color=\"primary\">\n                                <QRCodeIcon />\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n\n                <div className={classes.submitEstimate}>\n                    {pokerCards.values.map(value => (\n                        <PokerCard\n                            key={value}\n                            isDisabled={!isReadyToVote}\n                            isSelected={myEstimate === value}\n                            value={value}\n                            onClick={() => updateMyEstimate(value)}\n                        />\n                    ))}\n                </div>\n\n                <TableContainer component={Paper} className={classes.teamEstimates}>\n                    <Table size=\"small\">\n                        <TableHead className={classes.tableHeader}>\n                            <TableRow>\n                                <StyledTableCell component=\"th\" scope=\"row\" width={30}></StyledTableCell>\n                                <StyledTableCell component=\"th\" scope=\"row\">\n                                    Team member\n                                </StyledTableCell>\n                                <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                    Points\n                                    <IconButton\n                                        title=\"Toggle story points visibility\"\n                                        disabled={!isUserMemberOfRoom}\n                                        onClick={() => setIsEstimatesVisible(v => !v)}>\n                                        {isEstimatesVisible ? <VisibilityOff /> : <Visibility />}\n                                    </IconButton>\n                                    <IconButton\n                                        onClick={handleClearAllVotes}\n                                        title=\"Clear all votes\"\n                                        disabled={!isUserMemberOfRoom}>\n                                        <RemoveEstimates />\n                                    </IconButton>\n                                </StyledTableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {estimates.sort(pokerCards.sorter).map(({ username, estimate }) => {\n                                const estimateWhenDisplayON = estimate ?? '…';\n                                const estimateWhenDisplayOFF = estimate ? '✔' : '…';\n                                return (\n                                    <StyledTableRow key={username}>\n                                        <StyledTableCell width={30}>\n                                            <IconButton\n                                                disabled={!isUserMemberOfRoom}\n                                                onClick={() => sendOrPostpone(buildRemoveUserMessage(username))}\n                                                title={`Remove user \"${username}\"`}>\n                                                <RemoveUser />\n                                            </IconButton>\n                                        </StyledTableCell>\n                                        <StyledTableCell>{username}</StyledTableCell>\n                                        <StyledTableCell align=\"center\">\n                                            {isEstimatesVisible ? estimateWhenDisplayON : estimateWhenDisplayOFF}\n                                        </StyledTableCell>\n                                    </StyledTableRow>\n                                );\n                            })}\n                            <StyledTableRow key=\"average\">\n                                <StyledTableCell width={30}></StyledTableCell>\n                                <StyledTableCell>\n                                    <Typography>Story points average</Typography>\n                                </StyledTableCell>\n                                <StyledTableCell align=\"center\">\n                                    <Typography>{isEstimatesVisible ? estimatesAverage : ''}</Typography>\n                                </StyledTableCell>\n                            </StyledTableRow>\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n        </>\n    );\n};\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        lastPokerPlanningHostName: state.textInputs['lastPokerPlanningHostName'],\n        lastPokerPlanningRoomName: state.textInputs['lastPokerPlanningRoomName'],\n        lastPokerPlanningUsername: state.textInputs['lastPokerPlanningUsername'],\n        lastPokerCardsListingCategoryName: state.textInputs[\n            'lastPokerCardsListingCategoryName'\n        ] as CardsListingCategoryName,\n    };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PokerPlanning);\n","import { Typography } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport React from 'react';\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        wordBreak: 'break-word',\n    },\n    titleWithIcon: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    titleContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    icon: {\n        height: '40px',\n        width: '40px',\n        marginRight: theme.spacing(1),\n    },\n}));\n\ninterface Props {\n    title: string;\n    iconType: any;\n}\n\nconst FeatureTitle: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const FeatureIcon = props.iconType;\n\n    return (\n        <div className={classes.titleContainer}>\n            <div className={classes.titleWithIcon}>\n                <FeatureIcon className={classes.icon} />\n                <Typography variant=\"h5\" className={classes.title}>\n                    {props.title}\n                </Typography>\n            </div>\n        </div>\n    );\n};\n\nexport default FeatureTitle;\n","import { Button, ButtonProps, SvgIconTypeMap } from '@mui/material';\nimport { OverridableComponent } from '@mui/material/OverridableComponent';\nimport AssignmentTurnedIn from '@mui/icons-material/AssignmentTurnedIn';\nimport * as copy from 'copy-to-clipboard';\nimport React from 'react';\nimport { useToasterUpdate } from '../Toaster/ToasterProvider';\n\ntype Props = {\n    data?: string;\n    isDisabled?: boolean;\n    hoverMessage?: string;\n    feedbackMessage?: string;\n    Icon?: OverridableComponent<SvgIconTypeMap<unknown, 'svg'>>;\n} & ButtonProps;\n\nconst CopyButton: React.FC<Props> = ({\n    data,\n    isDisabled,\n    hoverMessage,\n    feedbackMessage,\n    Icon = AssignmentTurnedIn,\n    ...others\n}: Props) => {\n    const { setToasterState } = useToasterUpdate();\n\n    const handleCopy = () => {\n        if (!data) {\n            return;\n        }\n\n        const message = feedbackMessage ?? `Content copied into clipboard: ${data.substring(0, 25)} …`;\n\n        copy.default(data, { format: 'text/plain' });\n        setToasterState({ open: true, message, type: 'success', autoHideDuration: 2000 });\n    };\n\n    return (\n        <Button\n            {...others}\n            onClick={handleCopy}\n            disabled={!data || isDisabled}\n            title={hoverMessage ?? 'Copy to clipboard'}\n            variant=\"contained\"\n            color=\"primary\">\n            <Icon />\n        </Button>\n    );\n};\n\nexport default CopyButton;\n","export function isBlank(str: string | undefined | null) {\n    if (!str || str.trim().length === 0) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function isNotBlank(str: string | undefined | null) {\n    return !isBlank(str);\n}\n\nexport const isNumeric = (val?: string): boolean => !isNaN(Number(val));\n"],"sourceRoot":""}