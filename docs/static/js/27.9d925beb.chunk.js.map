{"version":3,"sources":["containers/GithubUserProjects/styles.ts","containers/GithubUserProjects/index.tsx","components/FeatureTitle/index.tsx","hooks/usePagination.ts","components/Filter/styles.ts","components/Filter/index.tsx","components/FilterStats/styles.ts","components/FilterStats/index.tsx"],"names":["StyledTableCell","withStyles","body","fontSize","whiteSpace","wordBreak","TableCell","StyledTableRow","theme","root","backgroundColor","palette","action","hover","TableRow","useStyles","makeStyles","margin","spacing","toolbar","padding","marginLeft","tableHeader","primary","main","dateColumn","textAlign","minWidth","watchColumn","mapStateToProps","state","inputText","textInputs","projects","githubUserProjects","searching","mapDispatchToProps","dispatch","listGithubUserProjectsRequested","username","storeInputText","name","value","setTextAction","connect","withWidth","props","title","classes","React","useState","inputFilter","setInputFilter","setGlobalSpinnerState","useGlobalSpinnerUpdate","usePagination","page","setPage","rowsPerPage","handleChangeRowsPerPage","useEffect","open","setTimeout","Helmet","className","FeatureTitle","iconType","GithubIcon","Toolbar","Filter","autofocus","isWidthUp","width","label","initialFilter","onFilterChange","newInputFilter","Box","display","flexGrow","FilterStats","count","length","TablePagination","rowsPerPageOptions","component","onPageChange","_","onRowsPerPageChange","TableContainer","Paper","Table","size","TableHead","scope","TableBody","slice","map","project","Link","href","html_url","target","rel","description","Date","updated_at","toLocaleDateString","watchers_count","id","titleWithIcon","alignItems","titleContainer","justifyContent","icon","height","marginRight","FeatureIcon","variant","setRowsPerPage","evt","fullWidth","filter","setFilter","inputLabel","debounced","useDebouncedCallback","FormControl","InputLabel","htmlFor","Input","autoFocus","type","onChange","e","endAdornment","InputAdornment","position","IconButton","SPACE","working","setWorking","Typography","align"],"mappings":"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","file":"static/js/27.9d925beb.chunk.js","sourcesContent":["import { makeStyles, TableCell, TableRow, withStyles } from '@material-ui/core';\n\nexport const StyledTableCell = withStyles(() => ({\n    body: {\n        fontSize: 14,\n        whiteSpace: 'normal',\n        wordBreak: 'break-word',\n    },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles(theme => ({\n    root: {\n        '&:nth-of-type(even)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\nexport const useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    toolbar: {\n        margin: 0,\n        padding: 0,\n        '& > *': {\n            marginLeft: theme.spacing(1),\n        },\n    },\n    tableHeader: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    dateColumn: {\n        textAlign: 'center',\n        minWidth: 120,\n    },\n    watchColumn: {\n        textAlign: 'center',\n    },\n}));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { Helmet } from 'react-helmet';\n\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\nimport {\n    Box,\n    Link,\n    Paper,\n    Table,\n    TableBody,\n    TableContainer,\n    TableHead,\n    TablePagination,\n    TableRow,\n    Toolbar,\n} from '@material-ui/core';\nimport GithubIcon from '@material-ui/icons/GitHub';\nimport WatchIcon from '@material-ui/icons/Visibility';\n\nimport FeatureTitle from '../../components/FeatureTitle';\nimport { AppState } from '../../reducers';\nimport Filter from '../../components/Filter';\nimport { listGithubUserProjectsRequested } from '../../actions/github-userprojects-actions';\nimport { StyledTableCell, StyledTableRow, useStyles } from './styles';\nimport { GithubUserProject } from '../../types/github-types';\nimport { useGlobalSpinnerUpdate } from '../../components/Spinner/GlobalSpinnerProvider';\nimport FilterStats from '../../components/FilterStats';\nimport { setTextAction } from '../../actions/text-actions';\nimport { usePagination } from '../../hooks/usePagination';\n\ninterface Props {\n    width: Breakpoint;\n    inputText: string;\n    projects: GithubUserProject[];\n    searching: boolean;\n\n    listGithubUserProjectsRequested: (username: string) => void;\n    storeInputText: (name: string, value: string) => void;\n}\n\nconst GithubUserProjects: React.FC<Props> = (props: Props) => {\n    const title = 'Github user projects';\n    const classes = useStyles();\n    const { inputText, searching, projects, listGithubUserProjectsRequested, storeInputText } = props;\n    const [inputFilter, setInputFilter] = React.useState(inputText);\n    const { setGlobalSpinnerState } = useGlobalSpinnerUpdate();\n    const { page, setPage, rowsPerPage, handleChangeRowsPerPage } = usePagination();\n\n    function applyFilter(newInputFilter: string) {\n        setInputFilter(newInputFilter);\n        listGithubUserProjectsRequested(newInputFilter);\n        storeInputText('lastGithubUsernameValue', newInputFilter);\n    }\n\n    React.useEffect(() => {\n        if (searching && inputText) {\n            setGlobalSpinnerState({ open: true });\n        } else {\n            setTimeout(() => setGlobalSpinnerState({ open: false }), 500);\n        }\n    }, [searching, inputText, setGlobalSpinnerState]);\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={GithubIcon} title={title} />\n\n                <Toolbar className={classes.toolbar}>\n                    <Filter\n                        autofocus={isWidthUp('md', props.width)}\n                        label=\"Username\"\n                        initialFilter={inputFilter}\n                        onFilterChange={applyFilter}\n                    />\n                    <Box display=\"flex\" flexGrow={1}></Box>\n                    <FilterStats count={projects.length} searching={searching} />\n                </Toolbar>\n\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 25, 50, 100]}\n                    component=\"div\"\n                    count={projects.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onPageChange={(_, page) => setPage(page)}\n                    onRowsPerPageChange={handleChangeRowsPerPage}\n                />\n                <TableContainer component={Paper}>\n                    <Table size={isWidthUp('md', props.width) ? 'medium' : 'small'}>\n                        <TableHead className={classes.tableHeader}>\n                            <TableRow>\n                                <StyledTableCell component=\"th\" scope=\"row\">\n                                    Project\n                                </StyledTableCell>\n                                <StyledTableCell component=\"th\" scope=\"row\">\n                                    Description\n                                </StyledTableCell>\n                                <StyledTableCell component=\"th\" scope=\"row\" className={classes.dateColumn}>\n                                    Updated\n                                </StyledTableCell>\n                                <StyledTableCell component=\"th\" scope=\"row\">\n                                    <WatchIcon />\n                                </StyledTableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {projects.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(project => {\n                                return (\n                                    <StyledTableRow key={project.id}>\n                                        <StyledTableCell>\n                                            <Link href={project.html_url} target=\"_blank\" rel=\"noreferrer\">\n                                                {project.name}\n                                            </Link>\n                                        </StyledTableCell>\n                                        <StyledTableCell>{project.description}</StyledTableCell>\n                                        <StyledTableCell className={classes.dateColumn}>\n                                            {new Date(project.updated_at).toLocaleDateString()}\n                                        </StyledTableCell>\n                                        <StyledTableCell className={classes.watchColumn}>\n                                            {project.watchers_count}\n                                        </StyledTableCell>\n                                    </StyledTableRow>\n                                );\n                            })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n        </>\n    );\n};\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        inputText: state.textInputs['lastGithubUsernameValue'],\n        projects: state.githubUserProjects.projects,\n        searching: state.githubUserProjects.searching,\n    };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        listGithubUserProjectsRequested: (username: string) => dispatch(listGithubUserProjectsRequested(username)),\n        storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withWidth()(GithubUserProjects));\n","import { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        wordBreak: 'break-word',\n    },\n    titleWithIcon: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    titleContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    icon: {\n        height: '40px',\n        width: '40px',\n        marginRight: theme.spacing(1),\n    },\n}));\n\ninterface Props {\n    title: string;\n    iconType: any;\n}\n\nconst FeatureTitle: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const FeatureIcon = props.iconType;\n\n    return (\n        <div className={classes.titleContainer}>\n            <div className={classes.titleWithIcon}>\n                <FeatureIcon className={classes.icon} />\n                <Typography variant=\"h5\" className={classes.title}>\n                    {props.title}\n                </Typography>\n            </div>\n        </div>\n    );\n};\n\nexport default FeatureTitle;\n","import { useState } from 'react';\n\nexport const usePagination = () => {\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n\n    const handleChangeRowsPerPage = (evt: React.ChangeEvent<HTMLInputElement>) => {\n        setRowsPerPage(+evt.target.value);\n        setPage(0);\n    };\n\n    return {\n        page,\n        setPage,\n        rowsPerPage,\n        handleChangeRowsPerPage,\n    };\n};\n","import { makeStyles } from '@material-ui/core';\n\nexport const useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n}));\n","import React from 'react';\nimport { FormControl, IconButton, Input, InputAdornment, InputLabel } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\n\nimport { useStyles } from './styles';\nimport { useDebouncedCallback } from 'use-debounce';\n\ninterface Props {\n    label?: string;\n    autofocus?: boolean;\n    fullWidth?: boolean;\n    initialFilter: string;\n    onFilterChange: (newValue: string) => void;\n}\n\nconst Filter: React.FC<Props> = (props: Props) => {\n    const { autofocus, initialFilter, label, onFilterChange, fullWidth } = props;\n    const [filter, setFilter] = React.useState('');\n    const classes = useStyles();\n    const inputLabel = label ? label : 'Search';\n\n    // https://www.npmjs.com/package/use-debounce\n    const debounced = useDebouncedCallback((filter: string) => onFilterChange(filter), 300);\n\n    React.useEffect(() => {\n        setFilter(initialFilter);\n    }, [initialFilter]);\n    React.useEffect(() => debounced(filter), [filter, debounced]);\n\n    return (\n        <FormControl fullWidth={fullWidth} className={classes.root}>\n            <InputLabel htmlFor=\"searchField\">{inputLabel}</InputLabel>\n            <Input\n                id=\"searchField\"\n                autoFocus={autofocus}\n                type=\"text\"\n                value={filter}\n                onChange={e => setFilter(e.target.value)}\n                endAdornment={\n                    <InputAdornment position=\"end\">\n                        <IconButton>\n                            <SearchIcon />\n                        </IconButton>\n                    </InputAdornment>\n                }\n            />\n        </FormControl>\n    );\n};\n\nexport default Filter;\n","import { makeStyles } from '@material-ui/core';\n\nexport const useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n}));\n","import React from 'react';\nimport { Typography } from '@material-ui/core';\n\nimport { useStyles } from './styles';\nimport { SPACE } from '../../constants';\n\ninterface Props {\n    searching: boolean;\n    count: number;\n}\n\nconst FILTERING = 'filtering…';\n\nconst FilterStats: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const [working, setWorking] = React.useState(SPACE);\n    const { count, searching } = props;\n\n    React.useEffect(() => {\n        if (searching) {\n            setWorking(FILTERING);\n        } else {\n            setTimeout(() => setWorking(SPACE), 800);\n        }\n    }, [searching]);\n\n    return (\n        <div className={classes.root}>\n            <Typography align=\"right\">{working}</Typography>\n            <Typography align=\"right\">{count}</Typography>\n        </div>\n    );\n};\n\nexport default FilterStats;\n"],"sourceRoot":""}