{"version":3,"sources":["containers/Base64FileEncoder/services.ts","containers/Base64FileEncoder/styled.ts","containers/Base64FileEncoder/index.tsx","components/FeatureTitle/index.tsx","components/CopyButton/index.tsx","components/Spinner/Spinner.tsx"],"names":["MAX_FILE_SIZE_BYTES","imageResizer","marginTop","display","alignItems","justifyContent","border","useStyles","makeStyles","theme","root","margin","spacing","flexGrow","header","padding","dropzone","flex","cursor","flexDirection","image","width","toolbar","marginLeft","Base64FileEncoder","title","classes","useState","encodedFiles","setEncodedFiles","errors","setErrors","onDrop","useCallback","acceptedFiles","rejectedFiles","map","rejection","name","file","size","error","prettyBytes","forEach","Promise","resolve","reject","reader","FileReader","base","addEventListener","e","encoded","result","readAsDataURL","loadFile","then","encFile","list","catch","useDropzone","maxSize","multiple","getRootProps","getInputProps","processing","length","Helmet","className","FeatureTitle","iconType","PanoramaIcon","Spinner","active","Card","Typography","variant","errFile","idx","key","color","startsWith","Box","style","defaultSize","height","src","alt","CardContent","gutterBottom","align","component","TextField","label","fullWidth","value","multiline","minRows","Toolbar","CopyButton","data","wordBreak","titleWithIcon","titleContainer","icon","marginRight","FeatureIcon","isDisabled","hoverMessage","feedbackMessage","Icon","AssignmentTurnedIn","others","setToasterState","useToasterUpdate","onClick","message","substring","copy","format","open","type","autoHideDuration","disabled","background","props","classNamePrefix","spinner","children"],"mappings":"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","file":"static/js/33.485b8fb9.chunk.js","sourcesContent":["import prettyBytes from 'pretty-bytes';\nimport { FileRejection } from 'react-dropzone';\n\nexport interface EncodedFile {\n  name: string;\n  size: number;\n  encoded: string;\n}\n\nexport interface ErrorFile {\n  name: string;\n  size: number;\n  error: string;\n}\n\nexport const MAX_FILE_SIZE_BYTES = 250000;\n\nexport function loadFile(file: File): Promise<EncodedFile> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    const base = {\n      name: file.name,\n      size: file.size,\n    };\n\n    reader.addEventListener('abort', e => reject(`File upload aborted: ${e}`));\n    reader.addEventListener('error', e => reject(`File upload error: ${e}`));\n    reader.addEventListener(\n      'load',\n      () =>\n        resolve({\n          ...base,\n          encoded: reader.result as string,\n        }),\n      false,\n    );\n\n    reader.readAsDataURL(file);\n  });\n}\n\nexport function rejectFiles(fileRejections: FileRejection[]): ErrorFile[] {\n  return fileRejections.map(rejection => ({\n    name: rejection.file.name,\n    size: rejection.file.size,\n    error: `Exceeds size limit: ${prettyBytes(MAX_FILE_SIZE_BYTES)}`,\n  }));\n}\n","import { makeStyles } from '@mui/styles';\n\nexport const imageResizer = {\n  marginTop: 10,\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  border: 'solid 1px blue',\n};\n\nexport const useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing(1),\n    flexGrow: 1,\n  },\n  header: {\n    padding: '20px 0',\n  },\n  dropzone: {\n    flex: '1',\n    cursor: 'pointer',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: '20px',\n  },\n  image: {\n    width: '100%',\n  },\n  toolbar: {\n    margin: 0,\n    padding: 0,\n    '& > *': {\n      marginLeft: theme.spacing(1),\n    },\n  },\n}));\n","import React, { useCallback, useState } from 'react';\n\nimport PanoramaIcon from '@mui/icons-material/Panorama';\nimport { Box, Card, CardContent, TextField, Toolbar, Typography } from '@mui/material';\nimport prettyBytes from 'pretty-bytes';\nimport { Resizable } from 're-resizable';\nimport { FileRejection, useDropzone } from 'react-dropzone';\nimport { Helmet } from 'react-helmet';\n\nimport CopyButton from '../../components/CopyButton';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport { Spinner } from '../../components/Spinner/Spinner';\nimport { EncodedFile, ErrorFile, loadFile, MAX_FILE_SIZE_BYTES, rejectFiles } from './services';\nimport { imageResizer, useStyles } from './styled';\n\nconst Base64FileEncoder: React.FC = () => {\n  const title = 'Base64 file encoder';\n  const classes = useStyles();\n  const [encodedFiles, setEncodedFiles] = useState<EncodedFile[]>([]);\n  const [errors, setErrors] = useState<ErrorFile[]>([]);\n\n  const onDrop = useCallback((acceptedFiles: File[], rejectedFiles: FileRejection[]) => {\n    setErrors(rejectFiles(rejectedFiles)); // set/reset errors\n    setEncodedFiles([]); // reset UI\n\n    acceptedFiles.forEach((file: File) =>\n      loadFile(file)\n        .then(encFile => setEncodedFiles(list => [...list, encFile]))\n        .catch(error =>\n          setErrors(list => [\n            ...list,\n            {\n              name: file.name,\n              size: file.size,\n              error,\n            },\n          ]),\n        ),\n    );\n  }, []);\n\n  const { acceptedFiles, getRootProps, getInputProps } = useDropzone({\n    maxSize: MAX_FILE_SIZE_BYTES,\n    multiple: true,\n    onDrop,\n  });\n\n  const processing = acceptedFiles.length !== encodedFiles.length;\n\n  return (\n    <>\n      <Helmet title={title} />\n      <div className={classes.root}>\n        <FeatureTitle iconType={PanoramaIcon} title={title} />\n\n        <Spinner active={processing}>\n          <Card {...getRootProps({ className: classes.dropzone })}>\n            <input {...getInputProps()} />\n            <Typography variant=\"body1\">Drag 'n' drop some files here</Typography>\n            <Typography variant=\"body1\">or just click to select files</Typography>\n          </Card>\n        </Spinner>\n        <div>\n          {errors &&\n            errors.map((errFile: ErrorFile, idx: number) => {\n              const size = prettyBytes(errFile.size);\n              return (\n                <div key={idx}>\n                  <Typography variant=\"body1\">\n                    <strong>{errFile.name}</strong> ({size} bytes): {errFile.error}\n                  </Typography>\n                </div>\n              );\n            })}\n        </div>\n        <div>\n          {processing && (\n            <Typography color=\"secondary\" variant=\"h5\">\n              Processing {acceptedFiles.length - encodedFiles.length} file(s)\n            </Typography>\n          )}\n        </div>\n\n        {encodedFiles.map((file: EncodedFile, idx: number) => (\n          <div key={idx}>\n            <Card>\n              {file.encoded.startsWith('data:image/') && (\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                  <Resizable style={imageResizer} defaultSize={{ width: 300, height: '100%' }}>\n                    <img src={file.encoded} alt={file.name} className={classes.image} />\n                  </Resizable>\n                </Box>\n              )}\n              <CardContent>\n                <Typography gutterBottom align=\"center\" variant=\"h5\" component=\"h2\">\n                  <b>{file.name}</b> ({prettyBytes(file.size)})\n                </Typography>\n                {file.encoded.startsWith('data:image/') && (\n                  <TextField\n                    label=\"Full img tag\"\n                    fullWidth\n                    value={`<img alt=\"${file.name}\" src=\"${file.encoded}\"/>`}\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                  />\n                )}\n                <TextField\n                  label=\"Base64 encoded. Copy-paste into 'src' attribute\"\n                  fullWidth\n                  value={file.encoded}\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  multiline\n                  minRows=\"8\"\n                />\n                <Toolbar className={classes.toolbar}>\n                  <Box display=\"flex\" flexGrow={1}></Box>\n                  <CopyButton data={file.encoded} />\n                </Toolbar>\n              </CardContent>\n            </Card>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default Base64FileEncoder;\n","import React, { ElementType } from 'react';\n\nimport { Typography } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles(theme => ({\n  title: {\n    wordBreak: 'break-word',\n  },\n  titleWithIcon: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  titleContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  icon: {\n    height: '40px',\n    width: '40px',\n    marginRight: theme.spacing(1),\n  },\n}));\n\ninterface Props {\n  title: string;\n  iconType: ElementType;\n}\n\nconst FeatureTitle: React.FC<Props> = ({ title, iconType: FeatureIcon }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.titleContainer}>\n      <div className={classes.titleWithIcon}>\n        <FeatureIcon className={classes.icon} />\n        <Typography variant=\"h5\" className={classes.title}>\n          {title}\n        </Typography>\n      </div>\n    </div>\n  );\n};\n\nexport default FeatureTitle;\n","import React from 'react';\n\nimport AssignmentTurnedIn from '@mui/icons-material/AssignmentTurnedIn';\nimport { Button, ButtonProps, SvgIconTypeMap } from '@mui/material';\nimport { OverridableComponent } from '@mui/material/OverridableComponent';\nimport * as copy from 'copy-to-clipboard';\n\nimport { useToasterUpdate } from '../Toaster/ToasterProvider';\n\ntype Props = {\n  data?: string;\n  isDisabled?: boolean;\n  hoverMessage?: string;\n  feedbackMessage?: string;\n  Icon?: OverridableComponent<SvgIconTypeMap<unknown, 'svg'>>;\n} & ButtonProps;\n\nconst CopyButton: React.FC<Props> = ({\n  data,\n  isDisabled,\n  hoverMessage,\n  feedbackMessage,\n  Icon = AssignmentTurnedIn,\n  ...others\n}: Props) => {\n  const { setToasterState } = useToasterUpdate();\n\n  const handleCopy = () => {\n    if (!data) {\n      return;\n    }\n\n    const message = feedbackMessage ?? `Content copied into clipboard: ${data.substring(0, 25)} …`;\n\n    copy.default(data, { format: 'text/plain' });\n    setToasterState({ open: true, message, type: 'success', autoHideDuration: 2000 });\n  };\n\n  return (\n    <Button\n      {...others}\n      onClick={handleCopy}\n      disabled={!data || isDisabled}\n      title={hoverMessage ?? 'Copy to clipboard'}\n      variant=\"contained\"\n      color=\"primary\">\n      <Icon />\n    </Button>\n  );\n};\n\nexport default CopyButton;\n","import React from 'react';\n\nimport { makeStyles } from '@mui/styles';\nimport LoadingOverlay from 'react-loading-overlay';\nimport ScaleLoader from 'react-spinners/ScaleLoader';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    '& .spinner_overlay': {\n      background: 'rgba(0, 0, 0, 0.3)',\n    },\n  },\n}));\n\ninterface Props {\n  active: boolean;\n  children: React.ReactNode;\n}\n\nexport const Spinner: React.FC<Props> = (props: Props) => {\n  const classes = useStyles();\n\n  return (\n    <LoadingOverlay\n      classNamePrefix=\"spinner_\"\n      className={classes.root}\n      active={props.active}\n      spinner={<ScaleLoader color=\"#bf3a2b\" />}>\n      {props.children}\n    </LoadingOverlay>\n  );\n};\n"],"sourceRoot":""}