{"version":3,"sources":["containers/DateConverter/constants.ts","containers/DateConverter/styles.ts","containers/DateConverter/CardLayout.tsx","containers/DateConverter/TableLayout.tsx","containers/DateConverter/index.tsx","hooks/useSyntaxHighlightTheme.ts"],"names":["SAMPLE_DATEFNS_TZ_CONVERT","SAMPLE_DATEFNS_FORMAT","StyledTableCell","withStyles","theme","body","fontSize","spacing","whiteSpace","wordBreak","TableCell","StyledTableRow","root","backgroundColor","palette","action","hover","TableRow","useStyles","makeStyles","margin","panel","marginTop","marginBottom","form","display","flexWrap","value","fontFamily","marginLeft","tableHeader","primary","main","timePickerField","marginRight","width","formatted","overflow","padding","card","otherSubtitle","CardLayout","date","epochString","classes","syntaxTheme","useSyntaxHighlightTheme","Card","className","CardContent","Typography","variant","toISOString","CardActions","CopyButton","data","toLocaleDateString","toLocaleTimeString","getTimezoneOffset","style","language","replace","TableLayout","TableContainer","component","Paper","Table","size","isWidthUp","TableHead","TableBody","scope","toUTCString","mapStateToProps","state","inputText","textInputs","mapDispatchToProps","dispatch","storeInputText","name","setTextAction","connect","withWidth","props","title","useState","setDate","handleDateChange","getTime","useEffect","Date","Helmet","FeatureTitle","iconType","EventIcon","noValidate","utils","DateFnsUtils","Grid","container","justifyContent","Box","alignItems","TextField","autoFocus","label","placeholder","type","onChange","e","target","Button","color","onClick","format","KeyboardButtonProps","isWidthDown","usePreferenceTheme","isDark","dark","docco"],"mappings":"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","file":"static/js/18.dfaecd8e.chunk.js","sourcesContent":["export const SAMPLE_DATEFNS_TZ_CONVERT = `import { utcToZonedTime } from 'date-fns-tz';\n\n// Obtain a Date instance that will render the\n// equivalent Berlin time for the UTC date\nconst utcValue = '#utc_value#';\nconst date = new Date(utcValue);\nconst timezone = 'Europe/Berlin';\nconst result = utcToZonedTime(date, timezone);`;\n\nexport const SAMPLE_DATEFNS_FORMAT = `import { format } from \"date-fns\";\n\nconst utcValue = '#utc_value#';\nconst date = new Date(utcValue);\nconst format = 'yyyy-MM-dd-HH-mm-ss';\nconst formattedDate = format(date, format);`\n","import { makeStyles, TableCell, TableRow, withStyles } from '@material-ui/core';\n\nexport const StyledTableCell = withStyles((theme) => ({\n    body: {\n        fontSize: theme.spacing(1.75),\n        whiteSpace: 'normal',\n        wordBreak: 'break-word',\n    },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(even)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\nexport const useStyles = makeStyles((theme) => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    panel: {\n        marginTop: theme.spacing(3),\n        marginBottom: theme.spacing(3),\n    },\n    form: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    value: {\n        fontFamily: 'monospace',\n        marginTop: theme.spacing(1),\n        marginLeft: theme.spacing(1),\n    },\n    tableHeader: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    timePickerField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: 260,\n    },\n    formatted: {\n        width: '100%',\n        overflow: 'auto',\n        padding: 0,\n        margin: 0,\n    },\n    card: {\n        marginBottom: theme.spacing(1),\n    },\n    otherSubtitle: {\n        marginTop: theme.spacing(1),\n    },\n}));\n","import { Card, CardActions, CardContent, Typography } from '@material-ui/core';\nimport React from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport CopyButton from '../../components/CopyButton';\nimport { useSyntaxHighlightTheme } from '../../hooks/useSyntaxHighlightTheme';\nimport { SAMPLE_DATEFNS_FORMAT, SAMPLE_DATEFNS_TZ_CONVERT } from './constants';\nimport { useStyles } from './styles';\n\ninterface Props {\n    date: Date | null;\n    epochString?: string;\n}\n\nexport const CardLayout: React.FC<Props> = ({ date, epochString }: Props) => {\n    const classes = useStyles();\n    const syntaxTheme = useSyntaxHighlightTheme();\n\n    return (\n        <>\n            <Card className={classes.card}>\n                <CardContent>\n                    <Typography variant='subtitle1'>ISO string / JSON</Typography>\n                    <span className={classes.value}>{date?.toISOString()}</span>\n                </CardContent>\n                <CardActions>\n                    <CopyButton data={date?.toISOString()} />\n                </CardActions>\n            </Card>\n\n            <Card className={classes.card}>\n                <CardContent>\n                    <Typography variant='subtitle1'>Locale date string</Typography>\n                    <div className={classes.value}>\n                        {date?.toLocaleDateString()} {date?.toLocaleTimeString()}\n                    </div>\n                    <Typography variant='subtitle1' className={classes.otherSubtitle}>\n                        Timezone offset:{' '}\n                    </Typography>\n                    <div className={classes.value}>\n                        {date?.getTimezoneOffset()} min ({(date?.getTimezoneOffset() ?? 0) / 60} hrs)\n                    </div>\n                </CardContent>\n                <CardActions>\n                    <CopyButton data={date?.toLocaleDateString() + ' ' + date?.toLocaleTimeString()} />\n                </CardActions>\n            </Card>\n\n            <Card className={classes.card}>\n                <CardContent>\n                    <Typography variant='subtitle1'>Js code using epoch:</Typography>\n                    <SyntaxHighlighter style={syntaxTheme} language='javascript' className={classes.formatted}>\n                        {`const date = new Date(${epochString});`}\n                    </SyntaxHighlighter>\n                </CardContent>\n                <CardActions>\n                    <CopyButton data={`const date = new Date(${epochString});`} />\n                </CardActions>\n            </Card>\n\n            <Card className={classes.card}>\n                <CardContent>\n                    <Typography variant='subtitle1'>Js code using ISO 8601:</Typography>\n                    <SyntaxHighlighter style={syntaxTheme} language='javascript' className={classes.formatted}>\n                        {`const date = new Date('${date?.toISOString()}');`}\n                    </SyntaxHighlighter>\n                </CardContent>\n                <CardActions>\n                    <CopyButton data={`const date = new Date(${epochString});`} />\n                </CardActions>\n            </Card>\n\n            <Card className={classes.card}>\n                <CardContent>\n                    <Typography variant='subtitle1'>date-fns timezone convertion example:</Typography>\n                    <SyntaxHighlighter style={syntaxTheme} language='javascript' className={classes.formatted}>\n                        {SAMPLE_DATEFNS_TZ_CONVERT.replace('#utc_value#', date?.toISOString() ?? '')}\n                    </SyntaxHighlighter>\n                </CardContent>\n                <CardActions>\n                    <CopyButton data={SAMPLE_DATEFNS_TZ_CONVERT.replace('#utc_value#', date?.toISOString() ?? '')} />\n                </CardActions>\n            </Card>\n\n            <Card className={classes.card}>\n                <CardContent>\n                    <Typography variant='subtitle1'>date-fns format example:</Typography>\n                    <SyntaxHighlighter style={syntaxTheme} language='javascript' className={classes.formatted}>\n                        {SAMPLE_DATEFNS_FORMAT.replace('#utc_value#', date?.toISOString() ?? '')}\n                    </SyntaxHighlighter>\n                </CardContent>\n                <CardActions>\n                    <CopyButton data={SAMPLE_DATEFNS_FORMAT.replace('#utc_value#', date?.toISOString() ?? '')} />\n                </CardActions>\n            </Card>\n        </>\n    );\n};\n","import {\n    Paper,\n    Table,\n    TableBody,\n    TableContainer,\n    TableHead,\n    TableRow\n} from '@material-ui/core';\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\nimport { isWidthUp } from '@material-ui/core/withWidth';\nimport React from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport CopyButton from '../../components/CopyButton';\nimport { useSyntaxHighlightTheme } from '../../hooks/useSyntaxHighlightTheme';\nimport { SAMPLE_DATEFNS_FORMAT, SAMPLE_DATEFNS_TZ_CONVERT } from './constants';\nimport { StyledTableCell, StyledTableRow, useStyles } from './styles';\n\ninterface Props {\n    date: Date | null;\n    epochString?: string;\n    width: Breakpoint;\n}\n\nexport const TableLayout: React.FC<Props> = ({ date, epochString, width }: Props) => {\n    const classes = useStyles();\n    const syntaxTheme = useSyntaxHighlightTheme();\n\n    return (\n        <TableContainer component={Paper} className={classes.panel}>\n            <Table size={isWidthUp('md', width) ? 'medium' : 'small'}>\n                <TableHead className={classes.tableHeader}>\n                    <TableRow>\n                        <StyledTableCell>Description</StyledTableCell>\n                        <StyledTableCell>Value and js code examples using date-fns library</StyledTableCell>\n                        <StyledTableCell></StyledTableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    <StyledTableRow>\n                        <StyledTableCell component='th' scope='row'>\n                            ISO string / JSON\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            <span className={classes.value}>{date?.toISOString()}</span>\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            <CopyButton data={date?.toISOString()} />\n                        </StyledTableCell>\n                    </StyledTableRow>\n                    <StyledTableRow>\n                        <StyledTableCell component='th' scope='row'>\n                            Locale date string\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            <span className={classes.value}>\n                                {date?.toLocaleDateString()} {date?.toLocaleTimeString()}\n                            </span>\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            <CopyButton data={date?.toLocaleDateString() + ' ' + date?.toLocaleTimeString()} />\n                        </StyledTableCell>\n                    </StyledTableRow>\n                    <StyledTableRow>\n                        <StyledTableCell component='th' scope='row'>\n                            Js code using epoch\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            <span className={classes.value}>const dt = new Date({epochString});</span>\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            <CopyButton data={`const dt = new Date(${epochString});`} />\n                        </StyledTableCell>\n                    </StyledTableRow>\n                    <StyledTableRow>\n                        <StyledTableCell component='th' scope='row'>\n                            Js code using ISO 8601\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            <span className={classes.value}>const dt = new Date('{date?.toISOString()}');</span>\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            <CopyButton data={`const dt = new Date(${epochString});`} />\n                        </StyledTableCell>\n                    </StyledTableRow>\n                    <StyledTableRow>\n                        <StyledTableCell component='th' scope='row'>\n                            date-fns timezone convertion example\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            <SyntaxHighlighter style={syntaxTheme} language='javascript' className={classes.formatted}>\n                                {SAMPLE_DATEFNS_TZ_CONVERT.replace('#utc_value#', date?.toISOString() ?? '')}\n                            </SyntaxHighlighter>\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            <CopyButton\n                                data={SAMPLE_DATEFNS_TZ_CONVERT.replace('#utc_value#', date?.toISOString() ?? '')}\n                            />\n                        </StyledTableCell>\n                    </StyledTableRow>\n                    <StyledTableRow>\n                        <StyledTableCell component='th' scope='row'>\n                            Timezone offset\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            {date?.getTimezoneOffset()} min ({(date?.getTimezoneOffset() ?? 0) / 60} hrs)\n                        </StyledTableCell>\n                        <StyledTableCell></StyledTableCell>\n                    </StyledTableRow>\n                    <StyledTableRow>\n                        <StyledTableCell component='th' scope='row'>\n                            date-fns format example\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            <SyntaxHighlighter style={syntaxTheme} language='javascript' className={classes.formatted}>\n                                {SAMPLE_DATEFNS_FORMAT.replace('#utc_value#', date?.toISOString() ?? '')}\n                            </SyntaxHighlighter>\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            <CopyButton\n                                data={SAMPLE_DATEFNS_FORMAT.replace('#utc_value#', date?.toISOString() ?? '')}\n                            />\n                        </StyledTableCell>\n                    </StyledTableRow>\n                    <StyledTableRow>\n                        <StyledTableCell component='th' scope='row'>\n                            UTC string\n                        </StyledTableCell>\n                        <StyledTableCell>{date?.toUTCString()}</StyledTableCell>\n                        <StyledTableCell></StyledTableCell>\n                    </StyledTableRow>\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n","import DateFnsUtils from '@date-io/date-fns';\nimport { Box, Button } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\nimport TextField from '@material-ui/core/TextField';\nimport withWidth, { isWidthDown, isWidthUp } from '@material-ui/core/withWidth';\nimport EventIcon from '@material-ui/icons/Event';\nimport TimerIcon from '@material-ui/icons/Timer';\nimport { KeyboardDatePicker, KeyboardTimePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport React, { useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { setTextAction } from '../../actions/text-actions';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport { AppState } from '../../reducers';\nimport { CardLayout } from './CardLayout';\nimport { useStyles } from './styles';\nimport { TableLayout } from './TableLayout';\n\ninterface Props {\n    width: Breakpoint;\n    inputText?: string;\n    storeInputText: (name: string, value: string) => void;\n}\n\nconst DateConverter: React.FC<Props> = (props: Props) => {\n    const title = 'Date & Epoch';\n    const classes = useStyles();\n    const { inputText, storeInputText } = props;\n    const [date, setDate] = useState<Date | null>(null);\n\n    const handleDateChange = (date: Date | null) => {\n        setDate(date);\n        storeInputText('lastEpochValue', `${date?.getTime()}`);\n    };\n\n    useEffect(() => {\n        if (inputText) {\n            setDate(new Date(+inputText));\n        }\n    }, [inputText]);\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={EventIcon} title={title} />\n\n                <form className={classes.form} noValidate>\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                        <Grid container justifyContent='space-between'>\n                            <Box display='flex' alignItems='center'>\n                                <TextField\n                                    autoFocus={isWidthUp('md', props.width)}\n                                    label='Epoch value'\n                                    placeholder='Epoch value'\n                                    type='number'\n                                    variant='outlined'\n                                    margin='normal'\n                                    value={inputText}\n                                    onChange={(e) => storeInputText('lastEpochValue', e.target.value)}\n                                />\n                                <Button\n                                    variant='contained'\n                                    title=\"Update value with 'Now' value\"\n                                    color='primary'\n                                    onClick={() => handleDateChange(new Date())}\n                                >\n                                    <TimerIcon />\n                                </Button>\n                            </Box>\n                            <div>\n                                <KeyboardDatePicker\n                                    margin='normal'\n                                    label='Date'\n                                    format='yyyy-MM-dd'\n                                    value={date}\n                                    onChange={handleDateChange}\n                                    KeyboardButtonProps={{\n                                        'aria-label': 'change date',\n                                    }}\n                                />\n                                <KeyboardTimePicker\n                                    margin='normal'\n                                    label='Time'\n                                    value={date}\n                                    onChange={handleDateChange}\n                                    KeyboardButtonProps={{\n                                        'aria-label': 'change time',\n                                    }}\n                                />\n                            </div>\n                        </Grid>\n                    </MuiPickersUtilsProvider>\n                </form>\n\n                {isWidthDown('sm', props.width) && <CardLayout date={date} epochString={inputText} />}\n\n                {isWidthUp('md', props.width) && (\n                    <TableLayout date={date} epochString={inputText} width={props.width} />\n                )}\n            </div>\n        </>\n    );\n};\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        inputText: state.textInputs['lastEpochValue'],\n    };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withWidth()(DateConverter));\n","import { usePreferenceTheme } from \"../components/Preferences/PreferencesProvider\";\nimport { docco, dark } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n\nexport const useSyntaxHighlightTheme = () => {\n  const { isDark } = usePreferenceTheme();\n\n  return isDark ? dark : docco;\n};\n"],"sourceRoot":""}