{"version":3,"sources":["containers/URLEncoder/services.ts","containers/URLEncoder/index.tsx","components/FeatureTitle/index.tsx","components/CopyButton/index.tsx","components/ResultMonospace/index.tsx"],"names":["transform","value","encoded","decodeURIComponent","encodeURIComponent","useStyles","makeStyles","theme","root","margin","spacing","toolbar","padding","marginLeft","mapStateToProps","state","inputText","textInputs","mapDispatchToProps","dispatch","storeInputText","name","setTextAction","connect","withWidth","props","title","classes","React","useState","services","transformed","setTransformed","Helmet","className","FeatureTitle","iconType","LinkOffIcon","TextField","autoFocus","isWidthUp","width","label","placeholder","multiline","minRows","maxRows","variant","fullWidth","onChange","e","target","Toolbar","Button","component","color","disabled","onClick","Box","display","flexGrow","CopyButton","data","ResultMonospace","result","wordBreak","titleWithIcon","alignItems","titleContainer","justifyContent","icon","height","marginRight","FeatureIcon","hoverMessage","feedbackMessage","Icon","AssignmentTurnedIn","setToasterState","useToasterUpdate","message","substring","copy","format","open","type","autoHideDuration","fontFamily","rows","InputProps","input"],"mappings":"sXAAO,SAASA,EAAUC,EAA2BC,GACjD,OAAKD,EAIDC,EACOC,mBAAmBF,GAEnBG,mBAAmBH,GANnB,EAQd,C,8CCWKI,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,OAAQF,EAAMG,QAAQ,IAE1BC,QAAS,CACLF,OAAQ,EACRG,QAAS,EACT,QAAS,CACLC,WAAYN,EAAMG,QAAQ,KARJ,IA8E3B,SAASI,EAAgBC,GAC5B,MAAO,CACHC,UAAWD,EAAME,WAAN,oBAElB,CAEM,SAASC,EAAmBC,GAC/B,MAAO,CACHC,eAAgB,SAACC,EAAcpB,GAAf,OAAiCkB,EAASG,YAAcD,EAAMpB,GAA9D,EAEvB,CAEcsB,sBAAQT,EAAiBI,EAAzBK,CAA6CC,eAvExB,SAACC,GACjC,IAAMC,EAAQ,wBACRC,EAAUtB,IACRW,EAA8BS,EAA9BT,UAAWI,EAAmBK,EAAnBL,eACnB,EAAsCQ,IAAMC,SAASC,EAAmBd,GAAW,IAAnF,mBAAOe,EAAP,KAAoBC,EAApB,KAOA,OACI,qCACI,cAACC,EAAA,EAAD,CAAQP,MAAOA,IACf,sBAAKQ,UAAWP,EAAQnB,KAAxB,UACI,cAAC2B,EAAA,EAAD,CAAcC,SAAUC,IAAaX,MAAOA,IAE5C,cAACY,EAAA,EAAD,CACIC,UAAWC,YAAU,KAAMf,EAAMgB,OACjCC,MAAM,2BACNC,YAAY,iCACZC,WAAS,EACTC,QAAS,EACTC,QAASN,YAAU,KAAMf,EAAMgB,OAAS,GAAK,EAC7CM,QAAQ,WACRtC,OAAO,SACPuC,WAAW,EACX/C,MAAOe,EACPiC,SAAU,SAAAC,GAAC,OAAI9B,EAAe,sBAAuB8B,EAAEC,OAAOlD,MAAnD,IAGf,eAACmD,EAAA,EAAD,CAASlB,UAAWP,EAAQhB,QAA5B,UACI,cAAC0C,EAAA,EAAD,CAAQN,QAAQ,YAAYO,UAAU,OAAOC,MAAM,UAAUC,UAAWzB,EAAa0B,QA1BxF,WACTrC,EAAe,sBAAuBW,GACtCC,EAAe,GAClB,EAuBe,SACI,cAAC,IAAD,MAEJ,cAAC0B,EAAA,EAAD,CAAKC,QAAQ,OAAOC,SAAU,IAC9B,cAACC,EAAA,EAAD,CAAYC,KAAM/B,IAClB,cAACsB,EAAA,EAAD,CACIN,QAAQ,YACRQ,MAAM,UACNC,UAAWxC,EACXyC,QAAS,kBAAMzB,EAAeF,EAAmBd,GAAW,GAAnD,EAJb,SAKI,cAAC,IAAD,MAEJ,cAACqC,EAAA,EAAD,CACIN,QAAQ,YACRQ,MAAM,UACNC,UAAWxC,EACXyC,QAAS,kBAAMzB,EAAeF,EAAmBd,GAAW,GAAnD,EAJb,SAKI,cAAC,IAAD,SAIR,cAAC+C,EAAA,EAAD,CAAiBrB,MAAM,SAASsB,OAAQjC,SAIvD,I,mCCjGD,mCAIM1B,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCmB,MAAO,CACHuC,UAAW,cAEfC,cAAe,CACXP,QAAS,OACTQ,WAAY,UAEhBC,eAAgB,CACZT,QAAS,OACTU,eAAgB,UAEpBC,KAAM,CACFC,OAAQ,OACR9B,MAAO,OACP+B,YAAajE,EAAMG,QAAQ,IAfD,IAwCnByB,IAhBuB,SAACV,GACnC,IAAME,EAAUtB,IACVoE,EAAchD,EAAMW,SAE1B,OACI,qBAAKF,UAAWP,EAAQyC,eAAxB,SACI,sBAAKlC,UAAWP,EAAQuC,cAAxB,UACI,cAACO,EAAD,CAAavC,UAAWP,EAAQ2C,OAChC,cAAC,IAAD,CAAYvB,QAAQ,KAAKb,UAAWP,EAAQD,MAA5C,SACKD,EAAMC,YAK1B,C,mCC1CD,uEAwCemC,IA1BqB,SAAC,GAA+E,IAA7EC,EAA4E,EAA5EA,KAAMY,EAAsE,EAAtEA,aAAcC,EAAwD,EAAxDA,gBAAwD,IAAvCC,YAAuC,MAAhCC,IAAgC,EACvGC,EAAoBC,cAApBD,gBAaR,OACI,cAAC,IAAD,CACIrB,QAbW,WACf,GAAKK,EAAL,CAIA,IAAMkB,EAAO,OAAGL,QAAH,IAAGA,IAAH,yCAAwDb,EAAKmB,UAAU,EAAG,IAA1E,WAEbC,IAAapB,EAAM,CAAEqB,OAAQ,eAC7BL,EAAgB,CAAEM,MAAM,EAAMJ,UAASK,KAAM,UAAWC,iBAAkB,KALzE,CAMJ,EAKO9B,UAAWM,EACXpC,MAAK,OAAEgD,QAAF,IAAEA,IAAgB,oBACvB3B,QAAQ,YACRQ,MAAM,UALV,SAMI,cAACqB,EAAD,KAGX,C,mCCtCD,oCAIMvE,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCyD,OAAQ,CACJuB,WAAY,YACZhB,OAAQ,QAHkB,IAoCnBR,IAtBgB,SAAC,GAAuD,IAArDrB,EAAoD,EAApDA,MAAOsB,EAA6C,EAA7CA,OAA6C,IAArCwB,YAAqC,MAA9B,GAA8B,MAA1B1C,eAA0B,MAAhB,GAAgB,EAC5EnB,EAAUtB,IAEhB,OACI,cAAC,IAAD,CACIuC,WAAS,EACTC,QAAS2C,EACT1C,QAASA,EACTJ,MAAOA,EACPK,QAAQ,WACRtC,OAAO,SACPuC,WAAW,EACX/C,MAAO+D,EACPyB,WAAY,CACR9D,QAAS,CACL+D,MAAO/D,EAAQqC,UAKlC,C","file":"static/js/33.2e74eae1.chunk.js","sourcesContent":["export function transform(value: string | undefined, encoded: boolean): string {\n    if (!value) {\n        return '';\n    }\n\n    if (encoded) {\n        return decodeURIComponent(value);\n    } else {\n        return encodeURIComponent(value);\n    }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport { Box, Toolbar } from '@material-ui/core';\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinkIcon from '@material-ui/icons/Link';\nimport LinkOffIcon from '@material-ui/icons/LinkOff';\nimport TextField from '@material-ui/core/TextField';\nimport ImportExportIcon from '@material-ui/icons/ImportExport';\nimport { setTextAction } from '../../actions/text-actions';\nimport { AppState } from '../../reducers';\nimport * as services from './services';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport CopyButton from '../../components/CopyButton';\nimport { Helmet } from 'react-helmet';\nimport ResultMonospace from '../../components/ResultMonospace';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    toolbar: {\n        margin: 0,\n        padding: 0,\n        '& > *': {\n            marginLeft: theme.spacing(1),\n        },\n    },\n}));\n\ninterface Props {\n    width: Breakpoint;\n    inputText?: string;\n    storeInputText: (name: string, value: string) => void;\n}\n\nconst URLEncoder: React.FC<Props> = (props: Props) => {\n    const title = 'URL Encoder / decoder';\n    const classes = useStyles();\n    const { inputText, storeInputText } = props;\n    const [transformed, setTransformed] = React.useState(services.transform(inputText, false));\n\n    const flip = () => {\n        storeInputText('lastUrlEncoderValue', transformed);\n        setTransformed('');\n    };\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={LinkOffIcon} title={title} />\n\n                <TextField\n                    autoFocus={isWidthUp('md', props.width)}\n                    label=\"Content to encode/decode\"\n                    placeholder=\"Paste or type the content here\"\n                    multiline\n                    minRows={4}\n                    maxRows={isWidthUp('md', props.width) ? 20 : 4}\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    fullWidth={true}\n                    value={inputText}\n                    onChange={e => storeInputText('lastUrlEncoderValue', e.target.value)}\n                />\n\n                <Toolbar className={classes.toolbar}>\n                    <Button variant=\"contained\" component=\"span\" color=\"primary\" disabled={!transformed} onClick={flip}>\n                        <ImportExportIcon />\n                    </Button>\n                    <Box display=\"flex\" flexGrow={1}></Box>\n                    <CopyButton data={transformed} />\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={!inputText}\n                        onClick={() => setTransformed(services.transform(inputText, false))}>\n                        <LinkIcon />\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={!inputText}\n                        onClick={() => setTransformed(services.transform(inputText, true))}>\n                        <LinkOffIcon />\n                    </Button>\n                </Toolbar>\n\n                <ResultMonospace label=\"Result\" result={transformed} />\n            </div>\n        </>\n    );\n};\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        inputText: state.textInputs['lastUrlEncoderValue'],\n    };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withWidth()(URLEncoder));\n","import { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        wordBreak: 'break-word',\n    },\n    titleWithIcon: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    titleContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    icon: {\n        height: '40px',\n        width: '40px',\n        marginRight: theme.spacing(1),\n    },\n}));\n\ninterface Props {\n    title: string;\n    iconType: any;\n}\n\nconst FeatureTitle: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const FeatureIcon = props.iconType;\n\n    return (\n        <div className={classes.titleContainer}>\n            <div className={classes.titleWithIcon}>\n                <FeatureIcon className={classes.icon} />\n                <Typography variant=\"h5\" className={classes.title}>\n                    {props.title}\n                </Typography>\n            </div>\n        </div>\n    );\n};\n\nexport default FeatureTitle;\n","import { Button, SvgIconTypeMap } from '@material-ui/core';\nimport { OverridableComponent } from '@material-ui/core/OverridableComponent';\nimport AssignmentTurnedIn from '@material-ui/icons/AssignmentTurnedIn';\nimport * as copy from 'copy-to-clipboard';\nimport React from 'react';\nimport { useToasterUpdate } from '../Toaster/ToasterProvider';\n\ninterface Props {\n    data?: string;\n    hoverMessage?: string;\n    feedbackMessage?: string;\n    Icon?: OverridableComponent<SvgIconTypeMap<unknown, 'svg'>>;\n}\n\nconst CopyButton: React.FC<Props> = ({ data, hoverMessage, feedbackMessage, Icon = AssignmentTurnedIn }: Props) => {\n    const { setToasterState } = useToasterUpdate();\n\n    const handleCopy = () => {\n        if (!data) {\n            return;\n        }\n\n        const message = feedbackMessage ?? `Content copied into clipboard: ${data.substring(0, 25)} …`;\n\n        copy.default(data, { format: 'text/plain' });\n        setToasterState({ open: true, message, type: 'success', autoHideDuration: 2000 });\n    };\n\n    return (\n        <Button\n            onClick={handleCopy}\n            disabled={!data}\n            title={hoverMessage ?? 'Copy to clipboard'}\n            variant=\"contained\"\n            color=\"primary\">\n            <Icon />\n        </Button>\n    );\n};\n\nexport default CopyButton;\n","import { TextField } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\n\nconst useStyles = makeStyles(theme => ({\n    result: {\n        fontFamily: 'monospace',\n        height: 'auto',\n    },\n}));\n\ninterface Props {\n    label?: string;\n    result?: string;\n    rows?: number;\n    maxRows?: number;\n}\n\nexport const ResultMonospace = ({ label, result, rows = 10, maxRows = 15 }: Props) => {\n    const classes = useStyles();\n\n    return (\n        <TextField\n            multiline\n            minRows={rows}\n            maxRows={maxRows}\n            label={label}\n            variant=\"outlined\"\n            margin=\"normal\"\n            fullWidth={true}\n            value={result}\n            InputProps={{\n                classes: {\n                    input: classes.result,\n                },\n            }}\n        />\n    );\n};\n\nexport default ResultMonospace;\n"],"sourceRoot":""}