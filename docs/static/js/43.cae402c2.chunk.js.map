{"version":3,"sources":["containers/URLEncoder/services.ts","containers/URLEncoder/index.tsx"],"names":["transform","value","encoded","decodeURIComponent","encodeURIComponent","useStyles","makeStyles","theme","root","margin","spacing","toolbar","padding","mapStateToProps","state","inputText","textInputs","mapDispatchToProps","dispatch","storeInputText","name","setTextAction","connect","props","title","classes","isMdUp","useIsWidthUp","React","useState","services","transformed","setTransformed","Helmet","className","FeatureTitle","iconType","DecodeIcon","TextField","autoFocus","label","placeholder","multiline","minRows","maxRows","variant","fullWidth","onChange","e","newContent","target","Toolbar","Button","component","color","disabled","onClick","Box","display","flexGrow","CopyButton","data","sx","mr","endIcon","ResultMonospace","testID","result"],"mappings":"2ZAAO,SAASA,EAAUC,EAA2BC,GACnD,OAAKD,EAIDC,EACKC,mBAAmBF,GAEnBG,mBAAmBH,GANnB,EAQX,CCUA,IAAMI,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,OAAQF,EAAMG,QAAQ,IAExBC,QAAS,CACPF,OAAQ,EACRG,QAAS,GAEZ,IAuFM,SAASC,EAAgBC,GAC9B,MAAO,CACLC,UAAWD,EAAME,WAAgC,oBAErD,CAEO,SAASC,EAAmBC,GACjC,MAAO,CACLC,eAAgB,SAACC,EAAcnB,GAAa,OAAKiB,EAASG,YAAcD,EAAMnB,GAAO,EAEzF,CAEeqB,sBAAQT,EAAiBI,EAAzBK,EA5FqB,SAACC,GACnC,IAAMC,EAAQ,wBACRC,EAAUpB,IACVqB,EAASC,YAAa,MACpBZ,EAA8BQ,EAA9BR,UAAWI,EAAmBI,EAAnBJ,eACnB,EAAsCS,IAAMC,SAASC,EAAmBf,GAAW,IAAO,mBAAnFgB,EAAW,KAAEC,EAAc,KAelC,OACE,oCACE,kBAACC,EAAA,EAAM,CAACT,MAAOA,IACf,yBAAKU,UAAWT,EAAQjB,MACtB,kBAAC2B,EAAA,EAAY,CAACC,SAAUC,IAAYb,MAAOA,IAE3C,kBAACc,EAAA,EAAS,CACRC,UAAWb,EACXc,MAAM,2BACNC,YAAY,iCACZC,WAAS,EACTC,QAAS,EACTC,QAASlB,EAAS,GAAK,EACvBmB,QAAQ,WACRpC,OAAO,SACPqC,WAAW,EACX7C,MAAOc,EACPgC,SAzBiB,SAACC,GACxB,IAAMC,EAAaD,EAAEE,OAAOjD,MAC5BkB,EAAe,sBAAuB8B,GACjCA,GACHjB,EAAe,GAEnB,IAsBM,kBAACmB,EAAA,EAAO,CAACjB,UAAWT,EAAQd,SAC1B,kBAACyC,EAAA,EAAM,CACLP,QAAQ,YACR,cAAY,wBACZQ,UAAU,OACVC,MAAM,UACNC,UAAWxB,EACXyB,QAxCG,WACXrC,EAAe,sBAAuBY,GACtCC,EAAe,GACjB,EAsCUR,MAAM,uBACN,kBAAC,IAAiB,OAEpB,kBAACiC,EAAA,EAAG,CAACC,QAAQ,OAAOC,SAAU,IAC9B,kBAACC,EAAA,EAAU,CAACC,KAAM9B,EAAa+B,GAAI,CAAEC,GAAI,KACzC,kBAACX,EAAA,EAAM,CACLU,GAAI,CAAEC,GAAI,GACVlB,QAAQ,YACRmB,QAAS,kBAAC,IAAU,MACpBxC,MAAM,qBACN8B,MAAM,UACNC,UAAWxC,EACXyC,QAAS,kBAAMxB,EAAeF,EAAmBf,GAAW,GAAO,GAAC,QAGtE,kBAACqC,EAAA,EAAM,CACLP,QAAQ,YACRmB,QAAS,kBAAC,IAAU,MACpBxC,MAAM,qBACN8B,MAAM,UACNC,UAAWxC,EACXyC,QAAS,kBAAMxB,EAAeF,EAAmBf,GAAW,GAAM,GAAC,SAKvE,kBAACkD,EAAA,EAAe,CAACC,OAAO,gBAAgB1B,MAAM,SAAS2B,OAAQpC,KAIvE,G","file":"static/js/43.cae402c2.chunk.js","sourcesContent":["export function transform(value: string | undefined, encoded: boolean): string {\n  if (!value) {\n    return '';\n  }\n\n  if (encoded) {\n    return decodeURIComponent(value);\n  } else {\n    return encodeURIComponent(value);\n  }\n}\n","import React from 'react';\n\nimport EncodeIcon from '@mui/icons-material/Code';\nimport DecodeIcon from '@mui/icons-material/CodeOff';\nimport SwitchContentIcon from '@mui/icons-material/ImportExport';\nimport { Box, Toolbar } from '@mui/material';\nimport { Button, TextField } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport { setTextAction } from '../../actions/text-actions';\nimport CopyButton from '../../components/CopyButton';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport ResultMonospace from '../../components/ResultMonospace';\nimport { AppState } from '../../reducers';\nimport { useIsWidthUp } from '../../theme';\nimport * as services from './services';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing(1),\n  },\n  toolbar: {\n    margin: 0,\n    padding: 0,\n  },\n}));\n\ninterface Props {\n  inputText?: string;\n  storeInputText: (name: string, value: string) => void;\n}\n\nconst URLEncoder: React.FC<Props> = (props: Props) => {\n  const title = 'URL Encoder / decoder';\n  const classes = useStyles();\n  const isMdUp = useIsWidthUp('md');\n  const { inputText, storeInputText } = props;\n  const [transformed, setTransformed] = React.useState(services.transform(inputText, false));\n\n  const flip = () => {\n    storeInputText('lastUrlEncoderValue', transformed);\n    setTransformed('');\n  };\n\n  const onContentChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newContent = e.target.value;\n    storeInputText('lastUrlEncoderValue', newContent);\n    if (!newContent) {\n      setTransformed('');\n    }\n  };\n\n  return (\n    <>\n      <Helmet title={title} />\n      <div className={classes.root}>\n        <FeatureTitle iconType={DecodeIcon} title={title} />\n\n        <TextField\n          autoFocus={isMdUp}\n          label=\"Content to encode/decode\"\n          placeholder=\"Paste or type the content here\"\n          multiline\n          minRows={4}\n          maxRows={isMdUp ? 20 : 4}\n          variant=\"outlined\"\n          margin=\"normal\"\n          fullWidth={true}\n          value={inputText}\n          onChange={onContentChanged}\n        />\n\n        <Toolbar className={classes.toolbar}>\n          <Button\n            variant=\"contained\"\n            data-testid=\"switch-content-action\"\n            component=\"span\"\n            color=\"primary\"\n            disabled={!transformed}\n            onClick={flip}\n            title=\"Switch data content\">\n            <SwitchContentIcon />\n          </Button>\n          <Box display=\"flex\" flexGrow={1}></Box>\n          <CopyButton data={transformed} sx={{ mr: 1 }} />\n          <Button\n            sx={{ mr: 1 }}\n            variant=\"contained\"\n            endIcon={<EncodeIcon />}\n            title=\"Encode the content\"\n            color=\"primary\"\n            disabled={!inputText}\n            onClick={() => setTransformed(services.transform(inputText, false))}>\n            Enc.\n          </Button>\n          <Button\n            variant=\"contained\"\n            endIcon={<DecodeIcon />}\n            title=\"Decode the content\"\n            color=\"primary\"\n            disabled={!inputText}\n            onClick={() => setTransformed(services.transform(inputText, true))}>\n            Dec.\n          </Button>\n        </Toolbar>\n\n        <ResultMonospace testID=\"parsed-result\" label=\"Result\" result={transformed} />\n      </div>\n    </>\n  );\n};\n\nexport function mapStateToProps(state: AppState) {\n  return {\n    inputText: state.textInputs['lastUrlEncoderValue'],\n  };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(URLEncoder);\n"],"sourceRoot":""}