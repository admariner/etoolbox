{"version":3,"sources":["containers/QRCodeGenerator/services.ts","containers/QRCodeGenerator/index.tsx","components/FeatureTitle/index.tsx","components/CopyButton/index.tsx"],"names":["DEFAULT_OPTIONS","errorCorrectionLevel","type","width","quality","margin","color","dark","light","useStyles","makeStyles","theme","root","spacing","toolbar","padding","marginLeft","qrOptions","fontFamily","generatedQR","mapStateToProps","state","inputText","textInputs","inputOptions","mapDispatchToProps","dispatch","storeInputText","name","value","setTextAction","connect","withWidth","props","title","classes","React","useState","imgDataURL","setImgDataURL","Helmet","className","FeatureTitle","iconType","SelectAllIcon","noValidate","autoComplete","Grid","container","item","md","sm","xs","TextField","autoFocus","isWidthUp","label","placeholder","multiline","minRows","maxRows","variant","fullWidth","onChange","e","target","InputProps","input","helperText","Link","rel","href","Toolbar","Box","display","flexGrow","CopyButton","data","Button","onClick","opts","JSON","parse","services","QRCode","toDataURL","err","url","stringify","disabled","endIcon","Card","alignItems","justifyContent","src","alt","CardContent","wordBreak","titleWithIcon","titleContainer","icon","height","marginRight","FeatureIcon","hoverMessage","feedbackMessage","Icon","AssignmentTurnedIn","setToasterState","useToasterUpdate","message","substring","copy","format","open","autoHideDuration"],"mappings":"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","file":"static/js/39.51782709.chunk.js","sourcesContent":["export const DEFAULT_OPTIONS = {\n    errorCorrectionLevel: 'H',\n    type: 'image/png',\n    width: 200,\n    quality: 0.3,\n    margin: 1,\n    color: {\n        dark: '#000000FF',\n        light: '#FFFFFFFF',\n    },\n};\n","import { Box, Button, Card, CardContent, Grid, Link, TextField, Toolbar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\nimport SelectAllIcon from '@material-ui/icons/SelectAll';\nimport QRCode from 'qrcode';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { setTextAction } from '../../actions/text-actions';\nimport CopyButton from '../../components/CopyButton';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport { AppState } from '../../reducers';\nimport * as services from './services';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    toolbar: {\n        margin: 0,\n        padding: 0,\n        '& > *': {\n            marginLeft: theme.spacing(1),\n        },\n    },\n    qrOptions: {\n        fontFamily: 'monospace',\n    },\n    generatedQR: {\n        padding: theme.spacing(2),\n    },\n}));\n\ninterface Props {\n    width: Breakpoint;\n    inputText?: string;\n    inputOptions?: string;\n    storeInputText: (name: string, value: string) => void;\n}\n\nconst QRCodeGenerator: React.FC<Props> = (props: Props) => {\n    const title = 'QR Code generator';\n    const classes = useStyles();\n    const { inputText, inputOptions, storeInputText } = props;\n    const [imgDataURL, setImgDataURL] = React.useState('');\n\n    function generate() {\n        if (!inputText) {\n            return;\n        }\n\n        const opts = inputOptions ? JSON.parse(inputOptions) : services.DEFAULT_OPTIONS;\n        QRCode.toDataURL(inputText, opts, (err, url) => {\n            if (err) {\n                throw err;\n            }\n\n            setImgDataURL(url);\n            storeInputText('lastQRCodeOptions', JSON.stringify(opts, null, 2));\n        });\n    }\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={SelectAllIcon} title={title} />\n\n                <form noValidate autoComplete=\"off\">\n                    <Grid container spacing={1}>\n                        <Grid item md={6} sm={12} xs={12}>\n                            <TextField\n                                autoFocus={isWidthUp('md', props.width)}\n                                label=\"Text to store into QR Code\"\n                                placeholder=\"Paste or type the content here\"\n                                multiline\n                                minRows={12}\n                                maxRows={isWidthUp('md', props.width) ? 20 : 12}\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                fullWidth={true}\n                                value={inputText}\n                                onChange={e => storeInputText('lastQRCodeTextValue', e.target.value)}\n                            />\n                        </Grid>\n                        <Grid item md={6} sm={12} xs={12}>\n                            <TextField\n                                label=\"QR Code generation options\"\n                                multiline\n                                minRows={12}\n                                maxRows={isWidthUp('md', props.width) ? 20 : 12}\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                fullWidth={true}\n                                InputProps={{\n                                    classes: {\n                                        input: classes.qrOptions,\n                                    },\n                                }}\n                                value={inputOptions}\n                                onChange={e => storeInputText('lastQRCodeOptions', e.target.value)}\n                                helperText={\n                                    <Link\n                                        target=\"_blank\"\n                                        rel=\"noreferrer\"\n                                        href=\"https://www.npmjs.com/package/qrcode#qr-code-options\">\n                                        Options documentation available here!\n                                    </Link>\n                                }\n                            />\n                        </Grid>\n                    </Grid>\n                </form>\n\n                <Toolbar className={classes.toolbar}>\n                    <Box display=\"flex\" flexGrow={1}></Box>\n                    <CopyButton data={imgDataURL} />\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={generate}\n                        disabled={!inputText}\n                        endIcon={<SelectAllIcon />}>\n                        Generate\n                    </Button>\n                </Toolbar>\n\n                {imgDataURL && (\n                    <Card className={classes.generatedQR}>\n                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                            <img src={imgDataURL} alt=\"QR Code\" />\n                        </Box>\n                        <CardContent>\n                            <TextField\n                                label=\"Full img tag\"\n                                fullWidth\n                                value={`<img alt=\"QR Code\" src=\"${imgDataURL}\"/>`}\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                            />\n                            <TextField\n                                label=\"QR Code. Copy-paste into 'src' attribute\"\n                                fullWidth\n                                value={imgDataURL}\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                multiline\n                                minRows=\"8\"\n                            />\n                        </CardContent>\n                    </Card>\n                )}\n            </div>\n        </>\n    );\n};\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        inputText: state.textInputs['lastQRCodeTextValue'],\n        inputOptions: state.textInputs['lastQRCodeOptions'],\n    };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withWidth()(QRCodeGenerator));\n","import { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        wordBreak: 'break-word',\n    },\n    titleWithIcon: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    titleContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    icon: {\n        height: '40px',\n        width: '40px',\n        marginRight: theme.spacing(1),\n    },\n}));\n\ninterface Props {\n    title: string;\n    iconType: any;\n}\n\nconst FeatureTitle: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const FeatureIcon = props.iconType;\n\n    return (\n        <div className={classes.titleContainer}>\n            <div className={classes.titleWithIcon}>\n                <FeatureIcon className={classes.icon} />\n                <Typography variant=\"h5\" className={classes.title}>\n                    {props.title}\n                </Typography>\n            </div>\n        </div>\n    );\n};\n\nexport default FeatureTitle;\n","import { Button, SvgIconTypeMap } from '@material-ui/core';\nimport { OverridableComponent } from '@material-ui/core/OverridableComponent';\nimport AssignmentTurnedIn from '@material-ui/icons/AssignmentTurnedIn';\nimport * as copy from 'copy-to-clipboard';\nimport React from 'react';\nimport { useToasterUpdate } from '../Toaster/ToasterProvider';\n\ninterface Props {\n    data?: string;\n    hoverMessage?: string;\n    feedbackMessage?: string;\n    Icon?: OverridableComponent<SvgIconTypeMap<unknown, 'svg'>>;\n}\n\nconst CopyButton: React.FC<Props> = ({ data, hoverMessage, feedbackMessage, Icon = AssignmentTurnedIn }: Props) => {\n    const { setToasterState } = useToasterUpdate();\n\n    const handleCopy = () => {\n        if (!data) {\n            return;\n        }\n\n        const message = feedbackMessage ?? `Content copied into clipboard: ${data.substring(0, 25)} …`;\n\n        copy.default(data, { format: 'text/plain' });\n        setToasterState({ open: true, message, type: 'success', autoHideDuration: 2000 });\n    };\n\n    return (\n        <Button\n            onClick={handleCopy}\n            disabled={!data}\n            title={hoverMessage ?? 'Copy to clipboard'}\n            variant=\"contained\"\n            color=\"primary\">\n            <Icon />\n        </Button>\n    );\n};\n\nexport default CopyButton;\n"],"sourceRoot":""}