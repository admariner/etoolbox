{"version":3,"sources":["containers/DateConverter/constants.ts","containers/DateConverter/styles.ts","containers/DateConverter/CardLayout.tsx","containers/DateConverter/TableLayout.tsx","containers/DateConverter/index.tsx","components/FeatureTitle/index.tsx","components/CopyButton/index.tsx","hooks/useSyntaxHighlightTheme.ts"],"names":["SAMPLE_DATEFNS_TZ_CONVERT","SAMPLE_DATEFNS_FORMAT","StyledTableCell","withStyles","theme","body","fontSize","spacing","whiteSpace","wordBreak","TableCell","StyledTableRow","root","backgroundColor","palette","action","hover","TableRow","useStyles","makeStyles","margin","panel","marginTop","marginBottom","form","display","flexWrap","formControl","marginRight","value","fontFamily","marginLeft","tableHeader","primary","main","timePickerField","width","formatted","overflow","padding","card","otherSubtitle","CardLayout","date","epochString","classes","syntaxTheme","useSyntaxHighlightTheme","Card","className","CardContent","Typography","variant","toISOString","CardActions","CopyButton","data","toLocaleDateString","toLocaleTimeString","getTimezoneOffset","style","language","replace","TableLayout","isMdUp","useIsWidthUp","TableContainer","component","Paper","Table","size","TableHead","TableBody","scope","toUTCString","mapStateToProps","state","inputText","textInputs","mapDispatchToProps","dispatch","storeInputText","name","setTextAction","connect","props","title","useState","setDate","isSmDown","useIsWidthDown","handleDateChange","getTime","useEffect","Date","Helmet","FeatureTitle","iconType","EventIcon","noValidate","Grid","container","justifyContent","Box","alignItems","FormControl","TextField","autoFocus","label","placeholder","type","onChange","e","target","Button","color","onClick","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","inputFormat","renderInput","TimePicker","titleWithIcon","titleContainer","icon","height","FeatureIcon","isDisabled","hoverMessage","feedbackMessage","Icon","AssignmentTurnedIn","others","setToasterState","useToasterUpdate","message","substring","copy","format","open","autoHideDuration","disabled","usePreferenceTheme","isDark","dark","docco"],"mappings":"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","file":"static/js/35.c097f779.chunk.js","sourcesContent":["export const SAMPLE_DATEFNS_TZ_CONVERT = `import { utcToZonedTime } from 'date-fns-tz';\n\n// Obtain a Date instance that will render the\n// equivalent Berlin time for the UTC date\nconst utcValue = '#utc_value#';\nconst date = new Date(utcValue);\nconst timezone = 'Europe/Berlin';\nconst result = utcToZonedTime(date, timezone);`;\n\nexport const SAMPLE_DATEFNS_FORMAT = `import { format } from \"date-fns\";\n\nconst utcValue = '#utc_value#';\nconst date = new Date(utcValue);\nconst format = 'yyyy-MM-dd-HH-mm-ss';\nconst formattedDate = format(date, format);`;\n","import { TableCell, TableRow } from '@mui/material';\nimport { makeStyles, withStyles } from '@mui/styles';\n\nexport const StyledTableCell = withStyles(theme => ({\n    body: {\n        fontSize: theme.spacing(1.75),\n        whiteSpace: 'normal',\n        wordBreak: 'break-word',\n    },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles(theme => ({\n    root: {\n        '&:nth-of-type(even)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\nexport const useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    panel: {\n        marginTop: theme.spacing(3),\n        marginBottom: theme.spacing(3),\n    },\n    form: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        marginTop: theme.spacing(3),\n    },\n    formControl: {\n        marginRight: theme.spacing(1),\n    },\n    value: {\n        fontFamily: 'monospace',\n        marginTop: theme.spacing(1),\n        marginLeft: theme.spacing(1),\n    },\n    tableHeader: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    timePickerField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: 260,\n    },\n    formatted: {\n        width: '100%',\n        overflow: 'auto',\n        padding: 0,\n        margin: 0,\n    },\n    card: {\n        marginBottom: theme.spacing(1),\n    },\n    otherSubtitle: {\n        marginTop: theme.spacing(1),\n    },\n}));\n","import { Card, CardActions, CardContent, Typography } from '@mui/material';\nimport React from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport CopyButton from '../../components/CopyButton';\nimport { useSyntaxHighlightTheme } from '../../hooks/useSyntaxHighlightTheme';\nimport { SAMPLE_DATEFNS_FORMAT, SAMPLE_DATEFNS_TZ_CONVERT } from './constants';\nimport { useStyles } from './styles';\n\ninterface Props {\n    date: Date | null;\n    epochString?: string;\n}\n\nexport const CardLayout: React.FC<Props> = ({ date, epochString }: Props) => {\n    const classes = useStyles();\n    const syntaxTheme = useSyntaxHighlightTheme();\n\n    return (\n        <>\n            <Card className={classes.card}>\n                <CardContent>\n                    <Typography variant=\"subtitle1\">ISO string / JSON</Typography>\n                    <span className={classes.value}>{date?.toISOString()}</span>\n                </CardContent>\n                <CardActions>\n                    <CopyButton data={date?.toISOString()} />\n                </CardActions>\n            </Card>\n\n            <Card className={classes.card}>\n                <CardContent>\n                    <Typography variant=\"subtitle1\">Locale date string</Typography>\n                    <div className={classes.value}>\n                        {date?.toLocaleDateString()} {date?.toLocaleTimeString()}\n                    </div>\n                    <Typography variant=\"subtitle1\" className={classes.otherSubtitle}>\n                        Timezone offset:{' '}\n                    </Typography>\n                    <div className={classes.value}>\n                        {date?.getTimezoneOffset()} min ({(date?.getTimezoneOffset() ?? 0) / 60} hrs)\n                    </div>\n                </CardContent>\n                <CardActions>\n                    <CopyButton data={date?.toLocaleDateString() + ' ' + date?.toLocaleTimeString()} />\n                </CardActions>\n            </Card>\n\n            <Card className={classes.card}>\n                <CardContent>\n                    <Typography variant=\"subtitle1\">Js code using epoch:</Typography>\n                    <SyntaxHighlighter style={syntaxTheme} language=\"javascript\" className={classes.formatted}>\n                        {`const date = new Date(${epochString});`}\n                    </SyntaxHighlighter>\n                </CardContent>\n                <CardActions>\n                    <CopyButton data={`const date = new Date(${epochString});`} />\n                </CardActions>\n            </Card>\n\n            <Card className={classes.card}>\n                <CardContent>\n                    <Typography variant=\"subtitle1\">Js code using ISO 8601:</Typography>\n                    <SyntaxHighlighter style={syntaxTheme} language=\"javascript\" className={classes.formatted}>\n                        {`const date = new Date('${date?.toISOString()}');`}\n                    </SyntaxHighlighter>\n                </CardContent>\n                <CardActions>\n                    <CopyButton data={`const date = new Date(${epochString});`} />\n                </CardActions>\n            </Card>\n\n            <Card className={classes.card}>\n                <CardContent>\n                    <Typography variant=\"subtitle1\">date-fns timezone convertion example:</Typography>\n                    <SyntaxHighlighter style={syntaxTheme} language=\"javascript\" className={classes.formatted}>\n                        {SAMPLE_DATEFNS_TZ_CONVERT.replace('#utc_value#', date?.toISOString() ?? '')}\n                    </SyntaxHighlighter>\n                </CardContent>\n                <CardActions>\n                    <CopyButton data={SAMPLE_DATEFNS_TZ_CONVERT.replace('#utc_value#', date?.toISOString() ?? '')} />\n                </CardActions>\n            </Card>\n\n            <Card className={classes.card}>\n                <CardContent>\n                    <Typography variant=\"subtitle1\">date-fns format example:</Typography>\n                    <SyntaxHighlighter style={syntaxTheme} language=\"javascript\" className={classes.formatted}>\n                        {SAMPLE_DATEFNS_FORMAT.replace('#utc_value#', date?.toISOString() ?? '')}\n                    </SyntaxHighlighter>\n                </CardContent>\n                <CardActions>\n                    <CopyButton data={SAMPLE_DATEFNS_FORMAT.replace('#utc_value#', date?.toISOString() ?? '')} />\n                </CardActions>\n            </Card>\n        </>\n    );\n};\n","import { Paper, Table, TableBody, TableContainer, TableHead, TableRow } from '@mui/material';\nimport React from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport CopyButton from '../../components/CopyButton';\nimport { useSyntaxHighlightTheme } from '../../hooks/useSyntaxHighlightTheme';\nimport { useIsWidthUp } from '../../theme';\nimport { SAMPLE_DATEFNS_FORMAT, SAMPLE_DATEFNS_TZ_CONVERT } from './constants';\nimport { StyledTableCell, StyledTableRow, useStyles } from './styles';\n\ninterface Props {\n    date: Date | null;\n    epochString?: string;\n}\n\nexport const TableLayout: React.FC<Props> = ({ date, epochString }: Props) => {\n    const classes = useStyles();\n    const syntaxTheme = useSyntaxHighlightTheme();\n    const isMdUp = useIsWidthUp('md');\n\n    return (\n        <TableContainer component={Paper} className={classes.panel}>\n            <Table size={isMdUp ? 'medium' : 'small'}>\n                <TableHead className={classes.tableHeader}>\n                    <TableRow>\n                        <StyledTableCell>Description</StyledTableCell>\n                        <StyledTableCell>Value and js code examples using date-fns library</StyledTableCell>\n                        <StyledTableCell></StyledTableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    <StyledTableRow>\n                        <StyledTableCell component=\"th\" scope=\"row\">\n                            ISO string / JSON\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            <span className={classes.value}>{date?.toISOString()}</span>\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            <CopyButton data={date?.toISOString()} />\n                        </StyledTableCell>\n                    </StyledTableRow>\n                    <StyledTableRow>\n                        <StyledTableCell component=\"th\" scope=\"row\">\n                            Locale date string\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            <span className={classes.value}>\n                                {date?.toLocaleDateString()} {date?.toLocaleTimeString()}\n                            </span>\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            <CopyButton data={date?.toLocaleDateString() + ' ' + date?.toLocaleTimeString()} />\n                        </StyledTableCell>\n                    </StyledTableRow>\n                    <StyledTableRow>\n                        <StyledTableCell component=\"th\" scope=\"row\">\n                            Js code using epoch\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            <span className={classes.value}>const dt = new Date({epochString});</span>\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            <CopyButton data={`const dt = new Date(${epochString});`} />\n                        </StyledTableCell>\n                    </StyledTableRow>\n                    <StyledTableRow>\n                        <StyledTableCell component=\"th\" scope=\"row\">\n                            Js code using ISO 8601\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            <span className={classes.value}>const dt = new Date('{date?.toISOString()}');</span>\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            <CopyButton data={`const dt = new Date(${epochString});`} />\n                        </StyledTableCell>\n                    </StyledTableRow>\n                    <StyledTableRow>\n                        <StyledTableCell component=\"th\" scope=\"row\">\n                            date-fns timezone convertion example\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            <SyntaxHighlighter style={syntaxTheme} language=\"javascript\" className={classes.formatted}>\n                                {SAMPLE_DATEFNS_TZ_CONVERT.replace('#utc_value#', date?.toISOString() ?? '')}\n                            </SyntaxHighlighter>\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            <CopyButton\n                                data={SAMPLE_DATEFNS_TZ_CONVERT.replace('#utc_value#', date?.toISOString() ?? '')}\n                            />\n                        </StyledTableCell>\n                    </StyledTableRow>\n                    <StyledTableRow>\n                        <StyledTableCell component=\"th\" scope=\"row\">\n                            Timezone offset\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            {date?.getTimezoneOffset()} min ({(date?.getTimezoneOffset() ?? 0) / 60} hrs)\n                        </StyledTableCell>\n                        <StyledTableCell></StyledTableCell>\n                    </StyledTableRow>\n                    <StyledTableRow>\n                        <StyledTableCell component=\"th\" scope=\"row\">\n                            date-fns format example\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            <SyntaxHighlighter style={syntaxTheme} language=\"javascript\" className={classes.formatted}>\n                                {SAMPLE_DATEFNS_FORMAT.replace('#utc_value#', date?.toISOString() ?? '')}\n                            </SyntaxHighlighter>\n                        </StyledTableCell>\n                        <StyledTableCell>\n                            <CopyButton\n                                data={SAMPLE_DATEFNS_FORMAT.replace('#utc_value#', date?.toISOString() ?? '')}\n                            />\n                        </StyledTableCell>\n                    </StyledTableRow>\n                    <StyledTableRow>\n                        <StyledTableCell component=\"th\" scope=\"row\">\n                            UTC string\n                        </StyledTableCell>\n                        <StyledTableCell>{date?.toUTCString()}</StyledTableCell>\n                        <StyledTableCell></StyledTableCell>\n                    </StyledTableRow>\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n","import { Box, Button, FormControl } from '@mui/material';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport EventIcon from '@mui/icons-material/Event';\nimport TimerIcon from '@mui/icons-material/Timer';\n\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { DatePicker, LocalizationProvider, TimePicker } from '@mui/x-date-pickers';\n\nimport React, { useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { setTextAction } from '../../actions/text-actions';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport { AppState } from '../../reducers';\nimport { CardLayout } from './CardLayout';\nimport { useStyles } from './styles';\nimport { TableLayout } from './TableLayout';\nimport { useIsWidthDown, useIsWidthUp } from '../../theme';\n\ninterface Props {\n    inputText?: string;\n    storeInputText: (name: string, value: string) => void;\n}\n\nconst DateConverter: React.FC<Props> = (props: Props) => {\n    const title = 'Date & Epoch';\n    const classes = useStyles();\n    const { inputText, storeInputText } = props;\n    const [date, setDate] = useState<Date | null>(null);\n    const isMdUp = useIsWidthUp('md');\n    const isSmDown = useIsWidthDown('md');\n\n    const handleDateChange = (date: any) => {\n        setDate(date);\n        storeInputText('lastEpochValue', `${date?.getTime()}`);\n    };\n\n    useEffect(() => {\n        if (inputText) {\n            setDate(new Date(+inputText));\n        }\n    }, [inputText]);\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={EventIcon} title={title} />\n\n                <form className={classes.form} noValidate>\n                    <Grid container justifyContent=\"space-between\">\n                        <Box display=\"flex\" alignItems=\"center\">\n                            <FormControl className={classes.formControl}>\n                                <TextField\n                                    autoFocus={isMdUp}\n                                    label=\"Epoch value\"\n                                    placeholder=\"Epoch value\"\n                                    type=\"number\"\n                                    variant=\"outlined\"\n                                    value={inputText}\n                                    onChange={e => storeInputText('lastEpochValue', e.target.value)}\n                                />\n                            </FormControl>\n                            <Button\n                                variant=\"contained\"\n                                title=\"Update value with 'Now' timestamp\"\n                                color=\"primary\"\n                                onClick={() => handleDateChange(new Date())}>\n                                <TimerIcon />\n                            </Button>\n                        </Box>\n                        <Box display=\"flex\" alignItems=\"center\">\n                            <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                <FormControl className={classes.formControl}>\n                                    <DatePicker\n                                        label=\"Date\"\n                                        inputFormat=\"yyyy-MM-dd\"\n                                        value={date}\n                                        onChange={handleDateChange}\n                                        renderInput={props => <TextField {...props} />}\n                                    />\n                                </FormControl>\n                                <FormControl className={classes.formControl}>\n                                    <TimePicker\n                                        label=\"Time\"\n                                        inputFormat=\"HH:mm:ss\"\n                                        value={date}\n                                        onChange={handleDateChange}\n                                        renderInput={props => <TextField {...props} />}\n                                    />\n                                </FormControl>\n                            </LocalizationProvider>\n                        </Box>\n                    </Grid>\n                </form>\n\n                {isSmDown && <CardLayout date={date} epochString={inputText} />}\n\n                {isMdUp && <TableLayout date={date} epochString={inputText} />}\n            </div>\n        </>\n    );\n};\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        inputText: state.textInputs['lastEpochValue'],\n    };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DateConverter);\n","import { Typography } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport React from 'react';\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        wordBreak: 'break-word',\n    },\n    titleWithIcon: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    titleContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    icon: {\n        height: '40px',\n        width: '40px',\n        marginRight: theme.spacing(1),\n    },\n}));\n\ninterface Props {\n    title: string;\n    iconType: any;\n}\n\nconst FeatureTitle: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const FeatureIcon = props.iconType;\n\n    return (\n        <div className={classes.titleContainer}>\n            <div className={classes.titleWithIcon}>\n                <FeatureIcon className={classes.icon} />\n                <Typography variant=\"h5\" className={classes.title}>\n                    {props.title}\n                </Typography>\n            </div>\n        </div>\n    );\n};\n\nexport default FeatureTitle;\n","import { Button, ButtonProps, SvgIconTypeMap } from '@mui/material';\nimport { OverridableComponent } from '@mui/material/OverridableComponent';\nimport AssignmentTurnedIn from '@mui/icons-material/AssignmentTurnedIn';\nimport * as copy from 'copy-to-clipboard';\nimport React from 'react';\nimport { useToasterUpdate } from '../Toaster/ToasterProvider';\n\ntype Props = {\n    data?: string;\n    isDisabled?: boolean;\n    hoverMessage?: string;\n    feedbackMessage?: string;\n    Icon?: OverridableComponent<SvgIconTypeMap<unknown, 'svg'>>;\n} & ButtonProps;\n\nconst CopyButton: React.FC<Props> = ({\n    data,\n    isDisabled,\n    hoverMessage,\n    feedbackMessage,\n    Icon = AssignmentTurnedIn,\n    ...others\n}: Props) => {\n    const { setToasterState } = useToasterUpdate();\n\n    const handleCopy = () => {\n        if (!data) {\n            return;\n        }\n\n        const message = feedbackMessage ?? `Content copied into clipboard: ${data.substring(0, 25)} …`;\n\n        copy.default(data, { format: 'text/plain' });\n        setToasterState({ open: true, message, type: 'success', autoHideDuration: 2000 });\n    };\n\n    return (\n        <Button\n            {...others}\n            onClick={handleCopy}\n            disabled={!data || isDisabled}\n            title={hoverMessage ?? 'Copy to clipboard'}\n            variant=\"contained\"\n            color=\"primary\">\n            <Icon />\n        </Button>\n    );\n};\n\nexport default CopyButton;\n","import { usePreferenceTheme } from '../components/Preferences/PreferencesProvider';\nimport { docco, dark } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nexport const useSyntaxHighlightTheme = () => {\n    const { isDark } = usePreferenceTheme();\n\n    return isDark ? dark : docco;\n};\n"],"sourceRoot":""}