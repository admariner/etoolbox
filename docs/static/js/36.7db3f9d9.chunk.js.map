{"version":3,"sources":["components/ConfirmDialog/index.tsx","containers/PokerPlanning/model.ts","containers/PokerPlanning/PokerCard.tsx","containers/PokerPlanning/styles.ts","containers/PokerPlanning/index.tsx","containers/PokerPlanning/services.ts","components/FeatureTitle/index.tsx","components/CopyButton/index.tsx","services/string-utils.ts"],"names":["ConfirmDialog","title","children","isOpen","setIsOpen","onConfirm","Dialog","open","onClose","DialogTitle","id","DialogContent","DialogActions","Button","variant","onClick","color","POKER_PLANNING_RATINGS_ENHANCED","SOCKET_STATES","Map","WebSocket","CLOSED","OPEN","CLOSING","CONNECTING","SIZE_PX","PokerCard","value","isDisabled","isSelected","theme","useTheme","style","maxWidth","maxHeight","minWidth","minHeight","margin","spacing","disabled","Typography","StyledTableCell","withStyles","body","fontSize","whiteSpace","wordBreak","TableCell","StyledTableRow","root","backgroundColor","palette","action","hover","TableRow","useStyles","makeStyles","toolbar","height","padding","marginLeft","formControl","marginRight","submitEstimate","marginTop","display","justifyContent","flexWrap","estimatesVisibility","alignItems","teamEstimates","tableHeader","primary","main","mapStateToProps","state","lastPockerPlanningHostName","textInputs","lastPockerPlanningRoomUUID","lastPockerPlanningRoomName","lastPockerPlanningUsername","mapDispatchToProps","dispatch","storeInputText","name","setTextAction","connect","withWidth","props","classes","navigate","useNavigate","useParams","hostName","roomUUID","roomName","socketRef","useRef","useState","myEstimate","setMyEstimate","socketState","setSocketState","isConfirmClearVotesOpen","setIsConfirmClearVotesOpen","isEstimatesVisible","setIsEstimatesVisible","estimates","setEstimates","values","map","e","estimate","filter","undefined","Number","estimatesSum","reduce","acc","val","average","length","estimatesAverage","Math","round","EPSILON","parseEstimates","isReadyToStartSession","isNotBlank","isReadyToVote","useEffect","protocol","window","location","url","socket","onopen","updateSocketState","readyState","onerror","onclose","onmessage","ev","session","JSON","parse","data","current","get","close","Helmet","className","FeatureTitle","iconType","PockerPlanningIcon","noValidate","autoComplete","Grid","container","item","md","sm","xs","FormControl","fullWidth","TextField","label","placeholder","onChange","target","newRoomUUID","v4","replace","CopyButton","href","Icon","ShareLink","hoverMessage","feedbackMessage","Fragment","message","type","payload","username","estimatedAt","Date","send","stringify","updateMyEstimate","TableContainer","component","Paper","Table","size","isWidthUp","width","TableHead","scope","align","TableBody","FormControlLabel","control","Switch","checked","v","estimateWhenDisplayON","estimateWhenDisplayOFF","titleWithIcon","titleContainer","icon","FeatureIcon","AssignmentTurnedIn","setToasterState","useToasterUpdate","substring","copy","format","autoHideDuration","isBlank","str","trim"],"mappings":"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","file":"static/js/36.7db3f9d9.chunk.js","sourcesContent":["import React, { PropsWithChildren } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\ntype ConfirmDialogProps = PropsWithChildren<{\n    title: string;\n    isOpen: boolean;\n    setIsOpen: (value: boolean) => void;\n    onConfirm: () => void;\n}>;\n\nconst ConfirmDialog: React.FC<ConfirmDialogProps> = ({ title, children, isOpen, setIsOpen, onConfirm }) => {\n    return (\n        <Dialog open={isOpen} onClose={() => setIsOpen(false)} aria-labelledby=\"confirm-dialog\">\n            <DialogTitle id=\"confirm-dialog\">{title}</DialogTitle>\n            <DialogContent>{children}</DialogContent>\n            <DialogActions>\n                <Button variant=\"contained\" onClick={() => setIsOpen(false)} color=\"secondary\">\n                    No\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => {\n                        setIsOpen(false);\n                        onConfirm();\n                    }}\n                    color=\"default\">\n                    Yes\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default ConfirmDialog;\n","export const POKER_PLANNING_RATINGS_ENHANCED: string[] = [\n    '?',\n    '0',\n    '0.5',\n    '1',\n    '1.5',\n    '2',\n    '2.5',\n    '3',\n    '3.5',\n    '4',\n    '4.5',\n    '5',\n    '8',\n    '13',\n    '20',\n    '40',\n    '100',\n];\n\nexport type UserEstimate = {\n    roomUUID: string;\n    username: string;\n    estimate?: string;\n    estimatedAt?: Date;\n};\n\nexport type PokerPlanningSession = {\n    lastUpdate: Date;\n    estimates: UserEstimate[];\n};\n\nexport type MessageType = 'reset' | 'vote';\n\nexport type UserMessage = {\n    type: MessageType;\n    payload?: unknown;\n};\n\nexport const SOCKET_STATES: Map<number, string> = new Map([\n    [WebSocket.CLOSED, 'close'],\n    [WebSocket.OPEN, 'open'],\n    [WebSocket.CLOSING, 'closing'],\n    [WebSocket.CONNECTING, 'connecting'],\n]);\n\nexport type EstimatesStats = {\n    values: number[];\n    estimatesSum: number;\n    estimatesAverage: number;\n};\n","import { Button, Typography, useTheme } from '@material-ui/core';\nimport React from 'react';\n\ntype PokerCardType = {\n    value: string;\n    isDisabled: boolean;\n    isSelected: boolean;\n    onClick: (value: string) => void;\n};\n\nconst SIZE = 70;\nconst SIZE_PX = `${SIZE}px`;\n\nexport const PokerCard: React.FC<PokerCardType> = ({ value, isDisabled, isSelected, onClick }) => {\n    const theme = useTheme();\n\n    return (\n        <Button\n            style={{\n                maxWidth: SIZE_PX,\n                maxHeight: SIZE_PX,\n                minWidth: SIZE_PX,\n                minHeight: SIZE_PX,\n                margin: theme.spacing(1),\n            }}\n            variant={isSelected ? 'contained' : 'outlined'}\n            disabled={isDisabled}\n            title={`Estimate the current story point as: [${value}]`}\n            color=\"primary\"\n            onClick={() => onClick(value)}>\n            <Typography variant=\"h5\">{value}</Typography>\n        </Button>\n    );\n};\n","import { makeStyles, TableCell, TableRow, withStyles } from '@material-ui/core';\n\nexport const StyledTableCell = withStyles(() => ({\n    body: {\n        fontSize: 14,\n        whiteSpace: 'normal',\n        wordBreak: 'break-word',\n    },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles(theme => ({\n    root: {\n        '&:nth-of-type(even)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\nexport const useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    toolbar: {\n        height: '100%',\n        margin: 0,\n        padding: 0,\n        '& > *': {\n            marginLeft: theme.spacing(1),\n        },\n    },\n    formControl: {\n        marginRight: theme.spacing(1),\n    },\n    submitEstimate: {\n        marginTop: theme.spacing(2),\n        display: 'flex',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n    },\n    estimatesVisibility: {\n        alignItems: 'center',\n    },\n    teamEstimates: {\n        marginTop: theme.spacing(4),\n    },\n    tableHeader: {\n        backgroundColor: theme.palette.primary.main,\n    },\n}));\n","import {\n    FormControl,\n    FormControlLabel,\n    Grid,\n    isWidthUp,\n    Paper,\n    Switch,\n    Table,\n    TableBody,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Typography,\n    withWidth,\n} from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\nimport TextField from '@material-ui/core/TextField';\nimport Delete from '@material-ui/icons/Delete';\nimport PockerPlanningIcon from '@material-ui/icons/Filter3';\nimport ShareLink from '@material-ui/icons/Share';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Dispatch } from 'redux';\nimport { v4 } from 'uuid';\nimport { setTextAction } from '../../actions/text-actions';\nimport ConfirmDialog from '../../components/ConfirmDialog';\nimport CopyButton from '../../components/CopyButton';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport { AppState } from '../../reducers';\nimport { isNotBlank } from '../../services/string-utils';\nimport {\n    PokerPlanningSession,\n    POKER_PLANNING_RATINGS_ENHANCED,\n    SOCKET_STATES,\n    UserEstimate,\n    UserMessage,\n} from './model';\nimport { PokerCard } from './PokerCard';\nimport { parseEstimates } from './services';\nimport { StyledTableCell, StyledTableRow, useStyles } from './styles';\n\ninterface Props {\n    width: Breakpoint;\n    lastPockerPlanningRoomName?: string;\n    lastPockerPlanningUsername?: string;\n    lastPockerPlanningRoomUUID?: string;\n    lastPockerPlanningHostName?: string;\n    storeInputText: (name: string, value: string) => void;\n}\n\nconst PokerPlanning: React.FC<Props> = (props: Props) => {\n    const title = 'Porker planning';\n    const classes = useStyles();\n    const navigate = useNavigate();\n\n    // component inputs\n    const { hostName, roomUUID, roomName } = useParams();\n    const {\n        lastPockerPlanningRoomUUID,\n        lastPockerPlanningRoomName,\n        lastPockerPlanningUsername,\n        lastPockerPlanningHostName,\n        storeInputText,\n    } = props;\n\n    // component state\n    const socketRef = useRef<WebSocket>();\n    const [myEstimate, setMyEstimate] = useState<string>('');\n    const [socketState, setSocketState] = useState<string>('');\n    const [isConfirmClearVotesOpen, setIsConfirmClearVotesOpen] = useState<boolean>(false);\n    const [isEstimatesVisible, setIsEstimatesVisible] = useState<boolean>(false);\n    const [estimates, setEstimates] = useState<UserEstimate[]>([]);\n\n    // computing\n    const { estimatesAverage } = parseEstimates(estimates);\n    const isReadyToStartSession =\n        isNotBlank(lastPockerPlanningHostName) &&\n        isNotBlank(lastPockerPlanningRoomUUID) &&\n        isNotBlank(hostName) &&\n        isNotBlank(roomUUID);\n    const isReadyToVote =\n        isNotBlank(lastPockerPlanningHostName) &&\n        isNotBlank(lastPockerPlanningRoomUUID) &&\n        isNotBlank(lastPockerPlanningRoomName) &&\n        isNotBlank(lastPockerPlanningUsername);\n\n    // whenever route params are updated we update the store\n    useEffect(() => {\n        if (roomName && roomUUID && hostName) {\n            // remember info provided by route\n            storeInputText('lastPockerPlanningRoomName', roomName);\n            storeInputText('lastPockerPlanningRoomUUID', roomUUID);\n            storeInputText('lastPockerPlanningHostName', hostName);\n        }\n    }, [roomUUID, roomName, hostName, storeInputText]);\n\n    useEffect(() => {\n        if (!isReadyToStartSession) {\n            return;\n        }\n\n        // socket creation on component unmount\n        const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\n        const url = `${protocol}://${lastPockerPlanningHostName}/ws?roomUUID=${lastPockerPlanningRoomUUID}`;\n        const socket = new WebSocket(url);\n        socket.onopen = () => updateSocketState(socket.readyState);\n        socket.onerror = () => updateSocketState(socket.readyState);\n        socket.onclose = () => updateSocketState(socket.readyState);\n        socket.onmessage = (ev: MessageEvent<string>) => {\n            const session = JSON.parse(ev.data) as PokerPlanningSession;\n            setEstimates(session.estimates);\n        };\n\n        socketRef.current = socket;\n    }, [socketRef, isReadyToStartSession, lastPockerPlanningHostName, lastPockerPlanningRoomUUID]);\n\n    const updateSocketState = (state: number): void => setSocketState(SOCKET_STATES.get(state) ?? '');\n\n    useEffect(() => {\n        // socket cleanup whenever component unmount\n        return () => socketRef.current?.close();\n    }, []);\n\n    const handleOpenNewRoom = () => {\n        const newRoomUUID = v4();\n        navigate(`/PokerPlanning/${lastPockerPlanningHostName}/${newRoomUUID}/${lastPockerPlanningRoomName}`, {\n            replace: true,\n        });\n    };\n\n    const handleClearEstimates = () => {\n        socketRef.current?.send(JSON.stringify({ type: 'reset' }));\n        setIsEstimatesVisible(false);\n        setMyEstimate('');\n    };\n\n    const updateMyEstimate = (value: string) => {\n        setMyEstimate(value);\n\n        // TODO prevent button press if username is not provided\n        // TODO usage of [new WebSocket + socket.onopen callback] to send the message if the readyState is not OPEN\n        // socketRef.current?.onopen\n        const message: UserMessage = {\n            type: 'vote',\n            payload: {\n                roomUUID: lastPockerPlanningRoomUUID ?? '',\n                username: lastPockerPlanningUsername ?? '',\n                estimate: value,\n                estimatedAt: new Date(),\n            },\n        };\n        socketRef.current?.send(JSON.stringify(message));\n    };\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={PockerPlanningIcon} title={title} />\n\n                <form noValidate autoComplete=\"off\">\n                    <Grid container spacing={1}>\n                        <Grid item md={3} sm={6} xs={12}>\n                            <FormControl className={classes.formControl} fullWidth={true}>\n                                <TextField\n                                    label=\"Server (hostname)\"\n                                    placeholder=\"Type the poker plannind hostname here\"\n                                    variant=\"outlined\"\n                                    fullWidth={true}\n                                    margin=\"normal\"\n                                    value={lastPockerPlanningHostName}\n                                    onChange={e => storeInputText('lastPockerPlanningHostName', e.target.value)}\n                                />\n                            </FormControl>\n                        </Grid>\n                        <Grid item md={3} sm={6} xs={12}>\n                            <FormControl className={classes.formControl} fullWidth={true}>\n                                <TextField\n                                    label=\"Team name\"\n                                    placeholder=\"Type the team name here\"\n                                    variant=\"outlined\"\n                                    fullWidth={true}\n                                    margin=\"normal\"\n                                    value={lastPockerPlanningRoomName}\n                                    onChange={e => storeInputText('lastPockerPlanningRoomName', e.target.value)}\n                                />\n                            </FormControl>\n                        </Grid>\n                        <Grid item md={3} sm={6} xs={12}>\n                            <FormControl className={classes.formControl} fullWidth={true}>\n                                <TextField\n                                    label=\"Your name\"\n                                    placeholder=\"Type your name here\"\n                                    variant=\"outlined\"\n                                    fullWidth={true}\n                                    margin=\"normal\"\n                                    value={lastPockerPlanningUsername}\n                                    onChange={e => storeInputText('lastPockerPlanningUsername', e.target.value)}\n                                />\n                            </FormControl>\n                        </Grid>\n                        <Grid item md={3} sm={6} xs={12}>\n                            <Grid container justifyContent=\"flex-end\" alignItems=\"center\" className={classes.toolbar}>\n                                <Button\n                                    variant=\"contained\"\n                                    title=\"Register the team and start planning\"\n                                    color=\"primary\"\n                                    onClick={handleOpenNewRoom}>\n                                    Join [{socketState}]\n                                </Button>\n                                <CopyButton\n                                    data={window.location.href}\n                                    Icon={ShareLink}\n                                    hoverMessage=\"Copy link to clipboard for sharing\"\n                                    feedbackMessage=\"Link copied to clipboard, you can now share to all members\"\n                                />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </form>\n\n                <div className={classes.submitEstimate}>\n                    {POKER_PLANNING_RATINGS_ENHANCED.map(value => (\n                        <React.Fragment key={value}>\n                            <PokerCard\n                                key={value}\n                                isDisabled={!isReadyToVote}\n                                isSelected={myEstimate === value}\n                                value={value}\n                                onClick={() => updateMyEstimate(value)}\n                            />\n                        </React.Fragment>\n                    ))}\n                </div>\n\n                <div className={classes.teamEstimates}>\n                    <TableContainer component={Paper}>\n                        <Table size={isWidthUp('md', props.width) ? 'medium' : 'small'}>\n                            <TableHead className={classes.tableHeader}>\n                                <TableRow>\n                                    <StyledTableCell component=\"th\" scope=\"row\">\n                                        Team member\n                                    </StyledTableCell>\n                                    <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                        Voted\n                                    </StyledTableCell>\n                                    <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                        <Button variant=\"text\" onClick={() => setIsConfirmClearVotesOpen(true)}>\n                                            Story points <Delete />\n                                        </Button>\n                                    </StyledTableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                <StyledTableRow key=\"estimatesVisibility\">\n                                    <StyledTableCell>\n                                        <FormControlLabel\n                                            control={\n                                                <Switch\n                                                    checked={isEstimatesVisible}\n                                                    onChange={() => setIsEstimatesVisible(v => !v)}\n                                                />\n                                            }\n                                            label=\"story points visibility\"\n                                        />\n                                    </StyledTableCell>\n                                    <StyledTableCell></StyledTableCell>\n                                    <StyledTableCell align=\"center\" onClick={() => setIsEstimatesVisible(v => !v)}>\n                                        {isEstimatesVisible ? <Visibility /> : <VisibilityOff />}\n                                    </StyledTableCell>\n                                </StyledTableRow>\n                                {estimates.map(({ username, estimate }) => {\n                                    const estimateWhenDisplayON = estimate ?? '…';\n                                    const estimateWhenDisplayOFF = estimate ? <VisibilityOff /> : '…';\n                                    return (\n                                        <StyledTableRow key={username}>\n                                            <StyledTableCell>{username}</StyledTableCell>\n                                            <StyledTableCell align=\"center\">{estimate ? '✔' : ''}</StyledTableCell>\n                                            <StyledTableCell align=\"center\">\n                                                {isEstimatesVisible ? estimateWhenDisplayON : estimateWhenDisplayOFF}\n                                            </StyledTableCell>\n                                        </StyledTableRow>\n                                    );\n                                })}\n                                <StyledTableRow key=\"average\">\n                                    <StyledTableCell>\n                                        <Typography variant=\"h6\">Average</Typography>\n                                    </StyledTableCell>\n                                    <StyledTableCell></StyledTableCell>\n                                    <StyledTableCell align=\"center\">\n                                        <Typography variant=\"h6\">\n                                            {isEstimatesVisible ? estimatesAverage : '…'}\n                                        </Typography>\n                                    </StyledTableCell>\n                                </StyledTableRow>\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </div>\n            </div>\n\n            <ConfirmDialog\n                title=\"Confirmation\"\n                isOpen={isConfirmClearVotesOpen}\n                setIsOpen={setIsConfirmClearVotesOpen}\n                onConfirm={handleClearEstimates}>\n                Are you sure you want to delete all votes?\n            </ConfirmDialog>\n        </>\n    );\n};\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        lastPockerPlanningHostName: state.textInputs['lastPockerPlanningHostName'],\n        lastPockerPlanningRoomUUID: state.textInputs['lastPockerPlanningRoomUUID'],\n        lastPockerPlanningRoomName: state.textInputs['lastPockerPlanningRoomName'],\n        lastPockerPlanningUsername: state.textInputs['lastPockerPlanningUsername'],\n    };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withWidth()(PokerPlanning));\n","import { EstimatesStats, UserEstimate } from './model';\n\nexport const parseEstimates = (estimates: UserEstimate[]): EstimatesStats => {\n    const values = estimates\n        .map(e => e.estimate)\n        .filter(e => e !== null && e !== undefined && e !== '?')\n        .map(e => Number(e));\n    const estimatesSum = values.reduce((acc, val) => acc + Number(val), 0);\n    const average = values.length > 0 ? estimatesSum / values.length : 0;\n    const estimatesAverage = Math.round(average * 10 + Number.EPSILON) / 10;\n\n    return {\n        values,\n        estimatesSum,\n        estimatesAverage,\n    };\n};\n","import { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        wordBreak: 'break-word',\n    },\n    titleWithIcon: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    titleContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    icon: {\n        height: '40px',\n        width: '40px',\n        marginRight: theme.spacing(1),\n    },\n}));\n\ninterface Props {\n    title: string;\n    iconType: any;\n}\n\nconst FeatureTitle: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const FeatureIcon = props.iconType;\n\n    return (\n        <div className={classes.titleContainer}>\n            <div className={classes.titleWithIcon}>\n                <FeatureIcon className={classes.icon} />\n                <Typography variant=\"h5\" className={classes.title}>\n                    {props.title}\n                </Typography>\n            </div>\n        </div>\n    );\n};\n\nexport default FeatureTitle;\n","import { Button, SvgIconTypeMap } from '@material-ui/core';\nimport { OverridableComponent } from '@material-ui/core/OverridableComponent';\nimport AssignmentTurnedIn from '@material-ui/icons/AssignmentTurnedIn';\nimport * as copy from 'copy-to-clipboard';\nimport React from 'react';\nimport { useToasterUpdate } from '../Toaster/ToasterProvider';\n\ninterface Props {\n    data?: string;\n    hoverMessage?: string;\n    feedbackMessage?: string;\n    Icon?: OverridableComponent<SvgIconTypeMap<unknown, 'svg'>>;\n}\n\nconst CopyButton: React.FC<Props> = ({ data, hoverMessage, feedbackMessage, Icon = AssignmentTurnedIn }: Props) => {\n    const { setToasterState } = useToasterUpdate();\n\n    const handleCopy = () => {\n        if (!data) {\n            return;\n        }\n\n        const message = feedbackMessage ?? `Content copied into clipboard: ${data.substring(0, 25)} …`;\n\n        copy.default(data, { format: 'text/plain' });\n        setToasterState({ open: true, message, type: 'success', autoHideDuration: 2000 });\n    };\n\n    return (\n        <Button\n            onClick={handleCopy}\n            disabled={!data}\n            title={hoverMessage ?? 'Copy to clipboard'}\n            variant=\"contained\"\n            color=\"primary\">\n            <Icon />\n        </Button>\n    );\n};\n\nexport default CopyButton;\n","export function isBlank(str: string | undefined | null) {\n    if (!str || str.trim().length === 0) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function isNotBlank(str: string | undefined | null) {\n    return !isBlank(str);\n}\n"],"sourceRoot":""}