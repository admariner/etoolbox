{"version":3,"sources":["containers/UUIDGenerator/services.ts","containers/UUIDGenerator/index.tsx","components/FeatureTitle/index.tsx","components/CopyButton/index.tsx","components/ResultMonospace/index.tsx"],"names":["generate","version","quantity","uuidGenerator","v1","v4","result","i","slice","useStyles","makeStyles","theme","root","margin","spacing","form","marginTop","formControl","toolbar","UUIDGenerator","title","classes","isMdUp","useIsWidthUp","useForm","defaultValues","handleSubmit","control","React","useState","services","generated","setGenerated","Helmet","className","FeatureTitle","iconType","SimCardIcon","Grid","container","item","md","sm","xs","FormControl","fullWidth","name","defaultValue","render","field","value","onChange","TextField","select","label","autoFocus","e","target","MenuItem","rules","required","min","max","FormHelperText","fieldState","invalid","error","type","helperText","justifyContent","CopyButton","data","sx","mr","Button","variant","color","onClick","endIcon","ResultMonospace","wordBreak","titleWithIcon","display","alignItems","titleContainer","icon","height","width","marginRight","props","FeatureIcon","isDisabled","hoverMessage","feedbackMessage","Icon","AssignmentTurnedIn","others","setToasterState","useToasterUpdate","message","substring","copy","format","open","autoHideDuration","disabled","fontFamily","rows","maxRows","multiline","minRows","InputProps","input"],"mappings":"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","file":"static/js/33.7ebb2dca.chunk.js","sourcesContent":["import { v1, v4 } from 'uuid';\n\nexport function generate(version: number, quantity: number): string {\n    const uuidGenerator = version === 1 ? v1 : v4;\n\n    let result = '';\n    for (let i = 0; i < quantity; i++) {\n        result += `${uuidGenerator()}\\n`;\n    }\n\n    // Return result without last line feed\n    return result.slice(0, -1);\n}\n","import { FormControl, FormHelperText, Grid, InputLabel, MenuItem, Select, TextField } from '@mui/material';\nimport Button from '@mui/material/Button';\nimport { makeStyles } from '@mui/styles';\nimport SimCardIcon from '@mui/icons-material/SimCard';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Controller, useForm } from 'react-hook-form';\nimport CopyButton from '../../components/CopyButton';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport ResultMonospace from '../../components/ResultMonospace';\nimport * as services from './services';\nimport { useIsWidthUp } from '../../theme';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    form: {\n        marginTop: theme.spacing(2),\n    },\n    formControl: {\n        margin: theme.spacing(1),\n    },\n    toolbar: {},\n}));\n\ninterface UUIDForm {\n    version: number;\n    quantity: number;\n}\n\nconst UUIDGenerator: React.FC = () => {\n    const title = 'UUID Generator';\n    const classes = useStyles();\n    const isMdUp = useIsWidthUp('md');\n    const defaultValues = {\n        version: 4,\n        quantity: 5,\n    };\n    const { handleSubmit, control } = useForm({ defaultValues });\n    const [generated, setGenerated] = React.useState(services.generate(4, 1));\n\n    const onSubmit = (data: UUIDForm) => {\n        setGenerated(services.generate(data.version, data.quantity));\n    };\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={SimCardIcon} title={title} />\n\n                <div className={classes.form}>\n                    <Grid container spacing={1}>\n                        <Grid item md={2} sm={3} xs={6}>\n                            <FormControl className={classes.formControl} fullWidth={true}>\n                                <Controller\n                                    control={control}\n                                    name=\"version\"\n                                    defaultValue={4}\n                                    render={({ field: { value, name, onChange } }) => (\n                                        <TextField\n                                            select={true}\n                                            name={name}\n                                            value={value}\n                                            label=\"Version\"\n                                            autoFocus={isMdUp}\n                                            onChange={e => onChange(e.target.value)}>\n                                            <MenuItem value={1}>1</MenuItem>\n                                            <MenuItem value={4}>4</MenuItem>\n                                        </TextField>\n                                    )}\n                                    rules={{\n                                        required: true,\n                                        min: 1,\n                                        max: 5,\n                                    }}\n                                />\n                                <FormHelperText>RFC4122 version</FormHelperText>\n                            </FormControl>\n                        </Grid>\n                        <Grid item md={2} sm={3} xs={6}>\n                            <FormControl className={classes.formControl} fullWidth={true}>\n                                <Controller\n                                    name=\"quantity\"\n                                    render={({ field: { value, name, onChange }, fieldState: { invalid, error } }) => (\n                                        <TextField\n                                            name={name}\n                                            value={value}\n                                            label=\"Quantity\"\n                                            error={invalid}\n                                            type=\"number\"\n                                            onChange={e => onChange(e.target.value)}\n                                            helperText={invalid ? 'valid range: [1..9999]' : null}\n                                        />\n                                    )}\n                                    control={control}\n                                    defaultValue={5}\n                                    rules={{\n                                        required: true,\n                                        min: 1,\n                                        max: 9999,\n                                    }}\n                                />\n                                <FormHelperText>Number of UUIDs</FormHelperText>\n                            </FormControl>\n                        </Grid>\n                        <Grid item md={8} sm={6} xs={12}>\n                            <Grid container justifyContent=\"flex-end\" className={classes.toolbar}>\n                                <CopyButton data={generated} sx={{ mr: 1 }} />\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    title=\"Generate the UUID elements\"\n                                    onClick={handleSubmit(onSubmit)}\n                                    endIcon={<SimCardIcon />}>\n                                    Generate\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </div>\n\n                <ResultMonospace label=\"Result\" result={generated} />\n            </div>\n        </>\n    );\n};\n\nexport default UUIDGenerator;\n","import { Typography } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport React from 'react';\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        wordBreak: 'break-word',\n    },\n    titleWithIcon: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    titleContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    icon: {\n        height: '40px',\n        width: '40px',\n        marginRight: theme.spacing(1),\n    },\n}));\n\ninterface Props {\n    title: string;\n    iconType: any;\n}\n\nconst FeatureTitle: React.FC<Props> = (props: Props) => {\n    const classes = useStyles();\n    const FeatureIcon = props.iconType;\n\n    return (\n        <div className={classes.titleContainer}>\n            <div className={classes.titleWithIcon}>\n                <FeatureIcon className={classes.icon} />\n                <Typography variant=\"h5\" className={classes.title}>\n                    {props.title}\n                </Typography>\n            </div>\n        </div>\n    );\n};\n\nexport default FeatureTitle;\n","import { Button, ButtonProps, SvgIconTypeMap } from '@mui/material';\nimport { OverridableComponent } from '@mui/material/OverridableComponent';\nimport AssignmentTurnedIn from '@mui/icons-material/AssignmentTurnedIn';\nimport * as copy from 'copy-to-clipboard';\nimport React from 'react';\nimport { useToasterUpdate } from '../Toaster/ToasterProvider';\n\ntype Props = {\n    data?: string;\n    isDisabled?: boolean;\n    hoverMessage?: string;\n    feedbackMessage?: string;\n    Icon?: OverridableComponent<SvgIconTypeMap<unknown, 'svg'>>;\n} & ButtonProps;\n\nconst CopyButton: React.FC<Props> = ({\n    data,\n    isDisabled,\n    hoverMessage,\n    feedbackMessage,\n    Icon = AssignmentTurnedIn,\n    ...others\n}: Props) => {\n    const { setToasterState } = useToasterUpdate();\n\n    const handleCopy = () => {\n        if (!data) {\n            return;\n        }\n\n        const message = feedbackMessage ?? `Content copied into clipboard: ${data.substring(0, 25)} …`;\n\n        copy.default(data, { format: 'text/plain' });\n        setToasterState({ open: true, message, type: 'success', autoHideDuration: 2000 });\n    };\n\n    return (\n        <Button\n            {...others}\n            onClick={handleCopy}\n            disabled={!data || isDisabled}\n            title={hoverMessage ?? 'Copy to clipboard'}\n            variant=\"contained\"\n            color=\"primary\">\n            <Icon />\n        </Button>\n    );\n};\n\nexport default CopyButton;\n","import { TextField } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport React from 'react';\n\nconst useStyles = makeStyles(() => ({\n    result: {\n        fontFamily: 'monospace',\n        height: 'auto',\n    },\n}));\n\ninterface Props {\n    label?: string;\n    result?: string;\n    rows?: number;\n    maxRows?: number;\n}\n\nexport const ResultMonospace = ({ label, result, rows = 10, maxRows = 15 }: Props) => {\n    const classes = useStyles();\n\n    return (\n        <TextField\n            multiline\n            minRows={rows}\n            maxRows={maxRows}\n            label={label}\n            variant=\"outlined\"\n            margin=\"normal\"\n            fullWidth={true}\n            value={result}\n            InputProps={{\n                classes: {\n                    input: classes.result,\n                },\n            }}\n        />\n    );\n};\n\nexport default ResultMonospace;\n"],"sourceRoot":""}