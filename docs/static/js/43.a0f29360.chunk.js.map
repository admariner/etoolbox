{"version":3,"sources":["containers/Base64Encoder/services.ts","containers/Base64Encoder/index.tsx"],"names":["transform","value","encoded","btoa","atob","e","JSON","stringify","useStyles","makeStyles","theme","root","margin","spacing","toolbar","padding","mapStateToProps","state","inputText","textInputs","mapDispatchToProps","dispatch","storeInputText","name","setTextAction","connect","props","title","classes","isMdUp","useIsWidthUp","React","useState","transformed","setTransformed","Helmet","className","FeatureTitle","iconType","DeveloperBoardIcon","TextField","autoFocus","label","placeholder","multiline","minRows","maxRows","variant","fullWidth","onChange","target","Toolbar","Button","color","disabled","onClick","Box","display","flexGrow","CopyButton","data","sx","mr","services","ResultMonospace","result"],"mappings":"+WAAO,SAASA,EAAUC,EAA2BC,GACjD,IAAKD,EACD,MAAO,GAGX,IACI,OAAIC,EACOC,KAAKF,GAELG,KAAKH,EAInB,CAFC,MAAOI,GACL,OAAOC,KAAKC,UAAUF,EACzB,CACJ,C,yECQKG,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,OAAQF,EAAMG,QAAQ,IAE1BC,QAAS,CACLF,OAAQ,EACRG,QAAS,GANiB,IAmF3B,SAASC,EAAgBC,GAC5B,MAAO,CACHC,UAAWD,EAAME,WAAN,uBAElB,CAEM,SAASC,EAAmBC,GAC/B,MAAO,CACHC,eAAgB,SAACC,EAActB,GAAf,OAAiCoB,EAASG,YAAcD,EAAMtB,GAA9D,EAEvB,CAEcwB,sBAAQT,EAAiBI,EAAzBK,EAhFwB,SAACC,GACpC,IAAMC,EAAQ,2BACRC,EAAUpB,IACVqB,EAASC,YAAa,MACpBZ,EAA8BQ,EAA9BR,UAAWI,EAAmBI,EAAnBJ,eACnB,EAAsCS,IAAMC,SAAS,IAArD,mBAAOC,EAAP,KAAoBC,EAApB,KAOA,OACI,qCACI,cAACC,EAAA,EAAD,CAAQR,MAAOA,IACf,sBAAKS,UAAWR,EAAQjB,KAAxB,UACI,cAAC0B,EAAA,EAAD,CAAcC,SAAUC,IAAoBZ,MAAOA,IAEnD,cAACa,EAAA,EAAD,CACIC,UAAWZ,EACXa,MAAM,kCACNC,YAAY,iCACZC,WAAS,EACTC,QAAS,EACTC,QAASjB,EAAS,GAAK,EACvBkB,QAAQ,WACRnC,OAAO,SACPoC,WAAW,EACX/C,MAAOiB,EACP+B,SAAU,SAAA5C,GAAC,OAAIiB,EAAe,yBAA0BjB,EAAE6C,OAAOjD,MAAtD,IAGf,eAACkD,EAAA,EAAD,CAASf,UAAWR,EAAQd,QAA5B,UACI,cAACsC,EAAA,EAAD,CACIL,QAAQ,YACRM,MAAM,UACNC,UAAWrB,EACXsB,QA9BP,WACTjC,EAAe,yBAA0BW,GACzCC,EAAe,GAClB,EA4BmBP,MAAM,qBALV,SAMI,cAAC,IAAD,MAEJ,cAAC6B,EAAA,EAAD,CAAKC,QAAQ,OAAOC,SAAU,IAC9B,cAACC,EAAA,EAAD,CAAYC,KAAM3B,EAAa4B,GAAI,CAAEC,GAAI,KACzC,cAACV,EAAA,EAAD,CACIS,GAAI,CAAEC,GAAI,GACVf,QAAQ,YACRpB,MAAM,qBACN0B,MAAM,UACNC,UAAWpC,EACXqC,QAAS,kBAAMrB,EAAe6B,EAAmB7C,GAAW,GAAnD,EANb,SAOI,cAAC,IAAD,MAEJ,cAACkC,EAAA,EAAD,CACIL,QAAQ,YACRpB,MAAM,qBACN0B,MAAM,UACNC,UAAWpC,EACXqC,QAAS,kBAAMrB,EAAe6B,EAAmB7C,GAAW,GAAnD,EALb,SAMI,cAAC,IAAD,SAIR,cAAC8C,EAAA,EAAD,CAAiBtB,MAAM,SAASuB,OAAQhC,SAIvD,G","file":"static/js/43.a0f29360.chunk.js","sourcesContent":["export function transform(value: string | undefined, encoded: boolean): string {\n    if (!value) {\n        return '';\n    }\n\n    try {\n        if (encoded) {\n            return btoa(value);\n        } else {\n            return atob(value);\n        }\n    } catch (e) {\n        return JSON.stringify(e);\n    }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport Button from '@mui/material/Button';\nimport { makeStyles } from '@mui/styles';\nimport EncodeIcon from '@mui/icons-material/Code';\nimport DecodeIcon from '@mui/icons-material/CodeOff';\nimport DeveloperBoardIcon from '@mui/icons-material/DeveloperBoard';\nimport ImportExportIcon from '@mui/icons-material/ImportExport';\nimport TextField from '@mui/material/TextField';\n\nimport { setTextAction } from '../../actions/text-actions';\nimport { AppState } from '../../reducers';\nimport * as services from './services';\nimport { Box, Toolbar } from '@mui/material';\nimport FeatureTitle from '../../components/FeatureTitle';\nimport CopyButton from '../../components/CopyButton';\nimport { Helmet } from 'react-helmet';\nimport ResultMonospace from '../../components/ResultMonospace';\nimport { useIsWidthUp } from '../../theme';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n    toolbar: {\n        margin: 0,\n        padding: 0,\n    },\n}));\n\ninterface Props {\n    inputText?: string;\n    storeInputText: (name: string, value: string) => void;\n}\n\nconst Base64Encoder: React.FC<Props> = (props: Props) => {\n    const title = 'Base64 Encoder / decoder';\n    const classes = useStyles();\n    const isMdUp = useIsWidthUp('md');\n    const { inputText, storeInputText } = props;\n    const [transformed, setTransformed] = React.useState('');\n\n    const flip = () => {\n        storeInputText('lastBase64EncoderValue', transformed);\n        setTransformed('');\n    };\n\n    return (\n        <>\n            <Helmet title={title} />\n            <div className={classes.root}>\n                <FeatureTitle iconType={DeveloperBoardIcon} title={title} />\n\n                <TextField\n                    autoFocus={isMdUp}\n                    label=\"Content to Base64 encode/decode\"\n                    placeholder=\"Paste or type the content here\"\n                    multiline\n                    minRows={4}\n                    maxRows={isMdUp ? 20 : 4}\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    fullWidth={true}\n                    value={inputText}\n                    onChange={e => storeInputText('lastBase64EncoderValue', e.target.value)}\n                />\n\n                <Toolbar className={classes.toolbar}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={!transformed}\n                        onClick={flip}\n                        title=\"Switch the content\">\n                        <ImportExportIcon />\n                    </Button>\n                    <Box display=\"flex\" flexGrow={1}></Box>\n                    <CopyButton data={transformed} sx={{ mr: 1 }} />\n                    <Button\n                        sx={{ mr: 1 }}\n                        variant=\"contained\"\n                        title=\"Encode the content\"\n                        color=\"primary\"\n                        disabled={!inputText}\n                        onClick={() => setTransformed(services.transform(inputText, true))}>\n                        <EncodeIcon />\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        title=\"Decode the content\"\n                        color=\"primary\"\n                        disabled={!inputText}\n                        onClick={() => setTransformed(services.transform(inputText, false))}>\n                        <DecodeIcon />\n                    </Button>\n                </Toolbar>\n\n                <ResultMonospace label=\"Result\" result={transformed} />\n            </div>\n        </>\n    );\n};\n\nexport function mapStateToProps(state: AppState) {\n    return {\n        inputText: state.textInputs['lastBase64EncoderValue'],\n    };\n}\n\nexport function mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        storeInputText: (name: string, value: string) => dispatch(setTextAction(name, value)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Base64Encoder);\n"],"sourceRoot":""}